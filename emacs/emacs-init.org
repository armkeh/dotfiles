#+Title: Mark Armstrong's literate emacs initialisation
#+Author: Mark Armstrong
#+Description: My (heavily organised) emacs initialisation settings,
#+Description: along with commentary, mostly to help me remember
#+Description: why things are set as they are.
#+Options: num:nil

* Introduction

** Screenshot                                  :ignore:

[[./media/emacs-screenshot-06-26-2021.png]]

** Preamble                                    :ignore:

This document is now in its second major version, having been
started over after it previously grew unwieldly.

This iteration focuses on a more carefully organisation of settings.
Rather than grouping settings by major mode or thematically,
they are grouped by importance.

This grouping allows me to easily reduce my settings to “bare bones”
when needed, without compromising the settings that are most important to me.
And it simplifies the “binary search” approach to debugging,
where we recursively disable roughly half the init file in order
to find the source of some bug.

** Tags

For the sake of searching for settings via their “theme”,
I try to tag headings in this file.

Unfortunately, GitHub's rendering of Org does not include tags,
so these do not show up on GitHub.
But in other formats, you can search by these tags
to find related sections of this file.
On GitHub you may resort to viewing the raw file.

Here is a list of notable tags.
Below, in the raw file, are snippets of code to construct a sparse tree
to bring into view only those headings with that tag
while viewing this file in Emacs.
- ~:org:~; settings for Org mode.
- ~:mail:~; settings for receiving, reading and sending emails.
- ~:programming:~; settings for any programming languages.
- ~:vc:~; settings for version control and related notions,
  such as “diff” and “undo” utilities.
- ~:completion:~; settings for completion frameworks and related notions,
  such as snippets.
- ~:delimiter:~; settings pertaining to delimiters.
- ~:line:~; settings pertaining to the notion of a line.
- ~:space:~; settings dealing with whitespace.
- ~:font:~; settings for font.
- ~:theme:~; settings for theme or other appearance details.
- ~:buffer:~; settings dealing with the notion of buffers.
- ~:window:~; settings dealing with the notion of Emacs windows
  (not OS windows).
- ~:tab:~; settings dealing with the tab bar.
- ~:basic:~; settings for basic elements of Emacs.
- ~:simplify:~; settings to remove or reduce the visual presence
  of elements of Emacs I either do not use at all or don't use often.
- ~:cleanup:~; portions of the file which are just for cleanup,
  not really for adjusting settings.

*** COMMENT Constructing sparse trees from the tags

Execute these snippets to quickly find headings with a tag.
#+begin_example emacs-lisp
(org-match-sparse-tree nil "org")
(org-match-sparse-tree nil "mail")
(org-match-sparse-tree nil "programming")
(org-match-sparse-tree nil "vc")
(org-match-sparse-tree nil "completion")
(org-match-sparse-tree nil "delimiter")
(org-match-sparse-tree nil "line")
(org-match-sparse-tree nil "space")
(org-match-sparse-tree nil "font")
(org-match-sparse-tree nil "theme")
(org-match-sparse-tree nil "buffer")
(org-match-sparse-tree nil "window")
(org-match-sparse-tree nil "tab")
(org-match-sparse-tree nil "basic")
(org-match-sparse-tree nil "simplify")
(org-match-sparse-tree nil "cleanup")
#+end_example

** The file layout

- [[How to use this file]]
  - Instructions on how this file is to incorporated
    into ones Emacs init.
  - Includes the contents of my “actual” Emacs init file,
    which carries out the incorporation of this file into my init.
- [[Environment setup and package management]]
  - Carries out environment variable setup
    and sets up package management
    that is used to install and set up packages
    in the remainder of the document.
- [[Custom Elisp]]
  - Elisp utilities I have written which have somewhat general purpose,
    so that it is not appropriate for them to be tucked in
    with the settings for a particular package.
  - Some of these utilities are simply waiting
    for a better longterm home.
- [[Simple cosmetics]]
  - Harmless cosmetic changes, that make the worst case of a
    crash during initialisation more comfortable.
    - Nothing that should affect performance.
  - Activation of my themes.
  - Toggle some basic features. Including but not limited to:
    - For instance, disable splash screens, menus and scroll bars,
    - and enable line numbers and highlighting of parentheses.
- [[Vital non-mode-specific settings]]
  - Change Emacs settings that are vitally important,
    but which are not tied to a specific mode.
  - I identify these settings as
    “will I encounter unexpected behaviour or be likely
     to make mistakes when carrying out basic tasks
     if these settings are not established?”
  - For instance,
    - automatically revert buffers when they've
      changed on the disk,
    - set up proper consideration of delimiters, and
    - ensure indentation behaves correctly.
- [[Vital modes and vital mode-specific settings]]
  - Activate packages I use near constantly, including:
    - Org mode,
    - mu4e, and
    - while I am working on my thesis at least, Agda mode.
  - And change any settings for them that are vital.
- [[Keybindings]]
  - Set up my keybindings.
  - At time of writing, I use [[https://github.com/noctuid/general.el][general]] for all of this setup.
- [[Intermediate cosmetics]]
  - Cosmetics which are not absolutely vital,
    but make me significantly more comfortable and at home.
  - Or cosmetics that may be vital, but were not simple enough
    to set up to go higher, where a failure
    would have more significant repercussions.
  - Including
    - display of some whitespace characters,
    - colouring of delimiters,
    - visuals that assist with distinguish the buffer in use more.
- [[Intermediate modes and intermediate mode-specific settings]]
  - Additional modes and additional settings for modes installed above
    which are not vital, but important.
  - Including:
    - The majority of settings Org mode,
      in particular cosmetic settings
      and exportation settings.
    - Completion and snippets setup.
    - Undo assistants setup.
- [[Final cosmetics]]
  - Any cosmetic settings that didn't fit in above.
  - These should be truly “just for comfort” settings.
- [[Final modes and final mode-specific settings]]
  - Any modes that didn't fit in above.
  - In the future, this section may need to be broken up
    if the number of headings here becomes excessive.
- [[Session setup]]
  - Code to open my starting tabs and files,
    setting up the session for me.
- [[Cleanup]]
  - Any final tasks, including
    - checking that the actual init file has not been tampered with,
    - generating the README for the Emacs directory
      of my dotfiles repo automatically,
    - and as the last action, add a prompt before
      quitting Emacs; if we reach the end of this file,
      everything has gone well and we should be ready to start work,
      so we are unlikely to want to leave Emacs anytime soon.

* How to use this file

I don't like to export this file to the proper Emacs init file,
since that file may be modified by Emacs itself
or sometimes other programs.
(See below where we [[Set a “custom” file]], which should
 avoid most modifications on Emacs' end;
 I've still had external programs feel it's appropriate
 to edit the file without my explicit permission
 (the Agda installation process in particular).)
I like to keep that file a bit bare so I can catch any changes
made to it by entities other than myself.

So instead, I create a symbolic link to this file in ~~/.config/emacs/~,
then add to ~~/.config/emacs/init.el~
(see https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html
 for a discussion of the acceptable locations for the init file)
these lines:
#+name: dotemacs-expected-elisp
#+begin_src emacs-lisp :tangle /tmp/init.el
;; BEGIN my edits

;; Enable editing of version controlled files through symlinks.
;; Usual setting is to ask, which means asking each time my init is opened
;; since I use a symlink to it.
(setq vc-follow-symlinks t)

;; Delete the old tangled and compiled init file.
;; Shouldn't be necessary, but better safe than sorry.
(delete-file "~/.config/emacs/emacs-init.el")
(delete-file "~/.config/emacs/emacs-init.elc")

;; Load my init file.
(org-babel-load-file "~/.config/emacs/emacs-init.org")

;; END my edits
#+end_src

In [[Cleanup]] below, we check the contents of the proper Emacs init file
against the above contents,
to warn me if changes are made.
Hence why the above source block is tangled to ~/tmp/init.el~.

* Environment setup and package management

Before we really begin, we ensure environment settings are correct
and setup ~use-package~ as a package manager.

** Set a custom file

Emacs will, by default, insert all sorts of “custom” settings
into our actual init file
(~~/.emacs~, ~/.emacs.el~, ~./emacs.d/init.el~, or ~/.config/emacs/init.el~;
 see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html]])
especially those set via GUIs.

In order to avoid polluting that file, let's set it to use
a particular one. In fact, let's put it under my version control,
so I will be more able to notice changes to it.
#+begin_src emacs-lisp
(setq custom-file "~/dotfiles/emacs/custom.el")
(ignore-errors (load custom-file))
#+end_src

** Basic package management

~package~ gives us the basic tools to add packages from repositories
to Emacs.
#+begin_src emacs-lisp
(require 'package)
#+end_src

We will shortly setup a package manager to ease installation of packages.

** Set package repositories

By default, the only package repository is the ELPA repo.
See the list of packages contained therein [[http://elpa.gnu.org/packages/][here]].

Here we add the MELPA repo and the NonGNU repo,
then refresh to get the latest contents.
#+begin_src emacs-lisp
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/"))
(package-initialize)
(package-refresh-contents)
#+end_src

If needed, we can set ~package-archive-priorities~
to set the priority for these repositories.

Older versions of Org and the “Org+Contrib” package were hosted at
http://orgmode.org/elpa/,
but after Org 9.5, they are no longer distributed there.
Now Org is best available though GNU ELPA, and there is a new
“Org-Contrib” package available through NonGNU ELPA
(the + was dropped from the name).

** Setup use-package, a package management tool

The ~use-package~ package provides an easy-to-use interface
to install and customise packages.

I generally use it just to avoid having to ~package-install~ packages
whenever I migrate systems.
I haven't properly learned how to customise packages using it;
generally I just write my customisations as plain Elisp
after the ~use-package~ invocation to install them.
Where you see me use ~use-package~ to apply customisations,
I have probably copied someone else's initialisation.

Unless it's already installed, update the packages archives,
then install the most recent version of “use-package”.
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
#+end_src

I always want to download packages that aren't installed.
#+begin_src emacs-lisp
(setq use-package-always-ensure t)
#+end_src

** Update packages

For the moment, I use the ~auto-package-update~ to automatically update
packages for me.
#+begin_src emacs-lisp
(use-package auto-package-update
  :config
  ;; Delete residual old versions
  (setq auto-package-update-delete-old-versions t)
  ;; Do not bother me when updates have taken place.
  (setq auto-package-update-hide-results t)
  ;; Update installed packages at startup if there is an update pending.
  (auto-package-update-maybe))
#+end_src

** Make sure we have the right path

See https://github.com/purcell/exec-path-from-shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell)
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+end_src

** Add directories to the Emacs load path

Elisp files installed as part of a package
from an external package manager are, by convention,
installed under a relevant ~share~ directory.

Here we check if those install locations exist on the system,
and if so, add their subdirectories to the Emacs load path.

Rather than simply adding to ~load-path~, we recursively add
all subdirectories of the directory in question
using the ~normal-top-level-add-subdirs-to-loadpath~.
This function works out of the directory
pointed to by the ~default-directory~ variable;
so we rebind that locally before the call
(and make use of dynamic scoping).
See https://www.emacswiki.org/emacs/LoadPath.

The Debian package manager ~apt~ installs
to an ~emacs/site-lisp~ folder.
#+begin_src emacs-lisp
(let ((default-directory "/usr/local/share/emacs/site-lisp/"))
  (when (file-directory-p default-directory)
    (normal-top-level-add-subdirs-to-load-path)))
#+end_src

Guix and Nix both install Elisp under the ~share/emacs~ directories
within their profile folder.
I only use a single profile, so no need to hunt out the correct one.
#+begin_src emacs-lisp
(let ((default-directory "~/.guix-profile/share/emacs/"))
  (when (file-directory-p default-directory)
    (normal-top-level-add-subdirs-to-load-path)))

(let ((dir "~/.nix-profile/share/emacs/"))
  (when (file-directory-p dir)
    (normal-top-level-add-subdirs-to-load-path)))
#+end_src

** Load my personally developed packages

This directory is for Elisp packages I develop myself
or that I download without use of a package manager.
#+begin_src emacs-lisp
(setq my/developed-packages-dir "~/dotfiles/emacs/developed-packages")
#+end_src

As above, add recursively add all subdirectories of this directory
to the load path, so that git repositories can be added here.
#+begin_src emacs-lisp
(let ((default-directory my/developed-packages-dir))
  (normal-top-level-add-subdirs-to-load-path))
#+end_src

** Load non-package manager managed Elisp files

This directory is for Elisp files I develop myself
or that I download without use of a package manager.
#+begin_src emacs-lisp
(setq my/unmanaged-elisp-dir "~/dotfiles/emacs/elisp")
#+end_src

As above, add recursively add all subdirectories of this directory
to the load path, so that git repositories can be added here
as subtrees in this directory, and the ~.el~ files will be picked up.
But do also pick up Elisp files found at the top of the directory.
#+begin_src emacs-lisp
(let ((default-directory my/unmanaged-elisp-dir))
  (add-to-list 'load-path default-directory) ;; Load files at the top of the directory.
  (normal-top-level-add-subdirs-to-load-path))
#+end_src

*** Git subtrees

If the Elisp we are adding to this directory is managed in a Git repository,
but not in one of our package managers,
we can make use of Git subtrees to incorporate that repository
into this one.

Begin by adding the repository as follows (run this from the top level of this repository),
assuming you wish to import the ~main~ branch.
#+begin_example shell
git subtree add --prefix emacs/elisp/my-cool-elisp  https://github.com/cool-guy/my-cool-elisp.git main --squash
#+end_example
The ~--squash~ flag squashes the history of the imported repository.

You may then update the subtree when changes occur to the imported repository (~main~ branch).
#+begin_example shell
git subtree pull --prefix emacs/elisp/my-cool-elisp https://github.com/cool-guy/my-cool-elisp.git main --squash
#+end_example
Again, note the ~--squash~ flag.

You may also push any changes you make back to the imported repository.
Though unless you have forked the project, you may wish to push to branch other than ~main~.
#+begin_example shell
git subtree push --prefix unicode-sty https://github.com/armkeh/unicode-sty.git main
#+end_example

** Elisp utilities

These utility packages simplify many families of tasks.

~s~ is for ~s~-tring management.
#+begin_src emacs-lisp
(use-package s)
#+end_src

~f~ is for ~f~-ile management.
#+begin_src emacs-lisp
(use-package f)
#+end_src

** COMMENT SQLite support

The below may be necessary if Emacs was built without SQLite support.
If you see the below message, re-enable this
(and maybe consider making it check for support).

#+begin_quote
Warning (emacsql): Since your Emacs does not come with
built-in SQLite support [1], but does support C modules, the best
EmacSQL backend is provided by the third-party `sqlite3' package
[2].

Please install the `sqlite3' Elisp package using your preferred
Emacs package manager, and install the SQLite shared library
using your distribution's package manager.  That package should
be named something like `libsqlite3' [3] and NOT just `sqlite3'.
#+end_quote

#+begin_src emacs-lisp
(use-package sqlite3)
#+end_src

* Custom Elisp

Some of this code may be moved to separate files later,
but it's small and collected here for now.

** Generate my dotfiles README file

I want my README file for this directory
to be automatically kept up to date when changes are made.

First, a template for the README is tangled from here.
Note that this by itself is not sufficient to act as the final README;
the ~include~ command will not be honoured by GitHub's Org rendering.
So this file is just an inbetween to allow us to export
the final version of the ~README.org~ file.
#+begin_src org :tangle ~/dotfiles/emacs/private/README-intermediate.org
#+Options: toc:nil tags:t timestamp:nil
#+Export_file_name: README.org

# This file is tangled from emacs-init.org,
# and should not be modified directly.

This directory contains the files that make up my Emacs setup.

Below are the contents of my literate Emacs initialisation file.

See also my
- [[./yankpad.org][Yankpad snippets file]]
  - (Frequently used text expansions.)

,* Table of contents  :TOC_2:

,* The contents       :ignore:

#+include: ~/dotfiles/emacs/emacs-init.org
#+end_src

Now, we define a function to automatically export the intermediate file to the final one.
#+begin_src emacs-lisp :results none
(defun my/dotfiles-readme-generate ()
  "Automatically construct and tangle my Emacs init git README file"
  (interactive)
  (message (concat "Generating Emacs init git README file"))
  (let* ((readme-directory "~/dotfiles/emacs/")
         (readme-template-filepath (concat readme-directory "private/README-intermediate.org"))
         (readme-temporary-filepath (concat readme-directory "README.temp.org"))
         (readme-final-filepath (concat readme-directory "README.org")))
    (with-temp-buffer
      (cd readme-directory) ;; Must move to directory to export into
      (insert-file-contents readme-template-filepath) ;; Copy in the template
      (delete-file readme-final-filepath) ;; Delete existing README (if it exists)
      (let ((inhibit-message t)) ;; Don't put messages in the minibuffer during this
        (org-org-export-to-org)) ;; Export to the final README file
        (with-temp-buffer
          ;; Visit the generated file, and place a warning not to edit the file.
          (find-file readme-final-filepath)
          (beginning-of-buffer)
          (insert "# This file is automatically generated by emacs-init.org.\n")
          (insert "# This file should not be modified directly.\n\n")
          (save-buffer)
          (kill-buffer))))
  (message "Generated Emacs init git README file"))
#+end_src

** Toggle themes

These functions allow me to clear and toggle my themes.
#+begin_src emacs-lisp
(defun disable-all-custom-themes ()
  "Disable all custom themes.
   Returns the previous highest precendence theme
   (nil if no themes were previously enabled).

   Implementation:
     Gets the highest precedence applied theme as the first element
     of custom-enabled-themes.

     Then iteratively disables all the themes in custom-enabled-themes.
  "
  (let ((most-recent-theme (car custom-enabled-themes)))
    (while (car custom-enabled-themes)
      (disable-theme (car custom-enabled-themes)))
    most-recent-theme))

(defun toggle-my-themes ()
  "Disable all custom, then try to toggle the themes
   my-dark-theme and my-light-theme, in that if one was
   the last applied theme, the other will be applied.

   If neither was the last applied theme, my-dark-theme
   will be applied as a default.
  "

  (let ((most-recent-theme (disable-all-custom-themes)))
    (if (eq most-recent-theme my/dark-theme)
        (load-theme my/light-theme t)
        (load-theme my/dark-theme t))))
#+end_src

** Theme change hook

[[https://www.reddit.com/r/emacs/comments/4v7tcj/][Apparently]],
there is no hook in Emacs for when a theme change occurs.
This code snippet, taken from the linked reddit post, defines one I can use.
#+begin_src emacs-lisp
(defvar after-load-theme-hook nil
  "Hook run after a color theme is loaded using `load-theme'.")
(defadvice load-theme (after run-after-load-theme-hook activate)
  "Run `after-load-theme-hook'."
  (run-hooks 'after-load-theme-hook))
#+end_src

** Cascading window setup

I set up my default desktop using a “cascading pattern”,
moving from larger windows in the upper right to
smaller windows in the lower left.

This works best with 2 or 3 windows, but it can be used for more.

The process is:
- If there are two or more files left to open:
  - Create a new window to the left.
  - Open the next file.
  - Move the focus to the left.
  - If there are two or more files left to open:
    - Create a new window below.
    - Open the next file.
    - Move focus down.
- Else if there is one file left to open,
  open it.
- Else, quit.
#+begin_src emacs-lisp
(defun cascading-find-files (files)
  "Opens a set of files in a cascading series of windows,
created by splitting the current window.
The windows begin in the upper right, with the first file,
and move left and then down, each window being half the size
of the previous (as long as this is possible)."
  (while files ;; there's at least one file to open
    (find-file (car files))
    (setq files (cdr files))
    (when files ;; there are two or more files
      (split-window nil nil 'left)
      (other-window 1)
      (find-file (car files)) ;; open second file on the left
      (setq files  (cdr files))
      (when files ;; there are still more files, so split horizontally
        (split-window nil nil 'below)
        (other-window 1)))))
#+end_src

:TODO: Create a alternate method for vertical screens, preferably also allowing on-the-fly switching between the two setups.

** Git repo window setup

I commonly set up my window to have the magit status buffer open on the right
and the file I am actively working on on the left.
This can easily be accomplished interactively by simply starting up magit.

But if I am setting up a number of tabs at once
(for instance if I have to work on a number of deployment repositories simultaneously
 or in quick succession),
I can use this convenience function to programmatically set up this layout.
#+begin_src emacs-lisp
(defun create-git-repo-tab (repo-path tab-name)
  "Given `repo-path` is a path to a Git repository, create a new tab named `tab-name`
   with a split frame between the top level of that Git repository and a magit window for it."
  (tab-new)
  (tab-rename tab-name)
  (find-file repo-path)
  (split-window nil nil 'right)
  (magit))
#+end_src

** Killing a buffer when its associated process finishes

When starting an asynchronous process using ~async-shell-command~,
a buffer is created and brought into focus in another window
to show the output of the command.

We can use ~start-process~ or other functions to start
asynchronous processes without bringing into display,
if that's desired. Instead of that though,
I often want to see the output,
but don't want the buffer to remain once the process
has finished.

This function can be assigned to a sentinel for a process
to kill its associated buffer when the process finishes.
#+begin_src emacs-lisp
(defun kill-buffer-and-its-windows-on-process-finish (process signal)
  (when (memq (process-status process) '(exit signal))
    (kill-buffer-and-its-windows (process-buffer process))
    (shell-command-sentinel process signal)))
#+end_src

This depends upon
#+begin_src emacs-lisp
(defun kill-buffer-and-its-windows (buffer &optional msgp)
  "Kill BUFFER and delete its windows.  Default is `current-buffer'.
BUFFER may be either a buffer or its name (a string)."
  (interactive (list (read-buffer "Kill buffer: " (current-buffer) 'existing) 'MSGP))
  (setq buffer  (get-buffer buffer))
  (if (buffer-live-p buffer)            ; Kill live buffer only.
      (let ((wins  (get-buffer-window-list buffer nil t))) ; On all frames.
        (when (and (buffer-modified-p buffer)
                   (fboundp '1on1-flash-ding-minibuffer-frame))
          (1on1-flash-ding-minibuffer-frame t)) ; Defined in `oneonone.el'.
        (when (kill-buffer buffer)      ; Only delete windows if buffer killed.
          (dolist (win  wins)           ; (User might keep buffer if modified.)
            (when (window-live-p win)
              ;; Ignore error, in particular,
              ;; "Attempt to delete the sole visible or iconified frame".
              (condition-case nil (delete-window win) (error nil))))))
    (when msgp (error "Cannot kill buffer.  Not a live buffer: `%s'" buffer))))
#+end_src
from Emacs wiki's [[https://www.emacswiki.org/emacs/download/misc-cmds.el][misc commands]].
:TODO: Check out more of those commands; some may be useful.

** Add timestamps to messages

This utility function, which is useful for adding timestamps to the message buffer,
is taken from the Emacs StackExchange: https://emacs.stackexchange.com/a/38511
#+begin_src emacs-lisp
(defun my/timestamp-message (FORMAT-STRING &rest args)
  "Advice to run before `message' that prepends a timestamp to each message.
Activate this advice with:
  (advice-add 'message :before 'my/ad-timestamp-message)
Deactivate this advice with:
  (advice-remove 'message 'my/ad-timestamp-message)"
  (if message-log-max
      (let ((deactivate-mark nil)
            (inhibit-read-only t))
        (with-current-buffer "*Messages*"
          (goto-char (point-max))
          (if (not (bolp))
              (newline))
          (insert (format-time-string "[%F %T.%3N] "))))))

(advice-add 'message :before 'my/timestamp-message)
#+end_src

* Simple cosmetics

** Disable the splashscreen and open this file :basic:simplify:

This way, if something goes wrong below, I am positioned to fix it
right away.
#+begin_src emacs-lisp
(setq inhibit-splash-screen t)
(setq my/emacs-init-file "~/.config/emacs/emacs-init.org")
(find-file my/emacs-init-file)
#+end_src
This file will be closed and re-opened below, to ensure
all cosmetic changes show correctly.

** Disable unnecessary interface elements      :basic:simplify:

I don't use the menubar, toolbar (icons usually below the menu),
or scroll bars.
#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Fonts                                       :font:

:TODO: Check if these fonts are installed on the system first, so we don't end up with unknown font settings.

I currently use the [[https://github.com/be5invis/Iosevka][Iosevka]] family of fonts,
because of their efficient saving of horizontal space.
Set it as the default font and the fixed-pitch font.
Again, for space saving, I like a relatively small font;
100 seems to be a sweet spot with this font;
smaller makes some unicode characters hard to see.
#+begin_src emacs-lisp
(set-face-attribute 'default nil :family "Iosevka" :height 100)
(set-face-attribute 'fixed-pitch nil :family "Iosevka")
#+end_src
Notice that for the default font, we specify an explicit height;
the heights for other fonts are relative to this.
(So if their heights were to be specified, it should be as a multiplier,
 e.g. ~:height 1.5~.)

I also install the Google Noto fonts which have better unicode coverage.
But I find that the characters come out to large,
causing extra space between lines. So scale down the Noto faces.
#+begin_src emacs-lisp
(add-to-list
  'face-font-rescale-alist
  '(".*Noto.*" . 0.8))
#+end_src

Symbola is also a great font to install for coverage,
but the license situation for it is a bit tricky.
I can install it using ~apt~, but it's not available using Guix;
so I've moved away from using it.

I've also found I need to explicitly set some “fallback” fonts.
In particular, for symbols such as Emoji.
#+begin_src emacs-lisp
(set-fontset-font t 'symbol "Noto Color Emoji" nil 'append)
#+end_src

** Line and column information                 :line:

*** Line numbers

As of Emacs 26, ~display-line-numbers-mode~ is the “proper”
way to display line numbers next to a buffer.
(Before 26, ~linum-mode~ was the usual method.)
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'display-line-numbers-mode)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src
Line numbers are distruptive in some other modes,
hence why set them to show only in ~text-mode~ and ~prog-mode~ above.
To enable them globally, one would use ~global-display-line-numbers-mode~.

I find it concerning when the width of the column
used for line numbers grows throughout the document;
it makes me think Org mode headlines further down are nested.
Setting ~display-line-numbers-width-start~ causes the system
to count the number of lines when opening a buffer, and
set the minimum width necessary to display all line numbers.
It wastes some screen space, but is good for my sanity.
#+begin_src emacs-lisp
(setq display-line-numbers-width-start t)
#+end_src

*** Display the column number as well as the line number

Toggle on display of the current column number,
alongside the line number, on the modeline.
#+begin_src emacs-lisp
(column-number-mode)
#+end_src

*** Fill column display

Traditionally, it's good style to keep lines under 80 characters wide.
I follow this tradition (though recently some argue the amount should be increased).

The (as of Emacs 27) built in ~display-fill-column-indicator-mode~ puts a ruler,
by default at 70 characters.
#+begin_src emacs-lisp
(global-display-fill-column-indicator-mode t)
#+end_src

Note that with ~org-indent-mode~, the ruler will be off
by the length of the indentation (i.e. it will be
at line 68 if indented 2 characters, 66 if indented 4, etc).
That's okay; the ruler is there as a reminder more than a firm guideline.

Prior to Emacs 27, ~fci-mode~ could be used for this purpose,
but I found it to cause noticable lag.
Using ~whitespace-mode~ to highlight lines exceeding a certain number
of characters was my preferred approach at that time.

** Themes                                      :theme:

I use Protesilaos Stavrou's [[https://protesilaos.com/modus-themes/][Modus themes]], which
“[conform] with the highest standard for colour contrast
 between background and foreground values”.
Prior to this I used the ~vibrant~ and ~nord-light~ themes
from [[https://github.com/hlissner/emacs-doom-themes][doom-themes]], but the Modus don't leave me desiring any other themes.
#+begin_src emacs-lisp
(use-package modus-themes)
#+end_src

By default, I prefer the dark ~modus-vivendi~,
but like to toggle between it and the light ~modus-operandi~ at need.
#+begin_src emacs-lisp
(setq my/dark-theme 'modus-vivendi)
(setq my/light-theme 'modus-operandi)

(load-theme my/dark-theme t)
#+end_src

The ~modus-themes-region~ setting
changes the highlighting of selected text.
By default, the background of the selection is gray,
and all text is given the a neutral foreground colour.
Instead, let's use just a tinted background,
and leave the foreground colours as they are.
#+begin_src emacs-lisp
(setq modus-themes-region 'bg-only)
#+end_src

** Highlight matching delimiters               :delimiter:theme:

It's useful to highlight the matching delimiter when the cursor
is on its match, especially when coding in Lisps.
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

The Modus themes give various settings for highlighting the match;
the ~intense~ option applies a saturated background colour,
and ~intense-bold~ is the same but it also applies the bold face.
#+begin_src emacs-lisp
(setq modus-themes-paren-match 'intense-bold)
#+end_src

This older code achieved a similar effect by making the background
of the matching delimiter black and the foreground white
(which stood out against my usually rainbow coloured delimiters).
#+begin_example emacs-lisp
(custom-theme-set-faces
 'user
 '(show-paren-match ((t (:foreground "white"
                         :background "black"
                         :weight ultra-bold)))))
#+end_example

** Tweak window splitting                      :window:

Emacs has several facilities for splitting windows,
including commands for splitting
- vertically (~C-x 2~),
- horizontally (~C-x 3~), and
- sensibly (not interactive).

(For the uninitiated, a /window/ in Emacs is not the same as
 the OS window. Each OS window is a /frame/, and each pane within
 a frame is called a /window/. Emacs predates modern terminology.)

I generally prefer a side-by-side setup for my windows,
particularly when working from a desk with a wide or ultra-wide monitor.
But I don't like Emacs to make more than two columns (windows side-by-side).
So I have created a package, https://github.com/armkeh/consistent-window-splits,
to enforce that behaviour.
#+begin_src emacs-lisp
(require 'consistent-window-splits)
(consistent-window-splits-automatically-optimize)
#+end_src

Also, disable vertical splits.
#+begin_src emacs-lisp
(consistent-window-splits-prevent-vertical-splits)
#+end_src

** Rotate windows

Sometimes you find yourself with a less-than-ideal window layout,
particularly when Emacs has split the window for you several times.
While it's always possible to close all but one window,
manually set up the splits, and the re-visit the correct buffers,
this is tedious and gets you out of your flow.

The package [[https://github.com/daichirata/emacs-rotate][rotate]] aims
to automate that work in a similar way to the rotation behaviour in ~tmux~.
#+begin_src emacs-lisp
(use-package rotate)
#+end_src

** Kill the open init buffer and reopen it     :cleanup:

To ensure all these cosmetic changes are picked up,
kill my init buffer that we opened earlier and reopen it.
#+begin_src emacs-lisp
(kill-buffer "emacs-init.org")
(find-file my/emacs-init-file)
#+end_src

* Vital non-mode-specific settings

** User information                            :basic:

#+begin_src emacs-lisp
(setq user-full-name "Mark Armstrong")
(setq user-mail-address "markparmstrong@gmail.com")
#+end_src

** Automatically revert unchanged files which change on the disk :vc:

Ideally this helps us avoid conflicts, in case I edit open files elsewhere.
Note reverting will not take place if there are unsaved changes,
so this is relatively safe.
#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

I do use automatic syncing tools and sometimes work on other systems;
conflicts can still happen if one system is offline or the syncing
gets behind some other way, but with automatic reverts
it's less likely I trip over my own changes.

** Organise automatic backups                  :vc:

(These settings form the basis for
 a crude form of offline version control
 for [[Walking through undo history; undo-propose][undo-propose]]
 and [[Walking through backups; backup-walker][backup-walker]]
 which provide utilities to make use of undos and backups
 as version control.)

Emacs, by default, creates an automatic backup of
the contents of a file before each editing session for the file
See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html][the manual]]
for all of the details of how and when this is done.

By default, the backup file is placed in the same directory,
and tagged as a backup by appending ~~~ to its name.
This creates a fair bit of clutter;
we can set a location to store all backups to avoid that.
#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/emacs-backups")))
#+end_src

We can use these backups as a crude form of offline version control.
We ask Emacs to number them by setting ~version-control~,
and also to limit the amount of history through ~kept-old-versions~.
Setting ~delete-old-versions~ prevents asking for confirmation
before deleting the excess versions.
#+begin_src emacs-lisp
(setq version-control t)
(setq kept-old-versions 50)
(setq delete-old-versions t)
#+end_src

Do backup files even if they are covered by version control;
we still want this local crude version control
as an added history.
#+begin_src emacs-lisp
(setq vc-make-backup-files t)
#+end_src

As we said above, by default, Emacs makes a new backup
for each editing session on the file.
But since I leave Emacs open almost perpetually,
that can be quite infrequent.
This snippet from
[[https://github.com/alhassy/emacs.d#automatic-backups][Musa Alhassy's init]]
“tricks” Emacs into making a backup each time we save.
#+begin_src emacs-lisp
(defun my/force-backup-of-buffer ()
  "Lie to Emacs, telling it the curent buffer has yet to be backed up."
  (setq buffer-backed-up nil))

(add-hook 'before-save-hook  'my/force-backup-of-buffer)
#+end_src

** Set what characters qualify as delimiters   :delimiter:

*** Angle brackets are not delimiters to me

First, don't treat angle brackets as delimiters; even when writing
HTML or XML, I don't want them to qualify as delimiters for
the purpose of ~show-paren-mode~, ~check-paren~ and ~rainbow-delimiters~.
Treat them as symbols instead (this is the meaning of ~_~ in the
syntax table).
#+begin_src emacs-lisp
(defun my/<>-symbol-syntax ()
  (modify-syntax-entry ?> "_")
  (modify-syntax-entry ?< "_"))
#+end_src

~modify-syntax-table~ works on the current buffer
(unless given a buffer as optional argument)
and so we need to apply those modifications in each buffer.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'my/<>-symbol-syntax)
(add-hook 'prog-mode-hook 'my/<>-symbol-syntax)
(add-hook 'text-mode-hook 'my/<>-symbol-syntax)
#+end_src

The ~org-mode~ function modifies the entries when run,
and ~yankpad~ runs it regularly (albeit in a temporary buffer,
but the modification “leaks”), so we need to undo those
modifications.
#+begin_src emacs-lisp
(defadvice org-mode (after override-<>-syntax activate)
  (my/<>-symbol-syntax))
#+end_src

Side note: I'm honestly uncertain if the “leaking” of
the syntax entry modifications from temporary buffers is a bug.
It's likely just unintuitive behaviour.
It can be observed easily; just modify the entry for i.e. ~<~,
# matching >, just in case
and evaluate
#+begin_example emacs-lisp
(with-temp-buffer
  (org-mode))
#+end_example
and observe your modifications are undone.

*** These unicode characters are delimiters

Do treat these unicode symbols as delimiters.
The first character in each entry means either
- “open delimiter”, if it's a ~(~, or
- “close delimiter”, if it's a ~)~.
The second symbol designates the matching delimiter.
#+begin_src emacs-lisp
(defun my/unicode-delimiter-syntax ()
  (modify-syntax-entry (string-to-char "⟨") "(⟩")
  (modify-syntax-entry (string-to-char "⟩") ")⟨")
  (modify-syntax-entry (string-to-char "⟪") "(⟫")
  (modify-syntax-entry (string-to-char "⟫") ")⟪")
  (modify-syntax-entry (string-to-char "⟦") "(⟧")
  (modify-syntax-entry (string-to-char "⟧") ")⟦")
  (modify-syntax-entry (string-to-char "⁅") "(⁆")
  (modify-syntax-entry (string-to-char "⁆") ")⁅")
  (modify-syntax-entry (string-to-char "｛") "(｝")
  (modify-syntax-entry (string-to-char "｝") ")｛")
  (modify-syntax-entry (string-to-char "“") "(”")
  (modify-syntax-entry (string-to-char "”") ")“"))
#+end_src

Apply those syntax entry modifications.
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'my/unicode-delimiter-syntax)
(add-hook 'text-mode-hook 'my/unicode-delimiter-syntax)
#+end_src

** Set the tab width                           :space:

I usually use spaces instead of tabs,
but when I do see tabs, I want them to be narrow.
Indentation should not take up large amounts of the screen.
#+begin_src emacs-lisp
(setq-default tab-width 2)
#+end_src

** (Almost) always use spaces instead of tabs  :space:

Many modes check this variable to decide whether to insert
spaces or tabs when pressing the tab key to indent.
I prefer spaces, so set it to ~nil~ so tabs aren't used.
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

Not all modes use this setting; in particular, I've noticed
Go mode does not. But that's appropriate, as the
(strongly recommended) Go formatting style uses tabs.

Notice (elsewhere) the variable ~org-src-tab-acts-natively~;
if this is set to non-nil, then tabs inside ~src~ blocks
will act according to the behaviour of the appropriate mode,
even though Org in general seems to use spacing for indenting
(regardless of the setting of ~indent-tabs-mode~.

** Turn off electric indent mode               :space:

I don't use this or appreciate its interference.
#+begin_src emacs-lisp
(electric-indent-mode -1)
#+end_src

* Vital modes and vital mode-specific settings

** COMMENT Evil (e-vi-l) mode

I intermittently try to make use of evil mode,
which promises to increase productivity through modal vi-inspired modes,
if one can be thoughtful about ones editing process.

One bit of pre-setup; I don't want evil-mode to override
the behaviour of ~<tab>~ (which is shared with ~C-i~)
during normal (evil) state, as this prevents
cycling of Org section visibilities in normal mode.
#+begin_src emacs-lisp
(setq evil-want-C-i-jump nil)
#+end_src

Install and activate evil.
#+begin_src emacs-lisp
(use-package evil)
(evil-mode 1)
#+end_src

** Org mode                                    :org:

*** Preamble

I use Org for almost everything, and utilise many
of the extras included in ~org-contrib~ (previously ~org-plus-contrib~).
#+begin_src emacs-lisp
(use-package org
  :ensure org-contrib
  :config
  (require 'ox-extra))
#+end_src

*** Literate programming

**** Execution

By default, Emacs will query whether we /actually/ want to
execute code when we evaluate a code block. Also, it seems to
just /not/ execute code marked for execution during export
in an ~org~ file. I want both of these functionalites,
so I remove the safety.
#+Name: evaluate-no-confirm
#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src

By default only emacs lisp can be evaluated.
Documentation [[https://orgmode.org/manual/Languages.html][here]].
I activate a few other languages here, and then more
in the [[Programming language modes and mode-specific settings]] section.
:TODO: Move other languages to that section.
#+Name: evaluate-languages
#+begin_src emacs-lisp
(require 'ob-shell)
(require 'ob-haskell)
(require 'ob-latex)
(require 'ob-C)
(require 'ob-java)
(require 'ob-ruby)
(require 'ob-plantuml)
(require 'ob-R)
(require 'ob-dot)
(require 'ob-sql)
(require 'ob-python)
(require 'ob-js)
(require 'ob-typescript)
#+end_src

For shell code, we need to initialise via this function.
See [[https://emacs.stackexchange.com/questions/37692/how-to-fix-symbols-function-definition-is-void-org-babel-get-header][here]].
#+Name: evaluate-shell-init
#+begin_src emacs-lisp
(org-babel-shell-initialize)
#+end_src

PlantUML requires we set the path to the ~.jar~ file.
#+Name: evaluate-plantuml-path
#+begin_src emacs-lisp
(setq org-plantuml-jar-path "/usr/share/java/plantuml.jar")
#+end_src

~ob-typescript~ is [[https://github.com/lurdan/ob-typescript][available]].
#+begin_src emacs-lisp
(use-package ob-typescript)
#+end_src

**** Editing source code

When I choose to edit a source block in a separate buffer,
that source block becomes my main focus.
So, open a new frame (OS window) in which to edit.
Then I can open other material, help buffers, etc.,
without disturbing the window setup around my Org window.
When I finish editing, that frame is killed.
#+begin_src emacs-lisp
(setq org-src-window-setup 'other-frame)
#+end_src
Note, I didn't think I would like the ~other-frame~ option
at all at first, but it grew on me when I realised
it was the best way to ensure that editing source blocks in
a separate buffer would not mess up my window layout
—which ~other-window~ fails to do—
give me the option at least to keep the Org buffer visible
—which ~current-window~ of course disables—
and give me enough room for the source buffer
—which ~split-window-below~ and ~split-window-right~ fail to do
on small screens.

When we open a new window to edit source blocks
the major mode of that window is determined by
the setting for the language in ~org-src-lang-modes~.
Override the setting in that attribute list if you wish to
change the major mode for a particular language.

It's convenient to have ~<tab>~ act as it would in the source language
when editing code blocks in the Org buffer.
#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t)
#+end_src

:TODO:
#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
#+end_src

*** Reveal hidden elements if they are edited

Folding a document raises the possibility of accidentally editing
hidden portions. Org provides a way to defend against this:
On making an “invisible” edit, the hidden portion will be unfolded
so the edit can be seen.
#+begin_src emacs-lisp
(setq org-catch-invisible-edits 'show)
#+end_src

** vterm                                       :programming:

~vterm~ is a great terminal editor for when I want to use a terminal
from within Emacs. I previously used [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][Eshell]], and may again
(or may consider [[https://elpa.nongnu.org/nongnu/eat.html][eat]], “Emulate A Terminal”)
if I find a need for using more Elisp around terminal inputs/outputs.

From it's documentation:
#+begin_quote
Emacs-libvterm (vterm) is fully-fledged terminal emulator based on an
external library (libvterm) loaded as a dynamic module.  As a result of using
compiled code (instead of elisp), emacs-libvterm is fully capable, fast, and
it can seamlessly handle large outputs.
#+end_quote

#+begin_src emacs-lisp
(use-package vterm)
#+end_src

Generally, invoking ~(vterm)~ will create the buffer ~*vterm*~,
or switch to it if it already exists.
Additional ~vterm~ instances can be created by prepending the universal argument (~C-u~)
to create new instances instead of switching to an existing one.
However, I find I usually want a unique instance/buffer per (tab-bar) tab,
so I define a shortcut to create or switch to a ~vterm~ buffer based on the current tab name.
#+begin_src emacs-lisp
(defun vterm-tab-aware ()
  (interactive)
  (letrec ((current-tab-info (tab-bar-get-buffer-tab (buffer-name)))
           (current-tab-name (cdr (assoc 'name current-tab-info)))
           (current-tab-vterm-buffer-name (format "*vterm - %s*" current-tab-name))
           (current-tab-vterm-buffer (get-buffer current-tab-vterm-buffer-name)))
    (if current-tab-vterm-buffer ;; vterm buffer already exists
        (pop-to-buffer current-tab-vterm-buffer-name)
      (vterm current-tab-vterm-buffer-name))))
#+end_src

** COMMENT Eshell                              :programming:

The Eshell is a wonderful shell-like command interpreter inside of Emacs.
I find it's not appropriate for intensive command line tasks,
but it's nice not to have to leave Emacs for simple tasks.
(Note there are alternatives for this purpose, including
 popping up an external shell inside of Emacs.)
#+begin_src emacs-lisp
(use-package eshell)
#+end_src

Jeremias Queiroz posted a “fancy eshell prompt” setup on [[https://www.reddit.com/r/emacs/comments/6f0rkz/my_fancy_eshell_prompt/][Reddit]],
from which I derived this setup, but I've modified it to use
builtin face colours to improve portability across themes.
For instance, the ~default~ colour will most likely be white
for dark themes and black for light themes.
#+begin_src emacs-lisp
(setq eshell-prompt-function
  (lambda ()
    (let ((default  (face-attribute 'default :foreground))
          (green    (face-attribute 'success :foreground))
          (red      (face-attribute 'error   :foreground))
          (blue     (face-attribute 'link    :foreground))
          (yellow   (face-attribute 'warning :foreground)))
    (concat
    (propertize "┌—["                 'face  `(:foreground ,green))
    (propertize (user-login-name)     'face  `(:foreground ,red))
    (propertize "@"                   'face  `(:foreground ,blue))
    (propertize (system-name)         'face  `(:foreground ,red))
    (propertize "]──["                'face  `(:foreground ,green))
    (propertize (format-time-string "%a %b %d" (current-time)) 'face `(:foreground ,yellow))
    (propertize "]──["                'face `(:foreground ,green))
    (propertize (format-time-string "%H:%M" (current-time)) 'face `(:foreground ,yellow))
    (propertize "]\n"                 'face `(:foreground ,green))
    (propertize "│ "                  'face `(:foreground ,green))
    (propertize (concat (eshell/pwd)) 'face `(:foreground ,blue))
    (propertize "\n"                  'face `(:foreground ,green))
    (propertize "└─►"                 'face `(:foreground ,green))
    (propertize (if (= (user-uid) 0) " # " " $ ") 'face `(:foreground ,default))))))
#+end_src

** Sending email                               :mail:

Only execute this setup if we have ~mu~ installed;
otherwise, I am presumably using a machine
where I don't have email features set up.
#+begin_src emacs-lisp
(when (executable-find "mu") ;; Begin mu exists conditional
#+end_src

:TODO: Check for cleanup of send-mail settings.

#+begin_src emacs-lisp
  (setq mail-user-agent 'mu4e-user-agent)
#+end_src

Whether or not you use Emacs to read your email,
you can use it to send emails with the builtin ~send-mail~.
It can be configured to use your OS default for sending email
(for instance, through a mail program or browser),
or configured to send mail itself (for instance via SMTP).
For convenience, I choose the latter.

I use Gmail exclusively, so the setup is small.
#+begin_src emacs-lisp
  (require 'smtpmail)

  (setq message-send-mail-function 'smtpmail-send-it
     starttls-use-gnutls t
     smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
     smtpmail-auth-credentials
       '(("smtp.gmail.com" 587 "markparmstrong@gmail.com" nil))
     smtpmail-default-smtp-server "smtp.gmail.com"
     smtpmail-smtp-server "smtp.gmail.com"
     smtpmail-smtp-service 587)
#+end_src

#+begin_src emacs-lisp
  (require 'auth-source)
  (setq auth-sources '((:source "~/.authinfo.gpg")))
#+end_src

If needed, we can create a queue to allow for sending of email
while offline. See
[[https://www.gnu.org/software/emacs/manual/html_node/smtpmail/Queued-delivery.html][the documentation]].
#+begin_src emacs-lisp
  ;;(setq smtpmail-queue-mail nil)
#+end_src

After sending an email, kill the buffer.
#+begin_src emacs-lisp
  (setq message-kill-buffer-on-exit t)
#+end_src

At the start of this section, we checked if the ~mu~ command
was installed; close out that conditional now.
#+begin_src emacs-lisp
) ;; End mu exists conditional
#+end_src

** Reading email: with mu4e and isync          :mail:

Only execute this setup if we have ~mu~ installed;
otherwise, I am presumably using a machine
where I don't have email features set up.
#+begin_src emacs-lisp
(when (executable-find "mu") ;; Begin mu exists conditional
#+end_src

:TODO: Check for cleanup of mu4e settings.

Using Emacs as an email client provides us with powerful text editing
while composing email.

I initially followed the guide
[[https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/][from this reddit post]]
to set it up, but I've customised things heavily at this point.

#+begin_src emacs-lisp
  (require 'mu4e)
#+end_src

Run ~mu~ in debug mode, so if something fails we get more information.
#+begin_src emacs-lisp
  (setq mu4e-mu-debug t)
#+end_src

*** Basic setup

**** The mail directories

~mu4e~ needs to know where my mail directory lives,
and the paths of certain important mailboxes relative to that.
Note that there should be an archive box here, but I don't make
use of an archive mailbox.
#+begin_src emacs-lisp
  (setq
    mu4e-drafts-folder "/Drafts"
    mu4e-sent-folder   "/Sent Mail"
    mu4e-trash-folder  "/Trash")
#+end_src

Previously I would set ~mu4e-maildir~ here;
that is no longer a variable in new versions of ~mu4e~.
Instead the mail directory is taken from ~mu~;
set it with with, e.g., ~mu init --maildir=~/.mail/gmail~.
(Note: it may also be necessary to set the ~--my-address~ flag;
 I'm not certain.)
You can check the setting with
#+begin_example emacs-lisp
  (mu4e-root-maildir)
#+end_example

**** Get mail command

I use isync (whose executable is called ~mbsync~) to manage
my local mail directory.

I have two groups set up in my ~mbsyncrc~; one smaller group
of my most important Gmail labels
which synchronises with the remote quickly,
and a larger group of the remaining labels which takes
a fair chunk of time to synchronise.
The ~mu4e~ get mail command uses the former, to ensure
it does not take an excessive amount of time when I manually run it.
#+begin_src emacs-lisp
  (setq
    mu4e-get-mail-command "mbsync gmail-quick"
    mu4e-update-interval 300 ;; 5 minutes
    mu4e-headers-auto-update t)
#+end_src

**** Index quietly

Don't take over the minibuffer with a status notification
when indexing messages.
If something's going wrong, flip this setting
as a first step in the diagnosis.
#+begin_src emacs-lisp
  (setq mu4e-hide-index-messages t)
#+end_src

**** Change file names when moving emails

To work nicely with ~mbsync~, we should
change the file name when moving mail between mail directories;
otherwise the UID portion of the name becomes stale
and possibly causes issues such as duplicate UIDs
or UIDs out of range.
#+begin_src emacs-lisp
  (setq mu4e-change-filenames-when-moving t)
#+end_src

*** Viewing emails

**** Email list

This controls the information shown in the email lists.
- ~:human-date~ will show the time if the email was sent today
  (the alternative, ~:date~, would not).
- ~:from-or-to~ is a special field that will show the sender if it was not me;
  otherwise it will show the recipient.
#+begin_src emacs-lisp
  (setq mu4e-headers-fields
    '((:date       . 22)
      (:flags      . 6)
      (:from-or-to . 22)
      (:subject    . nil)))
#+end_src

#+begin_src emacs-lisp
  (setq mu4e-headers-date-format "%d %b/%y, %a, %R")
#+end_src

Don't organise by threads; I find organising by date preferable.
#+begin_src emacs-lisp
  (setq mu4e-headers-show-threads nil)
#+end_src
This can be toggled with ~P~ in the email list.

By default, related mail is also included; for instance,
if I reply to a message in a list, the reply will show up in the list.
I find this unintuitive, especially since I don't organise by threads.
#+begin_src emacs-lisp
  (setq mu4e-headers-include-related nil)
#+end_src

Use fancy characters, including unicode,
for the flags and marks in the email list.
#+begin_src emacs-lisp
  (setq mu4e-use-fancy-chars t)
#+end_src

Let's set the symbols used for the above ourselves.
This list originated from a
[[https://github.com/djcb/mu/issues/733][GitHub issue discussion]].
#+begin_src emacs-lisp
  (setq
    mu4e-headers-draft-mark     '("D" . "📝 ") ;; ✒ ✏
    mu4e-headers-flagged-mark   '("F" . "🏴 ")
    mu4e-headers-new-mark       '("N" . "★ ")
    mu4e-headers-passed-mark    '("P" . "→ ") ;; ↪
    mu4e-headers-replied-mark   '("R" . "← ")
    mu4e-headers-seen-mark      '("S" . "") ;; ✓ 🗸 ✔
    mu4e-headers-trashed-mark   '("T" . "✗ ") ;; 🗑
    mu4e-headers-attach-mark    '("a" . "📎 ")
    mu4e-headers-encrypted-mark '("x" . "🔐 ")
    mu4e-headers-signed-mark    '("s" . "🔏 ")
    mu4e-headers-unread-mark    '("u" . "✉ ")
    mu4e-modeline-all-clear     '("No mail " . "No mail ")
    mu4e-modeline-all-read      '("No unread mail " . "No unread mail ")
    mu4e-modeline-unread-items  '("Unread mail " . "Unread mail ")
    mu4e-modeline-new-items     '("New mail " . "New mail ")
    ;; TODO: maybe reenable these search symbols if I adopt more complicated email flow
    mu4e-search-threaded-label        '("" . "")
    mu4e-search-full-label            '("" . "")
    mu4e-search-related-label         '("" . "")
    mu4e-search-skip-duplicates-label '("" . "")
    mu4e-search-hide-label            '("" . ""))
#+end_src

Test out the above with this command
#+begin_src emacs-lisp :tangle no :wrap "src text :exports none"
(mu4e--modeline-string)
#+end_src

**** Individual mail

Show images by default, and prefer to use ~imagemagick~ to do so.
#+begin_src emacs-lisp
  (setq mu4e-view-show-images t)

  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))
#+end_src

Attachments can simply be placed in ~~/Downloads~;
I usually share this directory from ChromeOS, which makes it convenient
to put attachments there (so I can open them in both OSes easily).
#+begin_src emacs-lisp
  (setq mu4e-attachment-dir  "~/Downloads")
#+end_src

Show full email addresses when viewing messages.
#+begin_src emacs-lisp
  (setq mu4e-view-show-addresses 't)
#+end_src

**** HTML support

Emacs is not the ideal environment to read HTML emails;
for that reason, if there is a plaintext version available,
I prefer to see that first.
#+begin_src emacs-lisp
  (setq mu4e-view-prefer-html nil)
#+end_src

If there is no plaintext available, or if the plaintext is unbearable
for any reason, we can open emails in the browser by using
this shortcut.
#+begin_src emacs-lisp
  (add-to-list 'mu4e-view-actions
    '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#+end_src

When attempting to read HTML email as plaintext, I've found that several sources
somehow set the background colour and foreground colour of the text
to be similar (or perhaps fail to set one or the other, I'm not sure),
making the plaintext still very difficult to make out.
These settings try to prevent such setting of the background, improving
the chances that emails will be readable.
See [[https://www.reddit.com/r/emacs/comments/9ep5o1/mu4e_stop_emails_setting_backgroundforeground/][reddit]] for the source of this code.
#+begin_src emacs-lisp
(require 'mu4e-contrib)
(setq mu4e-html2text-command 'mu4e-shr2text)
(setq shr-color-visible-luminance-min 60)
(setq shr-color-visible-distance-min 5)
(setq shr-use-colors nil)
(advice-add #'shr-colorize-region :around (defun shr-no-colourise-region (&rest ignore)))
#+end_src

*** Shortcuts to mailboxes and bookmarks

#+begin_src emacs-lisp
  (setq mu4e-maildir-shortcuts
      '(("/Inbox"     . ?i)
        ("/Sent Mail" . ?s)
        ("/Desk/Followup"  . ?f)
        ("/Desk/Reference" . ?r)
        ("/Desk/Transient" . ?t)))
#+end_src

Bookmarks can be used from the ~mu4e~ main page,
and are also useful for programmatically jumping to maildirs.
#+begin_src emacs-lisp
  (mu4e-bookmark-define "maildir:/Inbox" "Inbox" ?i)
#+end_src

*** Message composition settings

I don't use a signature.
#+begin_src emacs-lisp
  (setq mu4e-compose-signature-auto-include nil)
#+end_src

Don't automatically insert line breaks for long lines
in the message buffer! Such settings infuriate me.
#+begin_src emacs-lisp
  (add-hook 'mu4e-compose-mode-hook 'turn-off-auto-fill)
#+end_src

**** Contacts

I've had problems where contact completion breaks.
For the moment, I make sure that the contacts are requested
from ~mu~ upon starting Emacs.
This function in particular was undefined on one of my systems,
so first check it is defined as a function.
#+begin_src emacs-lisp
(when (fboundp 'mu4e~request-contacts)
  (mu4e~request-contacts))
#+end_src

Note that the contacts are stored in a hash table,
and so I am unsure of how to actually see them in Emacs.

**** Flow

I write emails the way I write all my documents:
trying as best I can to respect a maximum line length of 80 characters.
But even 80 characters can be too wide on some mobile screens,
and when I enter my linebreaks, the receiving client may turn this
#+begin_src text
A line with a number of characters that is possibly too wide for mobile.
Another line of a decent length.
#+end_src
into this
#+begin_src text
A line with a number of characters that is possibly
too wide for mobile.
Another line of a decent length.
#+end_src

One option to solve seems to be to use long paragraphs and to
send messages with ~format=flowed~, which tells the receiving client
to reflow paragraphs as needed.
See for instance [[https://www.emacswiki.org/emacs/FormatFlowed]].
But this has two downsides: I dislike writing long lines,
even with autofill.
And ~format=flowed~ is not supported consistently;
for instance Gmail does not respect it.

I don't have a solution for this potential problem yet,
so I choose to do nothing,
and potentially have my emails flow broken on mobile screens.

# It is useful to reflow my text for the reciever.
# The ~format=flowed~ is supposed to allow the receiving client
# to do this.
# #+begin_src emacs-lisp
# (setq mu4e-compose-format-flowed t)
# #+end_src
# But since some clients don't support ~format-flowed;~ Gmail being
# the notable example, instead reflow paragraphs into long lines,
# which should be broken as needed by the receiver.
# #+begin_src emacs-lisp
# (add-hook 'mu4e-compose-mode-hook (lambda () (use-hard-newlines -1)))
# #+end_src
#
# It's convenient not to reply to myself by default.
# #+begin_src emacs-lisp
# (setq mu4e-compose-dont-reply-to-self t)
# #+end_src

**** HTML support (nothing to see here)

Note that there is a ~org-mu4e~ package that comes with ~mu4e~,
which would allow for sending HTML email using ~mu4e~,
but it is apparently depricated.
The ~org-mime~ package above is probably the correct path
if I ever want to send HTML emails.

**** Changing the from address automatically

I use my personal Gmail to collect all of my emails,
but when replying I like to send back from whichever
account the original mail was sent to.
This hook updates the ~From~ field when replying to
an email sent to one of my other accounts.
It is taken from [[https://www.djcbsoftware.nl/code/mu/mu4e/Compose-hooks.html#Compose-hooks][the ~mu4e~ documentation]],
with a modification to save the existing ~user-mail-address~ so
that it can be reset afterwards.
#+begin_src emacs-lisp
(add-hook 'mu4e-compose-pre-hook
  (defun my/set-from-address ()
    "Set the From address based on the To address of the original."
    (let ((msg mu4e-compose-parent-message))
      (when msg
        (setq my/user-mail-address-backup user-mail-address)
        (setq user-mail-address
          (cond
             ((mu4e-message-contact-field-matches msg :to "armstmp@mcmaster.ca")
               "armstmp@mcmaster.ca")
             ((mu4e-message-contact-field-matches msg :cc "armstmp@mcmaster.ca")
               "armstmp@mcmaster.ca")
             (t
               "markparmstrong@gmail.com")))))))
#+end_src

The ~mu4e-compose-mode-hook~ runs
after the message has been formed.
So we are safe to restore the original ~user-mail-address~.
#+begin_src emacs-lisp
;; Initialise the variable used below.
(setq my/user-mail-address-backup nil)

(add-hook 'mu4e-compose-mode-hook
  (defun my/restore-user-mail-address ()
    "Restore the user-mail-address based on the value
     in my/user-mail-address-backup."
    (when my/user-mail-address-backup
       (setq user-mail-address my/user-mail-address-backup))))
#+end_src

*** Miscellaneous

Don't prompt me upon quitting ~mu4e~.
#+begin_src emacs-lisp
  (setq mu4e-confirm-quit nil)
#+end_src

*** Start up mu4e so that mu is running at startup

We start ~mu4e~ here in case, for instance,
we use a bookmark to open a ~mu4e~ buffer
before we've started ~mu4e~ correctly.
Without this, we might get an error asking if we started ~mu4e.~
(In particular, I was encountering a ~root maildir unknown~ error.)
#+begin_src emacs-lisp
  (mu4e 'background)
#+end_src

*** End reading email section

At the start of this section, we checked if the ~mu~ command
was installed; close out that conditional now.
#+begin_src emacs-lisp
) ;; End mu exists conditional
#+end_src

** Agda mode                                   :programming:

:TODO: Check for cleanup of Agda settings.

Agda comes with a tool ~agda-mode~ which can be used to locate
the Elisp files for the ~agda-mode~. It's recommended we
execute ~agda-mode locate~ when starting Emacs,
and load the files it reports.
We check if this command exists first; if not,
presumably Agda is not installed, and we skip the rest of this section.
#+begin_src emacs-lisp
(when (executable-find "agda-mode") ;; Begin agda-mode exists conditional
  (load-file (let ((coding-system-for-read 'utf-8))
                 (shell-command-to-string "agda-mode locate")))
#+end_src

The ~agda2-mode~ package is installed when setting up Agda, so here we simply ~require~ it.
It would be loaded in any case when starting Agda mode, but I load it now
because I sometimes open the ~agda2-info-buffer~ when setting up tabs,
before any actual Agda files may be open, and
#+begin_src emacs-lisp
  (require 'agda2-mode)
#+end_src

*** Command line arguments

Dr. Wolfram Kahl has recommended customising the following settings.
Note that my machine is a virtual machine running on a Chromebook
which, at time of writing (January 2020) has around ~6G~ (out of
the system's total ~8G~) available to it.

That said, my machine is routinely lagging quite badly,
and so I am trying to find the “sweet spot”.
#+begin_src emacs-lisp
  (setq agda2-program-args '("+RTS" "-M3.0G" "-H0.6G" "-A128M" "-RTS"))
#+end_src

These arguments specify
| ~+RTS~, ~-RTS~ | Flags between these are arguments to the ~ghc~ runtime |
| ~-M[size]~   | Maximum heap size                                    |
| ~-H[size]~   | Suggested heap size                                  |
| ~-A[size]~   | Allocation area size used by the garbage collector   |

Full documentation for the ~ghc~ runtime argumentscan be found [[https://downloads.haskell.org/~ghc/7.8.4/docs/html/users_guide/runtime-control.html][here]].

Additional arguments that may be useful include
| ~-S[file]~ | Produces information about “each and every garbage collection” |
|          | - Outputs to ~stderr~ by default                               |

*** Alternative problem highlighting

I find the background colouring used by Agda for reporting
errors/warnings makes the underlying code too difficult
to read, especially in dark themes.

So I modify the faces Agda defines.
#+begin_src emacs-lisp
  (require 'agda2-highlight)
#+end_src

First, we change all uses of background colouring to coloured boxes
instead.
#+begin_src emacs-lisp
  ;; Change backgrounds to boxes.
  (cl-loop for (_ . face) in agda2-highlight-faces
        do (if (string-prefix-p "agda2-" (symbol-name face)) ;; Some non-Agda faces are in the list; don't change them
               (unless (equal face 'agda2-highlight-incomplete-pattern-face) ;; Workaround; this face is not defined in recent versions?
               (set-face-attribute face nil
                 :box (face-attribute face :background)
                 :background 'unspecified))))
#+end_src

These can also be intrusive in some cases; specifically, for
warnings about pattern matching. So I modify them specifically.
#+begin_src emacs-lisp
  ;; Coverage warnings highlight the whole function;
  ;; change the box to an underline to be less intrusive.
  (set-face-attribute 'agda2-highlight-coverage-problem-face nil
    :underline (face-attribute 'agda2-highlight-coverage-problem-face :box)
    :box 'unspecified)

  ;; Deadcode warnings highlight the whole line;
  ;; change the box to a strikethrough to be less intrusive,
  ;; as well as thematically appropriate.
  (set-face-attribute 'agda2-highlight-deadcode-face nil
    :strike-through (face-attribute 'agda2-highlight-deadcode-face :box)
    :box 'unspecified)

  ;; Non-definitional pattern matching may be ignored;
  ;; remove the colouring and just italicise it to be less intrusive.
  (set-face-attribute 'agda2-highlight-catchall-clause-face nil
    :box 'unspecified
    :slant 'italic)
#+end_src

This code can be used to test out many of the redefined faces.
#+begin_src agda2
module HighlightTesting where
  open import Data.Nat using (ℕ ; zero ; suc)

  -- Coverage problem, non-definitional pattern matching, dead code.
  bad-pattern-matching : ℕ → ℕ
--bad-pattern-matching suc n   Missing case; other lines marked with coverage problem face
  bad-pattern-matching 0 = 0
  bad-pattern-matching (suc (suc 0)) = 0
  bad-pattern-matching (suc (suc n)) = 0 -- Non-definitional case (maybe use CATCHALL pragma?).
  bad-pattern-matching 0 = 0 -- Dead code.

  -- Non-terminating
  ∞? : ℕ
  ∞? = suc ∞?

  -- Unsolved meta warnings
  fail-to-solve-meta : ℕ
  fail-to-solve-meta = has-a-meta
    where
      has-a-meta : {n : ℕ} → ℕ
      has-a-meta = 0

  -- Shadowing in telescope
  shadowing-variable : (x : ℕ) → (x : ℕ) → ℕ
  shadowing-variable x y = x

  -- Missing function definition
  has-no-definition : Set

  data unpositive-type : Set where
    bad : (unpositive-type → ℕ) → unpositive-type
#+end_src

*** Org Agda mode

Org-Agda mode is a Polymode Musa and I created
for working on literate Agda documents written in Org mode.
[[https://github.com/alhassy/org-agda-mode]]
#+begin_src emacs-lisp
(use-package polymode)
(require 'org-agda-mode)
#+end_src

*** End Agda mode section

At the start of this section, we checked if the ~agda-mode~ command
was installed; close out that conditional now.
#+begin_src emacs-lisp
) ;; End agda-mode exists conditional
#+end_src

** Agda input method                           :completion:

A particularly nice feature included with Agda is its input method,
which I believe inherits somewhat from the TeX input method,
and allows completion of unicode characters by typing ~\~ followed
by short sequences of characters.
To me, this seems the most approachable way to enable unicode character
use in my writing.

So, regardless of whether I am actively using Agda, I want its input method
installed and enabled in most modes.

*** Install the Agda input method

Ideally, we have installed Agda and, along with it, the Agda input method.
If this is the case, then the [[Agda mode]] section will have been tangled
and run, so we can just ~require~ ~agda-input~.

As a failsafe, we will place ~agda-input.el~ into my unmanaged elisp directory.
To make sure that this file doesn't end up supplanting an installed version,
we attempt to delete it before proceeding.
#+begin_src emacs-lisp
(setq my/local-agda-input (concat my/unmanaged-elisp-dir "/agda-input.el"))
(delete-file my/local-agda-input)
#+end_src

Now, as the first attempt at the failsafe, if the ~agda-mode~ command isn't installed,
try to download ~agda-input.el~ from the Agda Github repository.
Wrap the download in ~ignore-errors~ to allow it to fail, in case we are offline.
#+begin_src emacs-lisp
(unless (executable-find "agda-mode")
  (ignore-errors
    (url-copy-file
       "https://raw.githubusercontent.com/agda/agda/master/src/data/emacs-mode/agda-input.el"
       my/local-agda-input
       'okay-if-already-exists)))
#+end_src

Now, in case the above failed and the local file is still missing,
I keep a local copy (which is tangled into the ~/tmp~ directory)
(it's not exported due to length, so check the raw file to see it).
This version is naturally less maintained than the actual repository version.
#+begin_src emacs-lisp
(unless (or (executable-find "agda-mode") (file-exists-p my/local-agda-input))
  (copy-file "/tmp/agda-input.el" my/local-agda-input))
#+end_src

Finally, we should be able to require ~agda-input~.
#+begin_src emacs-lisp
(require 'agda-input)
#+end_src

**** Local copy of ~agda-input.el~           :noexport:

#+begin_src emacs-lisp :tangle /tmp/agda-input.el
;;; -*- lexical-binding: t; -*-
;;; agda-input.el --- The Agda input method

;; SPDX-License-Identifier: MIT License
;;; Commentary:

;; A highly customisable input method which can inherit from other
;; Quail input methods. By default the input method is geared towards
;; the input of mathematical and other symbols in Agda programs.
;;
;; Use M-x customize-group agda-input to customise this input method.
;; Note that the functions defined under "Functions used to tweak
;; translation pairs" below can be used to tweak both the key
;; translations inherited from other input methods as well as the
;; ones added specifically for this one.
;;
;; Use agda-input-show-translations to see all the characters which
;; can be typed using this input method (except for those
;; corresponding to ASCII characters).

;;; Code:

(require 'quail)
(require 'cl-lib)
;; Quail is quite stateful, so be careful when editing this code.  Note
;; that with-temp-buffer is used below whenever buffer-local state is
;; modified.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Utility functions

(defun agda-input-concat-map (f xs)
  "Concat (map F XS)."
  (apply 'append (mapcar f xs)))

(defun agda-input-to-string-list (s)
  "Convert a string S to a list of one-character strings, after
removing all space and newline characters."
  (agda-input-concat-map
   (lambda (c) (if (member c (string-to-list " \n"))
              nil
            (list (string c))))
   (string-to-list s)))

(defun agda-input-character-range (from to)
  "A string consisting of the characters from FROM to TO."
  (let (seq)
    (dotimes (i (1+ (- to from)))
      (setq seq (cons (+ from i) seq)))
    (concat (nreverse seq))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions used to tweak translation pairs

(defun agda-input-compose (f g)
  "\x -> concatMap F (G x)"
    (lambda (x) (agda-input-concat-map f (funcall g x))))

(defun agda-input-or (f g)
  "\x -> F x ++ G x"
    (lambda (x) (append (funcall f x) (funcall g x))))

(defun agda-input-nonempty ()
  "Only keep pairs with a non-empty first component."
  (lambda (x) (if (> (length (car x)) 0) (list x))))

(defun agda-input-prepend (prefix)
  "Prepend PREFIX to all key sequences."
    (lambda (x) `((,(concat prefix (car x)) . ,(cdr x)))))

(defun agda-input-prefix (prefix)
  "Only keep pairs whose key sequence starts with PREFIX."
    (lambda (x)
      (if (equal (substring (car x) 0 (length prefix)) prefix)
          (list x))))

(defun agda-input-suffix (suffix)
  "Only keep pairs whose key sequence ends with SUFFIX."
    (lambda (x)
      (if (equal (substring (car x)
                            (- (length (car x)) (length suffix)))
                 suffix)
          (list x))))

(defun agda-input-drop (ss)
  "Drop pairs matching one of the given key sequences.
SS should be a list of strings."
    (lambda (x) (unless (member (car x) ss) (list x))))

(defun agda-input-drop-beginning (n)
  "Drop N characters from the beginning of each key sequence."
    (lambda (x) `((,(substring (car x) n) . ,(cdr x)))))

(defun agda-input-drop-end (n)
  "Drop N characters from the end of each key sequence."
    (lambda (x)
      `((,(substring (car x) 0 (- (length (car x)) n)) .
         ,(cdr x)))))

(defun agda-input-drop-prefix (prefix)
  "Only keep pairs whose key sequence starts with PREFIX.
This prefix is dropped."
  (agda-input-compose
   (agda-input-drop-beginning (length prefix))
   (agda-input-prefix prefix)))

(defun agda-input-drop-suffix (suffix)
  "Only keep pairs whose key sequence ends with SUFFIX.
This suffix is dropped."
    (agda-input-compose
     (agda-input-drop-end (length suffix))
     (agda-input-suffix suffix)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Customization

;; The :set keyword is set to 'agda-input-incorporate-changed-setting
;; so that the input method gets updated immediately when users
;; customize it. However, the setup functions cannot be run before all
;; variables have been defined. Hence the :initialize keyword is set to
;; 'custom-initialize-default to ensure that the setup is not performed
;; until agda-input-setup is called at the end of this file.

(defgroup agda-input nil
  "The Agda input method.
After tweaking these settings you may want to inspect the resulting
translations using `agda-input-show-translations'."
  :group 'agda2
  :group 'leim)

(defcustom agda-input-tweak-all
  '(agda-input-compose
    (agda-input-prepend "\\")
    (agda-input-nonempty))
  "An expression yielding a function which can be used to tweak
all translations before they are included in the input method.
The resulting function (if non-nil) is applied to every
\(KEY-SEQUENCE . TRANSLATION) pair and should return a list of such
pairs. (Note that the translations can be anything accepted by
`quail-defrule'.)

If you change this setting manually (without using the
customization buffer) you need to call `agda-input-setup' in
order for the change to take effect."
  :group 'agda-input
  :set 'agda-input-incorporate-changed-setting
  :initialize 'custom-initialize-default
  :type 'sexp)

(defcustom agda-input-inherit
  `(("TeX" . (agda-input-compose
              (agda-input-drop '("geq" "leq" "bullet" "qed" "par"))
              (agda-input-or
               (agda-input-drop-prefix "\\")
               (agda-input-or
                (agda-input-compose
                 (agda-input-drop '("^l" "^o" "^r" "^v"))
                 (agda-input-prefix "^"))
                (agda-input-prefix "_")))))
    )
  "A list of Quail input methods whose translations should be
inherited by the Agda input method (with the exception of
translations corresponding to ASCII characters).

The list consists of pairs (qp . tweak), where qp is the name of
a Quail package, and tweak is an expression of the same kind as
`agda-input-tweak-all' which is used to tweak the translation
pairs of the input method.

The inherited translation pairs are added last, after
`agda-input-user-translations' and `agda-input-translations'.

If you change this setting manually (without using the
customization buffer) you need to call `agda-input-setup' in
order for the change to take effect."
  :group 'agda-input
  :set 'agda-input-incorporate-changed-setting
  :initialize 'custom-initialize-default
  :type '(repeat (cons (string :tag "Quail package")
                       (sexp :tag "Tweaking function"))))

(defcustom agda-input-translations
  (let ((max-lisp-eval-depth 2800)) `(

  ;; Equality and similar symbols.

  ("eq"  . ,(agda-input-to-string-list "=∼∽≈≋∻∾∿≀≃⋍≂≅ ≌≊≡≣≐≑≒≓≔≕≖≗≘≙≚≛≜≝≞≟≍≎≏≬⋕＝"))
  ("eqn" . ,(agda-input-to-string-list "≠≁ ≉     ≄  ≇≆  ≢                 ≭    "))

                    ("=n"  . ("≠"))
  ("~"    . ,(agda-input-to-string-list "∼～"))
                    ("~n"  . ("≁"))
  ("~~"   . ("≈"))  ("~~n" . ("≉"))
  ("~~~"  . ("≋"))
  (":~"   . ("∻"))
  ("~-"   . ("≃"))  ("~-n" . ("≄"))
  ("-~"   . ("≂"))
  ("~="   . ("≅"))  ("~=n" . ("≇"))
  ("~~-"  . ("≊"))
  ("=="   . ("≡"))  ("==n" . ("≢"))
  ("==="  . ("≣"))
  ("="    . ("＝"))
  (".="   . ("≐"))  (".=." . ("≑"))
  (":="   . ("≔"))  ("=:"  . ("≕"))
  ("=o"   . ("≗"))
  ("(="   . ("≘"))
  ("and=" . ("≙"))  ("or=" . ("≚"))
  ("*="   . ("≛"))
  ("t="   . ("≜"))
  ("def=" . ("≝"))
  ("m="   . ("≞"))
  ("?="   . ("≟"))

  ;; Inequality and similar symbols.

  ("leq"  . ,(agda-input-to-string-list "<≪⋘≤≦≲ ≶≺≼≾⊂⊆ ⋐⊏⊑ ⊰⊲⊴⋖⋚⋜⋞＜"))
  ("leqn" . ,(agda-input-to-string-list "≮  ≰≨≴⋦≸⊀ ⋨⊄⊈⊊  ⋢⋤ ⋪⋬   ⋠"))
  ("geq"  . ,(agda-input-to-string-list ">≫⋙≥≧≳ ≷≻≽≿⊃⊇ ⋑⊐⊒ ⊱⊳⊵⋗⋛⋝⋟＞"))
  ("geqn" . ,(agda-input-to-string-list "≯  ≱≩≵⋧≹⊁ ⋩⊅⊉⊋  ⋣⋥ ⋫⋭   ⋡"))

  ("<="   . ("≤"))  (">="   . ("≥"))
  ("<=n"  . ("≰"))  (">=n"  . ("≱"))
  ("len"  . ("≰"))  ("gen"  . ("≱"))
  ("<n"   . ("≮"))  (">n"   . ("≯"))
  ("<~"   . ("≲"))  (">~"   . ("≳"))
  ("<~n"  . ("⋦"))  (">~n"  . ("⋧"))
  ("<~nn" . ("≴"))  (">~nn" . ("≵"))

  ("sub"   . ("⊂"))  ("sup"   . ("⊃"))
  ("subn"  . ("⊄"))  ("supn"  . ("⊅"))
  ("sub="  . ("⊆"))  ("sup="  . ("⊇"))
  ("sub=n" . ("⊈"))  ("sup=n" . ("⊉"))

  ("squb"   . ("⊏"))  ("squp"   . ("⊐"))
  ("squb="  . ("⊑"))  ("squp="  . ("⊒"))
  ("squb=n" . ("⋢"))  ("squp=n" . ("⋣"))

  ;; Set membership etc.

  ("member" . ,(agda-input-to-string-list "∈∉∊∋∌∍⋲⋳⋴⋵⋶⋷⋸⋹⋺⋻⋼⋽⋾⋿"))

  ("inn" . ("∉"))
  ("nin" . ("∌"))

  ;; Intersections, unions etc.

  ("intersection" . ,(agda-input-to-string-list "∩⋂∧⋀⋏⨇⊓⨅⋒∏ ⊼      ⨉"))
  ("union"        . ,(agda-input-to-string-list "∪⋃∨⋁⋎⨈⊔⨆⋓∐⨿⊽⊻⊍⨃⊎⨄⊌∑⅀"))

  ("and" . ("∧"))  ("or"  . ("∨"))
  ("And" . ("⋀"))  ("Or"  . ("⋁"))
  ("i"   . ("∩"))  ("un"  . ("∪"))  ("u+" . ("⊎"))  ("u." . ("⊍"))
  ("I"   . ("⋂"))  ("Un"  . ("⋃"))  ("U+" . ("⨄"))  ("U." . ("⨃"))
  ("glb" . ("⊓"))  ("lub" . ("⊔"))
  ("Glb" . ("⨅"))  ("Lub" . ("⨆"))

  ;; Entailment etc.

  ("entails" . ,(agda-input-to-string-list "⊢⊣⊤⊥⊦⊧⊨⊩⊪⊫⊬⊭⊮⊯"))

  ("|-"   . ("⊢"))  ("|-n"  . ("⊬"))
  ("-|"   . ("⊣"))
  ("|="   . ("⊨"))  ("|=n"  . ("⊭"))
  ("||-"  . ("⊩"))  ("||-n" . ("⊮"))
  ("||="  . ("⊫"))  ("||=n" . ("⊯"))
  ("|||-" . ("⊪"))

  ;; Divisibility, parallelity.

  ("|"  . ("∣"))  ("|n"  . ("∤"))
  ("||" . ("∥"))  ("||n" . ("∦"))

  ;; Some symbols from logic and set theory.

  ("all" . ("∀"))
  ("ex"  . ("∃"))
  ("exn" . ("∄"))
  ("0"   . ("∅"))
  ("C"   . ("∁"))

  ;; Corners, ceilings and floors.

  ("c"  . ,(agda-input-to-string-list "⌜⌝⌞⌟⌈⌉⌊⌋"))
  ("cu" . ,(agda-input-to-string-list "⌜⌝  ⌈⌉  "))
  ("cl" . ,(agda-input-to-string-list "  ⌞⌟  ⌊⌋"))

  ("cul" . ("⌜"))  ("cuL" . ("⌈"))
  ("cur" . ("⌝"))  ("cuR" . ("⌉"))
  ("cll" . ("⌞"))  ("clL" . ("⌊"))
  ("clr" . ("⌟"))  ("clR" . ("⌋"))

  ;; Various operators/symbols.

  ("qed"       . ("∎"))
  ("x"         . ("×"))
  ("o"         . ("∘"))
  ("comp"      . ("∘"))
  ("."         . ,(agda-input-to-string-list "∙．"))
  ("*"         . ("⋆"))
  (".+"        . ("∔"))
  (".-"        . ("∸"))
  (":"         . ,(agda-input-to-string-list "∶⦂ː꞉˸፥፦：﹕︓"))
  (","         . ,(agda-input-to-string-list "ʻ،⸲⸴⹁⹉、︐︑﹐﹑，､"))
  (";"         . ,(agda-input-to-string-list "⨾⨟⁏፤꛶；︔﹔⍮⸵;"))
  ("::"        . ("∷"))
  ("::-"       . ("∺"))
  ("-:"        . ("∹"))
  ("+ "        . ("⊹"))
  ("+"         . ("＋"))
  ("sqrt"      . ("√"))
  ("surd3"     . ("∛"))
  ("surd4"     . ("∜"))
  ("increment" . ("∆"))
  ("inf"       . ("∞"))
  ("&"         . ("⅋"))
  ("z;"        . ,(agda-input-to-string-list "⨟⨾"))
  ("z:"        . ("⦂"))

  ;; Circled operators.

  ("o+"  . ("⊕"))
  ("o--" . ("⊖"))
  ("ox"  . ("⊗"))
  ("o/"  . ("⊘"))
  ("o."  . ("⊙"))
  ("oo"  . ("⊚"))
  ("o*"  . ("⊛"))
  ("o="  . ("⊜"))
  ("o-"  . ("⊝"))

  ("O+"  . ("⨁"))
  ("Ox"  . ("⨂"))
  ("O."  . ("⨀"))
  ("O*"  . ("⍟"))

  ;; Boxed operators.

  ("b+" . ("⊞"))
  ("b-" . ("⊟"))
  ("bx" . ("⊠"))
  ("b." . ("⊡"))

  ;; Various symbols.

  ("integral" . ,(agda-input-to-string-list "∫∬∭∮∯∰∱∲∳"))
  ("angle"    . ,(agda-input-to-string-list "∟∡∢⊾⊿"))
  ("join"     . ,(agda-input-to-string-list "⋈⋉⋊⋋⋌⨝⟕⟖⟗"))

  ;; Arrows.

  ("l"  . ,(agda-input-to-string-list "←⇐⇚⭅⇇⇆↤⇦↞↼↽⇠⇺↜⇽⟵⟸↚⇍⇷ ↹     ↢↩↫⇋⇜⇤⟻⟽⤆↶↺⟲                                     "))
  ("r"  . ,(agda-input-to-string-list "→⇒⇛⭆⇉⇄↦⇨↠⇀⇁⇢⇻↝⇾⟶⟹↛⇏⇸⇶ ↴    ↣↪↬⇌⇝⇥⟼⟾⤇↷↻⟳⇰⇴⟴⟿ ➵➸➙➔➛➜➝➞➟➠➡➢➣➤➧➨➩➪➫➬➭➮➯➱➲➳➺➻➼➽➾⊸"))
  ("u"  . ,(agda-input-to-string-list "↑⇑⤊⟰⇈⇅↥⇧↟↿↾⇡⇞          ↰↱➦ ⇪⇫⇬⇭⇮⇯                                           "))
  ("d"  . ,(agda-input-to-string-list "↓⇓⤋⟱⇊⇵↧⇩↡⇃⇂⇣⇟         ↵↲↳➥ ↯                                                "))
  ("ud" . ,(agda-input-to-string-list "↕⇕   ↨⇳                                                                    "))
  ("lr" . ,(agda-input-to-string-list "↔⇔         ⇼↭⇿⟷⟺↮⇎⇹                                                        "))
  ("ul" . ,(agda-input-to-string-list "↖⇖                        ⇱↸                                               "))
  ("ur" . ,(agda-input-to-string-list "↗⇗                                         ➶➹➚                             "))
  ("dr" . ,(agda-input-to-string-list "↘⇘                        ⇲                ➴➷➘                             "))
  ("dl" . ,(agda-input-to-string-list "↙⇙                                                                         "))

  ("l-"  . ("←"))  ("<-"  . ("←"))  ("l="  . ("⇐"))  ("<="  . ("⇐"))
  ("r-"  . ("→"))  ("->"  . ("→"))  ("r="  . ("⇒"))  ("=>"  . ("⇒"))
  ("u-"  . ("↑"))                   ("u="  . ("⇑"))
  ("d-"  . ("↓"))                   ("d="  . ("⇓"))
  ("ud-" . ("↕"))                   ("ud=" . ("⇕"))
  ("lr-" . ("↔"))  ("<->" . ("↔"))  ("lr=" . ("⇔"))  ("<=>" . ("⇔"))
  ("ul-" . ("↖"))                   ("ul=" . ("⇖"))
  ("ur-" . ("↗"))                   ("ur=" . ("⇗"))
  ("dr-" . ("↘"))                   ("dr=" . ("⇘"))
  ("dl-" . ("↙"))                   ("dl=" . ("⇙"))

  ("l==" . ("⇚"))  ("l-2" . ("⇇"))                   ("l-r-" . ("⇆"))
  ("r==" . ("⇛"))  ("r-2" . ("⇉"))  ("r-3" . ("⇶"))  ("r-l-" . ("⇄"))
  ("u==" . ("⟰"))  ("u-2" . ("⇈"))                   ("u-d-" . ("⇅"))
  ("d==" . ("⟱"))  ("d-2" . ("⇊"))                   ("d-u-" . ("⇵"))

  ("l--"  . ("⟵"))  ("<--"  . ("⟵"))  ("l~"  . ("↜" "⇜"))
  ("r--"  . ("⟶"))  ("-->"  . ("⟶"))  ("r~"  . ("↝" "⇝" "⟿"))
  ("lr--" . ("⟷"))  ("<-->" . ("⟷"))  ("lr~" . ("↭"))

  ("l-n"  . ("↚"))  ("<-n"  . ("↚"))  ("l=n"  . ("⇍"))
  ("r-n"  . ("↛"))  ("->n"  . ("↛"))  ("r=n"  . ("⇏"))  ("=>n"  . ("⇏"))
  ("lr-n" . ("↮"))  ("<->n" . ("↮"))  ("lr=n" . ("⇎"))  ("<=>n" . ("⇎"))

  ("l-|"  . ("↤"))  ("ll-" . ("↞"))
  ("r-|"  . ("↦"))  ("rr-" . ("↠"))
  ("u-|"  . ("↥"))  ("uu-" . ("↟"))
  ("d-|"  . ("↧"))  ("dd-" . ("↡"))
  ("ud-|" . ("↨"))

  ("l->" . ("↢"))
  ("r->" . ("↣"))

  ("r-o" . ("⊸"))  ("-o"  . ("⊸"))

  ("dz" . ("↯"))

  ;; Ellipsis.

  ("..." . ,(agda-input-to-string-list "⋯⋮⋰⋱"))

  ;; Box-drawing characters.

  ("---" . ,(agda-input-to-string-list "─│┌┐└┘├┤┬┼┴╴╵╶╷╭╮╯╰╱╲╳"))
  ("--=" . ,(agda-input-to-string-list "═║╔╗╚╝╠╣╦╬╩     ╒╕╘╛╞╡╤╪╧ ╓╖╙╜╟╢╥╫╨"))
  ("--_" . ,(agda-input-to-string-list "━┃┏┓┗┛┣┫┳╋┻╸╹╺╻
                                        ┍┯┑┕┷┙┝┿┥┎┰┒┖┸┚┠╂┨┞╀┦┟╁┧┢╈┪┡╇┩
                                        ┮┭┶┵┾┽┲┱┺┹╊╉╆╅╄╃ ╿╽╼╾"))
  ("--." . ,(agda-input-to-string-list "╌╎┄┆┈┊
                                        ╍╏┅┇┉┋"))

  ;; Triangles.

  ;; Big/small, black/white.

  ("t" . ,(agda-input-to-string-list "◂◃◄◅▸▹►▻▴▵▾▿◢◿◣◺◤◸◥◹"))
  ("T" . ,(agda-input-to-string-list "◀◁▶▷▲△▼▽◬◭◮"))

  ("tb" . ,(agda-input-to-string-list "◂▸▴▾◄►◢◣◤◥"))
  ("tw" . ,(agda-input-to-string-list "◃▹▵▿◅▻◿◺◸◹"))

  ("Tb" . ,(agda-input-to-string-list "◀▶▲▼"))
  ("Tw" . ,(agda-input-to-string-list "◁▷△▽"))

  ;; Squares.

  ("sq"  . ,(agda-input-to-string-list "■□◼◻◾◽▣▢▤▥▦▧▨▩◧◨◩◪◫◰◱◲◳"))
  ("sqb" . ,(agda-input-to-string-list "■◼◾"))
  ("sqw" . ,(agda-input-to-string-list "□◻◽"))
  ("sq." . ("▣"))
  ("sqo" . ("▢"))

  ;; Rectangles.

  ("re"  . ,(agda-input-to-string-list "▬▭▮▯"))
  ("reb" . ,(agda-input-to-string-list "▬▮"))
  ("rew" . ,(agda-input-to-string-list "▭▯"))

  ;; Parallelograms.

  ("pa"  . ,(agda-input-to-string-list "▰▱"))
  ("pab" . ("▰"))
  ("paw" . ("▱"))

  ;; Diamonds.

  ("di"  . ,(agda-input-to-string-list "◆◇◈"))
  ("dib" . ("◆"))
  ("diw" . ("◇"))
  ("di." . ("◈"))

  ;; Circles.

  ("ci"   . ,(agda-input-to-string-list "●○◎◌◯◍◐◑◒◓◔◕◖◗◠◡◴◵◶◷⚆⚇⚈⚉"))
  ("cib"  . ("●"))
  ("ciw"  . ("○"))
  ("ci."  . ("◎"))
  ("ci.." . ("◌"))
  ("ciO"  . ("◯"))

  ;; Stars.

  ("st"   . ,(agda-input-to-string-list "⋆✦✧✶✴✹ ★☆✪✫✯✰✵✷✸"))
  ("st4"  . ,(agda-input-to-string-list "✦✧"))
  ("st6"  . ("✶"))
  ("st8"  . ("✴"))
  ("st12" . ("✹"))

  ;; Blackboard bold letters.

  ("bA"   . ("𝔸"))
  ("bB"   . ("𝔹"))
  ("bC"   . ("ℂ"))
  ("bD"   . ("𝔻"))
  ("bE"   . ("𝔼"))
  ("bF"   . ("𝔽"))
  ("bG"   . ("𝔾"))
  ("bH"   . ("ℍ"))
  ("bI"   . ("𝕀"))
  ("bJ"   . ("𝕁"))
  ("bK"   . ("𝕂"))
  ("bL"   . ("𝕃"))
  ("bM"   . ("𝕄"))
  ("bN"   . ("ℕ"))
  ("bO"   . ("𝕆"))
  ("bP"   . ("ℙ"))
  ("bQ"   . ("ℚ"))
  ("bR"   . ("ℝ"))
  ("bS"   . ("𝕊"))
  ("bT"   . ("𝕋"))
  ("bU"   . ("𝕌"))
  ("bV"   . ("𝕍"))
  ("bW"   . ("𝕎"))
  ("bX"   . ("𝕏"))
  ("bY"   . ("𝕐"))
  ("bZ"   . ("ℤ"))
  ("bGG"  . ("ℾ"))
  ("bGP"  . ("ℿ"))
  ("bGS"  . ("⅀"))
  ("ba"   . ("𝕒"))
  ("bb"   . ("𝕓"))
  ("bc"   . ("𝕔"))
  ("bd"   . ("𝕕"))
  ("be"   . ("𝕖"))
  ("bf"   . ("𝕗"))
  ("bg"   . ("𝕘"))
  ("bh"   . ("𝕙"))
  ("bi"   . ("𝕚"))
  ("bj"   . ("𝕛"))
  ("bk"   . ("𝕜"))
  ("bl"   . ("𝕝"))
  ("bm"   . ("𝕞"))
  ("bn"   . ("𝕟"))
  ("bo"   . ("𝕠"))
  ("bp"   . ("𝕡"))
  ("bq"   . ("𝕢"))
  ("br"   . ("𝕣"))
  ("bs"   . ("𝕤"))
  ("bt"   . ("𝕥"))
  ("bu"   . ("𝕦"))
  ("bv"   . ("𝕧"))
  ("bw"   . ("𝕨"))
  ("bx"   . ("𝕩"))
  ("by"   . ("𝕪"))
  ("bz"   . ("𝕫"))
  ("bGg"  . ("ℽ"))
  ("bGp"  . ("ℼ"))

  ;; Blackboard bold numbers.

  ("b0"   . ("𝟘"))
  ("b1"   . ("𝟙"))
  ("b2"   . ("𝟚"))
  ("b3"   . ("𝟛"))
  ("b4"   . ("𝟜"))
  ("b5"   . ("𝟝"))
  ("b6"   . ("𝟞"))
  ("b7"   . ("𝟟"))
  ("b8"   . ("𝟠"))
  ("b9"   . ("𝟡"))

  ;; Mathematical bold letters.

  ("BA"   . ("𝐀"))
  ("BB"   . ("𝐁"))
  ("BC"   . ("𝐂"))
  ("BD"   . ("𝐃"))
  ("BE"   . ("𝐄"))
  ("BF"   . ("𝐅"))
  ("BG"   . ("𝐆"))
  ("BH"   . ("𝐇"))
  ("BI"   . ("𝐈"))
  ("BJ"   . ("𝐉"))
  ("BK"   . ("𝐊"))
  ("BL"   . ("𝐋"))
  ("BM"   . ("𝐌"))
  ("BN"   . ("𝐍"))
  ("BO"   . ("𝐎"))
  ("BP"   . ("𝐏"))
  ("BQ"   . ("𝐐"))
  ("BR"   . ("𝐑"))
  ("BS"   . ("𝐒"))
  ("BT"   . ("𝐓"))
  ("BU"   . ("𝐔"))
  ("BV"   . ("𝐕"))
  ("BW"   . ("𝐖"))
  ("BX"   . ("𝐗"))
  ("BY"   . ("𝐘"))
  ("BZ"   . ("𝐙"))
  ("Ba"   . ("𝐚"))
  ("Bb"   . ("𝐛"))
  ("Bc"   . ("𝐜"))
  ("Bd"   . ("𝐝"))
  ("Be"   . ("𝐞"))
  ("Bf"   . ("𝐟"))
  ("Bg"   . ("𝐠"))
  ("Bh"   . ("𝐡"))
  ("Bi"   . ("𝐢"))
  ("Bj"   . ("𝐣"))
  ("Bk"   . ("𝐤"))
  ("Bl"   . ("𝐥"))
  ("Bm"   . ("𝐦"))
  ("Bn"   . ("𝐧"))
  ("Bo"   . ("𝐨"))
  ("Bp"   . ("𝐩"))
  ("Bq"   . ("𝐪"))
  ("Br"   . ("𝐫"))
  ("Bs"   . ("𝐬"))
  ("Bt"   . ("𝐭"))
  ("Bu"   . ("𝐮"))
  ("Bv"   . ("𝐯"))
  ("Bw"   . ("𝐰"))
  ("Bx"   . ("𝐱"))
  ("By"   . ("𝐲"))
  ("Bz"   . ("𝐳"))

  ;; Mathematical bold Greek letters.

  ("BGA"  . ("𝚨"))
  ("BGB"  . ("𝚩"))
  ("BGC"  . ("𝚾"))
  ("BGD"  . ("𝚫"))
  ("BGE"  . ("𝚬"))
  ("BGG"  . ("𝚪"))
  ("BGH"  . ("𝚮"))
  ("BGI"  . ("𝚰"))
  ("BGK"  . ("𝚱"))
  ("BGL"  . ("𝚲"))
  ("BGM"  . ("𝚳"))
  ("BGN"  . ("𝚴"))
  ("BGO"  . ("𝛀"))
  ("BOmicron" . ("𝚶"))
  ("BGF"  . ("𝚽"))
  ("BPi"  . ("𝚷"))
  ("BGP"  . ("𝚿"))
  ("BGR"  . ("𝚸"))
  ("BGS"  . ("𝚺"))
  ("BGT"  . ("𝚻"))
  ("BGTH" . ("𝚯"))
  ("BGU"  . ("𝚼"))
  ("BGX"  . ("𝚵"))
  ("BGZ"  . ("𝚭"))
  ("BGa"  . ("𝛂"))
  ("BGb"  . ("𝛃"))
  ("BGc"  . ("𝛘"))
  ("BGd"  . ("𝛅"))
  ("BGe"  . ("𝛆"))
  ("BGg"  . ("𝛄"))
  ("BGh"  . ("𝛈"))
  ("BGi"  . ("𝛊"))
  ("BGk"  . ("𝛋"))
  ("BGl"  . ("𝛌"))
  ("BGm"  . ("𝛍"))
  ("BGn"  . ("𝛎"))
  ("BGo"  . ("𝛚"))
  ("Bomicron" . ("𝛐"))
  ("BGf"  . ("𝛗"))
  ("Bpi"  . ("𝛑"))
  ("BGp"  . ("𝛙"))
  ("BGr"  . ("𝛒"))
  ("BGs"  . ("𝛔"))
  ("BGt"  . ("𝛕"))
  ("BGth" . ("𝛉"))
  ("BGu"  . ("𝛖"))
  ("BGx"  . ("𝛏"))
  ("BGz"  . ("𝛇"))

  ;; Mathematical bold digits.

  ("B0"   . ("𝟎"))
  ("B1"   . ("𝟏"))
  ("B2"   . ("𝟐"))
  ("B3"   . ("𝟑"))
  ("B4"   . ("𝟒"))
  ("B5"   . ("𝟓"))
  ("B6"   . ("𝟔"))
  ("B7"   . ("𝟕"))
  ("B8"   . ("𝟖"))
  ("B9"   . ("𝟗"))

  ;; Fullwidth letters

  ("FA"   . ("Ａ"))
  ("FB"   . ("Ｂ"))
  ("FC"   . ("Ｃ"))
  ("FD"   . ("Ｄ"))
  ("FE"   . ("Ｅ"))
  ("FF"   . ("Ｆ"))
  ("FG"   . ("Ｇ"))
  ("FH"   . ("Ｈ"))
  ("FI"   . ("Ｉ"))
  ("FJ"   . ("Ｊ"))
  ("FK"   . ("Ｋ"))
  ("FL"   . ("Ｌ"))
  ("FM"   . ("Ｍ"))
  ("FN"   . ("Ｎ"))
  ("FO"   . ("Ｏ"))
  ("FP"   . ("Ｐ"))
  ("FQ"   . ("Ｑ"))
  ("FR"   . ("Ｒ"))
  ("FS"   . ("Ｓ"))
  ("FT"   . ("Ｔ"))
  ("FU"   . ("Ｕ"))
  ("FV"   . ("Ｖ"))
  ("FW"   . ("Ｗ"))
  ("FX"   . ("Ｘ"))
  ("FY"   . ("Ｙ"))
  ("FZ"   . ("Ｚ"))
  ("Fa"   . ("ａ"))
  ("Fb"   . ("ｂ"))
  ("Fc"   . ("ｃ"))
  ("Fd"   . ("ｄ"))
  ("Fe"   . ("ｅ"))
  ("Ff"   . ("ｆ"))
  ("Fg"   . ("ｇ"))
  ("Fh"   . ("ｈ"))
  ("Fi"   . ("ｉ"))
  ("Fj"   . ("ｊ"))
  ("Fk"   . ("ｋ"))
  ("Fl"   . ("ｌ"))
  ("Fm"   . ("ｍ"))
  ("Fn"   . ("ｎ"))
  ("Fo"   . ("ｏ"))
  ("Fp"   . ("ｐ"))
  ("Fq"   . ("ｑ"))
  ("Fr"   . ("ｒ"))
  ("Fs"   . ("ｓ"))
  ("Ft"   . ("ｔ"))
  ("Fu"   . ("ｕ"))
  ("Fv"   . ("ｖ"))
  ("Fw"   . ("ｗ"))
  ("Fx"   . ("ｘ"))
  ("Fy"   . ("ｙ"))
  ("Fz"   . ("ｚ"))

  ;; Fullwidth digits

  ("F0"   . ("０"))
  ("F1"   . ("１"))
  ("F2"   . ("２"))
  ("F3"   . ("３"))
  ("F4"   . ("４"))
  ("F5"   . ("５"))
  ("F6"   . ("６"))
  ("F7"   . ("７"))
  ("F8"   . ("８"))
  ("F9"   . ("９"))

  ;; Parentheses.

  ("(" . ,(agda-input-to-string-list "([{⁅⁽₍〈⎴⟅⟦⟨⟪⦃〈《「『【〔〖〚︵︷︹︻︽︿﹁﹃﹙﹛﹝（［｛｢❪❬❰❲❴⟮⦅⦗⧼⸨❮⦇⦉"))
  (")" . ,(agda-input-to-string-list ")]}⁆⁾₎〉⎵⟆⟧⟩⟫⦄〉》」』】〕〗〛︶︸︺︼︾﹀﹂﹄﹚﹜﹞）］｝｣❫❭❱❳❵⟯⦆⦘⧽⸩❯⦈⦊"))

  ("[[" . ("⟦"))
  ("]]" . ("⟧"))
  ("<"  . ,(agda-input-to-string-list "⟨<≪⋘≺⊂⋐⊏⊰⊲⋖＜"))
  (">"  . ,(agda-input-to-string-list "⟩>≫⋙≻⊃⋑⊐⊱⊳⋗＞"))
  ("<<" . ("⟪"))
  (">>" . ("⟫"))
  ("{{" . ("⦃"))
  ("}}" . ("⦄"))

  ("(b" . ("⟅"))
  (")b" . ("⟆"))

  ("lbag" . ("⟅"))
  ("rbag" . ("⟆"))

  ("<|" . ("⦉"))  ;; Angle bar brackets
  ("|>" . ("⦊"))

  ("(|" . ("⦇"))  ;; Idiom brackets
  ("|)" . ("⦈"))

  ("((" . ,(agda-input-to-string-list "⦅｟"))  ;; Banana brackets
  ("))" . ,(agda-input-to-string-list "⦆｠"))

  ;; Primes.

  ("'" . ,(agda-input-to-string-list "′″‴⁗＇"))
  ("`" . ,(agda-input-to-string-list "‵‶‷｀"))

  ;; Fractions.

  ("frac" . ,(agda-input-to-string-list "¼½¾⅓⅔⅕⅖⅗⅘⅙⅚⅛⅜⅝⅞⅟"))

  ;; Bullets.

  ("bu"  . ,(agda-input-to-string-list "•◦‣⁌⁍"))
  ("bub" . ("•"))
  ("buw" . ("◦"))
  ("but" . ("‣"))

  ;; Musical symbols.

  ("note" . ,(agda-input-to-string-list "♩♪♫♬"))
  ("b"    . ("♭"))
  ("#"    . ("♯"))

  ;; Other punctuation and symbols.

  ("\\"         . ("\\"))
  ("en"         . ("–"))
  ("em"         . ("—"))
  ("!"          . ("！"))
  ("!!"         . ("‼"))
  ("?"          . ("？"))
  ("??"         . ("⁇"))
  ("?!"         . ("‽" "⁈"))
  ("!?"         . ("⁉"))
  ("die"        . ,(agda-input-to-string-list "⚀⚁⚂⚃⚄⚅"))
  ("asterisk"   . ,(agda-input-to-string-list "⁎⁑⁂✢✣✤✥✱✲✳✺✻✼✽❃❉❊❋＊"))
  ("8<"         . ("✂" "✄"))
  ("tie"        . ("⁀"))
  ("undertie"   . ("‿"))
  ("apl"        . ,(agda-input-to-string-list "⌶⌷⌸⌹⌺⌻⌼⌽⌾⌿⍀⍁⍂⍃⍄⍅⍆⍇⍈
                                               ⍉⍊⍋⍌⍍⍎⍏⍐⍑⍒⍓⍔⍕⍖⍗⍘⍙⍚⍛
                                               ⍜⍝⍞⍟⍠⍡⍢⍣⍤⍥⍦⍧⍨⍩⍪⍫⍬⍭⍮
                                               ⍯⍰⍱⍲⍳⍴⍵⍶⍷⍸⍹⍺⎕"))
  ("#"          . ("＃"))
  ("%"          . ("％"))
  ("&"          . ("＆"))
  ("*"          . ("＊"))
  ("/"          . ,(agda-input-to-string-list "／＼"))
  ("@"          . ("＠"))
  ("__"         . ("＿"))
  ("\""         . ("＂"))

  ;; Some combining characters.
  ;;
  ;; The following combining characters also have (other)
  ;; translations:
  ;; ̀ ́ ̂ ̃ ̄ ̆ ̇ ̈ ̋ ̌ ̣ ̧ ̱

  ("^--" . ,(agda-input-to-string-list"̅̿"))
  ("_--" . ,(agda-input-to-string-list"̲̳"))
  ("^~"  . ,(agda-input-to-string-list"̃͌"))
  ("_~"  .  (                         "̰"))
  ("^."  . ,(agda-input-to-string-list"̇̈⃛⃜"))
  ("_."  . ,(agda-input-to-string-list"̣̤"))
  ("^l"  . ,(agda-input-to-string-list"⃖⃐⃔"))
  ("^l-" .  (                         "⃖"))
  ("^r"  . ,(agda-input-to-string-list"⃗⃑⃕"))
  ("^r-" .  (                         "⃗"))
  ("^lr" .  (                         "⃡"))
  ("_lr" .  (                         "͍"))
  ("^^"  . ,(agda-input-to-string-list"̂̑͆"))
  ("_^"  . ,(agda-input-to-string-list"̭̯̪"))
  ("^v"  . ,(agda-input-to-string-list"̌̆"))
  ("_v"  . ,(agda-input-to-string-list"̬̮̺"))

  ;; Shorter forms of many greek letters plus ƛ.

  ("Ga"  . ("α"))  ("GA"  . ("Α"))
  ("Gb"  . ("β"))  ("GB"  . ("Β"))
  ("Gg"  . ("γ"))  ("GG"  . ("Γ"))
  ("Gd"  . ("δ"))  ("GD"  . ("Δ"))
  ("Ge"  . ("ε"))  ("GE"  . ("Ε"))
  ("Gz"  . ("ζ"))  ("GZ"  . ("Ζ"))
  ("Gh"  . ("η"))  ("GH"  . ("Η"))
  ("Gth" . ("θ"))  ("GTH" . ("Θ"))
  ("Gi"  . ("ι"))  ("GI"  . ("Ι"))
  ("Gk"  . ("κ"))  ("GK"  . ("Κ"))
  ("Gl"  . ("λ"))  ("GL"  . ("Λ"))  ("Gl-" . ("ƛ"))
  ("Gm"  . ("μ"))  ("GM"  . ("Μ"))
  ("Gn"  . ("ν"))  ("GN"  . ("Ν"))
  ("Gx"  . ("ξ"))  ("GX"  . ("Ξ"))
  ;; \omicron \Omicron
  ;; \pi \Pi
  ("Gr"  . ("ρ"))  ("GR"  . ("Ρ"))
  ("Gs"  . ("σ"))  ("GS"  . ("Σ"))
  ("Gt"  . ("τ"))  ("GT"  . ("Τ"))
  ("Gu"  . ("υ"))  ("GU"  . ("Υ"))
  ("Gf"  . ("φ"))  ("GF"  . ("Φ"))
  ("Gc"  . ("χ"))  ("GC"  . ("Χ"))
  ("Gp"  . ("ψ"))  ("GP"  . ("Ψ"))
  ("Go"  . ("ω"))  ("GO"  . ("Ω"))

  ;; Mathematical characters

  ("MiA" . ("𝐴"))
  ("MiB" . ("𝐵"))
  ("MiC" . ("𝐶"))
  ("MiD" . ("𝐷"))
  ("MiE" . ("𝐸"))
  ("MiF" . ("𝐹"))
  ("MiG" . ("𝐺"))
  ("MiH" . ("𝐻"))
  ("MiI" . ("𝐼"))
  ("MiJ" . ("𝐽"))
  ("MiK" . ("𝐾"))
  ("MiL" . ("𝐿"))
  ("MiM" . ("𝑀"))
  ("MiN" . ("𝑁"))
  ("MiO" . ("𝑂"))
  ("MiP" . ("𝑃"))
  ("MiQ" . ("𝑄"))
  ("MiR" . ("𝑅"))
  ("MiS" . ("𝑆"))
  ("MiT" . ("𝑇"))
  ("MiU" . ("𝑈"))
  ("MiV" . ("𝑉"))
  ("MiW" . ("𝑊"))
  ("MiX" . ("𝑋"))
  ("MiY" . ("𝑌"))
  ("MiZ" . ("𝑍"))
  ("Mia" . ("𝑎"))
  ("Mib" . ("𝑏"))
  ("Mic" . ("𝑐"))
  ("Mid" . ("𝑑"))
  ("Mie" . ("𝑒"))
  ("Mif" . ("𝑓"))
  ("Mig" . ("𝑔"))
  ("Mih" . ("ℎ"))
  ("Mii" . ("𝑖"))
  ("Mij" . ("𝑗"))
  ("Mik" . ("𝑘"))
  ("Mil" . ("𝑙"))
  ("Mim" . ("𝑚"))
  ("Min" . ("𝑛"))
  ("Mio" . ("𝑜"))
  ("Mip" . ("𝑝"))
  ("Miq" . ("𝑞"))
  ("Mir" . ("𝑟"))
  ("Mis" . ("𝑠"))
  ("Mit" . ("𝑡"))
  ("Miu" . ("𝑢"))
  ("Miv" . ("𝑣"))
  ("Miw" . ("𝑤"))
  ("Mix" . ("𝑥"))
  ("Miy" . ("𝑦"))
  ("Miz" . ("𝑧"))
  ("MIA" . ("𝑨"))
  ("MIB" . ("𝑩"))
  ("MIC" . ("𝑪"))
  ("MID" . ("𝑫"))
  ("MIE" . ("𝑬"))
  ("MIF" . ("𝑭"))
  ("MIG" . ("𝑮"))
  ("MIH" . ("𝑯"))
  ("MII" . ("𝑰"))
  ("MIJ" . ("𝑱"))
  ("MIK" . ("𝑲"))
  ("MIL" . ("𝑳"))
  ("MIM" . ("𝑴"))
  ("MIN" . ("𝑵"))
  ("MIO" . ("𝑶"))
  ("MIP" . ("𝑷"))
  ("MIQ" . ("𝑸"))
  ("MIR" . ("𝑹"))
  ("MIS" . ("𝑺"))
  ("MIT" . ("𝑻"))
  ("MIU" . ("𝑼"))
  ("MIV" . ("𝑽"))
  ("MIW" . ("𝑾"))
  ("MIX" . ("𝑿"))
  ("MIY" . ("𝒀"))
  ("MIZ" . ("𝒁"))
  ("MIa" . ("𝒂"))
  ("MIb" . ("𝒃"))
  ("MIc" . ("𝒄"))
  ("MId" . ("𝒅"))
  ("MIe" . ("𝒆"))
  ("MIf" . ("𝒇"))
  ("MIg" . ("𝒈"))
  ("MIh" . ("𝒉"))
  ("MIi" . ("𝒊"))
  ("MIj" . ("𝒋"))
  ("MIk" . ("𝒌"))
  ("MIl" . ("𝒍"))
  ("MIm" . ("𝒎"))
  ("MIn" . ("𝒏"))
  ("MIo" . ("𝒐"))
  ("MIp" . ("𝒑"))
  ("MIq" . ("𝒒"))
  ("MIr" . ("𝒓"))
  ("MIs" . ("𝒔"))
  ("MIt" . ("𝒕"))
  ("MIu" . ("𝒖"))
  ("MIv" . ("𝒗"))
  ("MIw" . ("𝒘"))
  ("MIx" . ("𝒙"))
  ("MIy" . ("𝒚"))
  ("MIz" . ("𝒛"))
  ("McA" . ("𝒜"))
  ("McB" . ("ℬ"))
  ("McC" . ("𝒞"))
  ("McD" . ("𝒟"))
  ("McE" . ("ℰ"))
  ("McF" . ("ℱ"))
  ("McG" . ("𝒢"))
  ("McH" . ("ℋ"))
  ("McI" . ("ℐ"))
  ("McJ" . ("𝒥"))
  ("McK" . ("𝒦"))
  ("McL" . ("ℒ"))
  ("McM" . ("ℳ"))
  ("McN" . ("𝒩"))
  ("McO" . ("𝒪"))
  ("McP" . ("𝒫"))
  ("McQ" . ("𝒬"))
  ("McR" . ("ℛ"))
  ("McS" . ("𝒮"))
  ("McT" . ("𝒯"))
  ("McU" . ("𝒰"))
  ("McV" . ("𝒱"))
  ("McW" . ("𝒲"))
  ("McX" . ("𝒳"))
  ("McY" . ("𝒴"))
  ("McZ" . ("𝒵"))
  ("Mca" . ("𝒶"))
  ("Mcb" . ("𝒷"))
  ("Mcc" . ("𝒸"))
  ("Mcd" . ("𝒹"))
  ("Mce" . ("ℯ"))
  ("Mcf" . ("𝒻"))
  ("Mcg" . ("ℊ"))
  ("Mch" . ("𝒽"))
  ("Mci" . ("𝒾"))
  ("Mcj" . ("𝒿"))
  ("Mck" . ("𝓀"))
  ("Mcl" . ("𝓁"))
  ("Mcm" . ("𝓂"))
  ("Mcn" . ("𝓃"))
  ("Mco" . ("ℴ"))
  ("Mcp" . ("𝓅"))
  ("Mcq" . ("𝓆"))
  ("Mcr" . ("𝓇"))
  ("Mcs" . ("𝓈"))
  ("Mct" . ("𝓉"))
  ("Mcu" . ("𝓊"))
  ("Mcv" . ("𝓋"))
  ("Mcw" . ("𝓌"))
  ("Mcx" . ("𝓍"))
  ("Mcy" . ("𝓎"))
  ("Mcz" . ("𝓏"))
  ("MCA" . ("𝓐"))
  ("MCB" . ("𝓑"))
  ("MCC" . ("𝓒"))
  ("MCD" . ("𝓓"))
  ("MCE" . ("𝓔"))
  ("MCF" . ("𝓕"))
  ("MCG" . ("𝓖"))
  ("MCH" . ("𝓗"))
  ("MCI" . ("𝓘"))
  ("MCJ" . ("𝓙"))
  ("MCK" . ("𝓚"))
  ("MCL" . ("𝓛"))
  ("MCM" . ("𝓜"))
  ("MCN" . ("𝓝"))
  ("MCO" . ("𝓞"))
  ("MCP" . ("𝓟"))
  ("MCQ" . ("𝓠"))
  ("MCR" . ("𝓡"))
  ("MCS" . ("𝓢"))
  ("MCT" . ("𝓣"))
  ("MCU" . ("𝓤"))
  ("MCV" . ("𝓥"))
  ("MCW" . ("𝓦"))
  ("MCX" . ("𝓧"))
  ("MCY" . ("𝓨"))
  ("MCZ" . ("𝓩"))
  ("MCa" . ("𝓪"))
  ("MCb" . ("𝓫"))
  ("MCc" . ("𝓬"))
  ("MCd" . ("𝓭"))
  ("MCe" . ("𝓮"))
  ("MCf" . ("𝓯"))
  ("MCg" . ("𝓰"))
  ("MCh" . ("𝓱"))
  ("MCi" . ("𝓲"))
  ("MCj" . ("𝓳"))
  ("MCk" . ("𝓴"))
  ("MCl" . ("𝓵"))
  ("MCm" . ("𝓶"))
  ("MCn" . ("𝓷"))
  ("MCo" . ("𝓸"))
  ("MCp" . ("𝓹"))
  ("MCq" . ("𝓺"))
  ("MCr" . ("𝓻"))
  ("MCs" . ("𝓼"))
  ("MCt" . ("𝓽"))
  ("MCu" . ("𝓾"))
  ("MCv" . ("𝓿"))
  ("MCw" . ("𝔀"))
  ("MCx" . ("𝔁"))
  ("MCy" . ("𝔂"))
  ("MCz" . ("𝔃"))
  ("MfA" . ("𝔄"))
  ("MfB" . ("𝔅"))
  ("MfC" . ("ℭ"))
  ("MfD" . ("𝔇"))
  ("MfE" . ("𝔈"))
  ("MfF" . ("𝔉"))
  ("MfG" . ("𝔊"))
  ("MfH" . ("ℌ"))
  ("MfI" . ("ℑ"))
  ("MfJ" . ("𝔍"))
  ("MfK" . ("𝔎"))
  ("MfL" . ("𝔏"))
  ("MfM" . ("𝔐"))
  ("MfN" . ("𝔑"))
  ("MfO" . ("𝔒"))
  ("MfP" . ("𝔓"))
  ("MfQ" . ("𝔔"))
  ("MfR" . ("ℜ"))
  ("MfS" . ("𝔖"))
  ("MfT" . ("𝔗"))
  ("MfU" . ("𝔘"))
  ("MfV" . ("𝔙"))
  ("MfW" . ("𝔚"))
  ("MfX" . ("𝔛"))
  ("MfY" . ("𝔜"))
  ("MfZ" . ("ℨ"))
  ("Mfa" . ("𝔞"))
  ("Mfb" . ("𝔟"))
  ("Mfc" . ("𝔠"))
  ("Mfd" . ("𝔡"))
  ("Mfe" . ("𝔢"))
  ("Mff" . ("𝔣"))
  ("Mfg" . ("𝔤"))
  ("Mfh" . ("𝔥"))
  ("Mfi" . ("𝔦"))
  ("Mfj" . ("𝔧"))
  ("Mfk" . ("𝔨"))
  ("Mfl" . ("𝔩"))
  ("Mfm" . ("𝔪"))
  ("Mfn" . ("𝔫"))
  ("Mfo" . ("𝔬"))
  ("Mfp" . ("𝔭"))
  ("Mfq" . ("𝔮"))
  ("Mfr" . ("𝔯"))
  ("Mfs" . ("𝔰"))
  ("Mft" . ("𝔱"))
  ("Mfu" . ("𝔲"))
  ("Mfv" . ("𝔳"))
  ("Mfw" . ("𝔴"))
  ("Mfx" . ("𝔵"))
  ("Mfy" . ("𝔶"))
  ("Mfz" . ("𝔷"))

  ;; (Sub / Super) scripts
  ;;
  ;; Unicode 12.1 omits several latin characters from sub/superscript.
  ;; https://www.quora.com/Why-is-there-no-character-for-superscript-q-in-Unicode
  ;;
  ;; Perhaps they will be added in future versions, however there are no
  ;; proposals for it currently in the pipeline:
  ;; https://www.unicode.org/alloc/Pipeline.html

  ("_a" . ("ₐ"))
  ;; ("_b" . ("b"))
  ;; ("_c" . ("c"))
  ;; ("_d" . ("d"))
  ("_e" . ("ₑ"))
  ;; ("_f" . ("f"))
  ;; ("_g" . ("g"))
  ("_h" . ("ₕ"))
  ("_i" . ("ᵢ"))
  ("_j" . ("ⱼ"))
  ("_k" . ("ₖ"))
  ("_l" . ("ₗ"))
  ("_m" . ("ₘ"))
  ("_n" . ("ₙ"))
  ("_o" . ("ₒ"))
  ("_p" . ("ₚ"))
  ;; ("_q" . ("q"))
  ("_r" . ("ᵣ"))
  ("_s" . ("ₛ"))
  ("_t" . ("ₜ"))
  ("_u" . ("ᵤ"))
  ("_v" . ("ᵥ"))
  ;; ("_w" . ("w"))
  ("_x" . ("ₓ"))
  ;; ("_y" . ("y"))
  ;; ("_z" . ("z"))

  ("_Gb" . ("ᵦ"))
  ("_Gg" . ("ᵧ"))
  ("_Gr" . ("ᵨ"))
  ("_Gf" . ("ᵩ"))
  ("_Gc" . ("ᵪ"))

  ("^a" . ("ᵃ"))
  ("^b" . ("ᵇ"))
  ("^c" . ("ᶜ"))
  ("^d" . ("ᵈ"))
  ("^e" . ("ᵉ"))
  ("^f" . ("ᶠ"))
  ("^g" . ("ᵍ"))
  ("^h" . ("ʰ"))
  ("^i" . ("ⁱ"))
  ("^j" . ("ʲ"))
  ("^k" . ("ᵏ"))
  ("^l" . ("ˡ"))
  ("^m" . ("ᵐ"))
  ("^n" . ("ⁿ"))
  ("^o" . ("ᵒ"))
  ("^p" . ("ᵖ"))
  ;; ("^q" . ("q"))
  ("^r" . ("ʳ"))
  ("^s" . ("ˢ"))
  ("^t" . ("ᵗ"))
  ("^u" . ("ᵘ"))
  ("^v" . ("ᵛ"))
  ("^w" . ("ʷ"))
  ("^x" . ("ˣ"))
  ("^y" . ("ʸ"))
  ("^z" . ("ᶻ"))

  ("^A" . ("ᴬ"))
  ("^B" . ("ᴮ"))
  ;; ("^C" . ("C"))
  ("^D" . ("ᴰ"))
  ("^E" . ("ᴱ"))
  ;; ("^F" . ("F"))
  ("^G" . ("ᴳ"))
  ("^H" . ("ᴴ"))
  ("^I" . ("ᴵ"))
  ("^J" . ("ᴶ"))
  ("^K" . ("ᴷ"))
  ("^L" . ("ᴸ"))
  ("^M" . ("ᴹ"))
  ("^N" . ("ᴺ"))
  ("^O" . ("ᴼ"))
  ("^P" . ("ᴾ"))
  ;; ("^Q" . ("Q"))
  ("^R" . ("ᴿ"))
  ;; ("^S" . ("S"))
  ("^T" . ("ᵀ"))
  ("^U" . ("ᵁ"))
  ("^V" . ("ⱽ"))
  ("^W" . ("ᵂ"))
  ;; ("^X" . ("X"))
  ;; ("^Y" . ("Y"))
  ;; ("^Z" . ("Z"))

  ("^Gb" . ("ᵝ"))
  ("^Gg" . ("ᵞ"))
  ("^Gd" . ("ᵟ"))
  ("^Ge" . ("ᵋ"))
  ("^Gth" . ("ᶿ"))
  ("^Gf" . ("ᵠ"))
  ("^Gc" . ("ᵡ"))

  ;; Some ISO8859-1 characters.

  (" "         . (" "))
  ("!"         . ("¡"))
  ("cent"      . ("¢"))
  ("brokenbar" . ("¦"))
  ("degree"    . ("°"))
  ("?"         . ("¿"))
  ("^a_"       . ("ª"))
  ("^o_"       . ("º"))

  ;; Circled, parenthesised etc. numbers and letters.

  ( "(0)" . ,(agda-input-to-string-list " ⓪🄀⓿🄋🄌"))
  ( "(1)" . ,(agda-input-to-string-list "⑴①⒈❶➀➊"))
  ( "(2)" . ,(agda-input-to-string-list "⑵②⒉❷➁➋"))
  ( "(3)" . ,(agda-input-to-string-list "⑶③⒊❸➂➌"))
  ( "(4)" . ,(agda-input-to-string-list "⑷④⒋❹➃➍"))
  ( "(5)" . ,(agda-input-to-string-list "⑸⑤⒌❺➄➎"))
  ( "(6)" . ,(agda-input-to-string-list "⑹⑥⒍❻➅➏"))
  ( "(7)" . ,(agda-input-to-string-list "⑺⑦⒎❼➆➐"))
  ( "(8)" . ,(agda-input-to-string-list "⑻⑧⒏❽➇➑"))
  ( "(9)" . ,(agda-input-to-string-list "⑼⑨⒐❾➈➒"))
  ("(10)" . ,(agda-input-to-string-list "⑽⑩⒑❿➉➓"))
  ("(11)" . ,(agda-input-to-string-list "⑾⑪⒒⓫"))
  ("(12)" . ,(agda-input-to-string-list "⑿⑫⒓⓬"))
  ("(13)" . ,(agda-input-to-string-list "⒀⑬⒔⓭"))
  ("(14)" . ,(agda-input-to-string-list "⒁⑭⒕⓮"))
  ("(15)" . ,(agda-input-to-string-list "⒂⑮⒖⓯"))
  ("(16)" . ,(agda-input-to-string-list "⒃⑯⒗⓰"))
  ("(17)" . ,(agda-input-to-string-list "⒄⑰⒘⓱"))
  ("(18)" . ,(agda-input-to-string-list "⒅⑱⒙⓲"))
  ("(19)" . ,(agda-input-to-string-list "⒆⑲⒚⓳"))
  ("(20)" . ,(agda-input-to-string-list "⒇⑳⒛⓴"))

  ("(a)"  . ,(agda-input-to-string-list "⒜Ⓐⓐ🅐🄰🅰"))
  ("(b)"  . ,(agda-input-to-string-list "⒝Ⓑⓑ🅑🄱🅱"))
  ("(c)"  . ,(agda-input-to-string-list "⒞Ⓒⓒ🅒🄲🅲"))
  ("(d)"  . ,(agda-input-to-string-list "⒟Ⓓⓓ🅓🄳🅳"))
  ("(e)"  . ,(agda-input-to-string-list "⒠Ⓔⓔ🅔🄴🅴"))
  ("(f)"  . ,(agda-input-to-string-list "⒡Ⓕⓕ🅕🄵🅵"))
  ("(g)"  . ,(agda-input-to-string-list "⒢Ⓖⓖ🅖🄶🅶"))
  ("(h)"  . ,(agda-input-to-string-list "⒣Ⓗⓗ🅗🄷🅷"))
  ("(i)"  . ,(agda-input-to-string-list "⒤Ⓘⓘ🅘🄸🅸"))
  ("(j)"  . ,(agda-input-to-string-list "⒥Ⓙⓙ🅙🄹🅹"))
  ("(k)"  . ,(agda-input-to-string-list "⒦Ⓚⓚ🅚🄺🅺"))
  ("(l)"  . ,(agda-input-to-string-list "⒧Ⓛⓛ🅛🄻🅻"))
  ("(m)"  . ,(agda-input-to-string-list "⒨Ⓜⓜ🅜🄼🅼"))
  ("(n)"  . ,(agda-input-to-string-list "⒩Ⓝⓝ🅝🄽🅽"))
  ("(o)"  . ,(agda-input-to-string-list "⒪Ⓞⓞ🅞🄾🅾"))
  ("(p)"  . ,(agda-input-to-string-list "⒫Ⓟⓟ🅟🄿🅿"))
  ("(q)"  . ,(agda-input-to-string-list "⒬Ⓠⓠ🅠🅀🆀"))
  ("(r)"  . ,(agda-input-to-string-list "⒭Ⓡⓡ🅡🅁🆁"))
  ("(s)"  . ,(agda-input-to-string-list "⒮Ⓢⓢ🅢🅂🆂"))
  ("(t)"  . ,(agda-input-to-string-list "⒯Ⓣⓣ🅣🅃🆃"))
  ("(u)"  . ,(agda-input-to-string-list "⒰Ⓤⓤ🅤🅄🆄"))
  ("(v)"  . ,(agda-input-to-string-list "⒱Ⓥⓥ🅥🅅🆅"))
  ("(w)"  . ,(agda-input-to-string-list "⒲Ⓦⓦ🅦🅆🆆"))
  ("(x)"  . ,(agda-input-to-string-list "⒳Ⓧⓧ🅧🅇🆇"))
  ("(y)"  . ,(agda-input-to-string-list "⒴Ⓨⓨ🅨🅈🆈"))
  ("(z)"  . ,(agda-input-to-string-list "⒵Ⓩⓩ🅩🅉🆉"))

  ))
  "A list of translations specific to the Agda input method.
Each element is a pair (KEY-SEQUENCE-STRING . LIST-OF-TRANSLATION-STRINGS).
All the translation strings are possible translations
of the given key sequence; if there is more than one you can choose
between them using the arrow keys.

Note that if you customize this setting you will not
automatically benefit (or suffer) from modifications to its
default value when the library is updated.  If you just want to
add some bindings it is probably a better idea to customize
`agda-input-user-translations'.

These translation pairs are included after those in
`agda-input-user-translations', but before the ones inherited
from other input methods (see `agda-input-inherit').

If you change this setting manually (without using the
customization buffer) you need to call `agda-input-setup' in
order for the change to take effect."
  :group 'agda-input
  :set 'agda-input-incorporate-changed-setting
  :initialize 'custom-initialize-default
  :type '(repeat (cons (string :tag "Key sequence")
                       (repeat :tag "Translations" string))))

(defcustom agda-input-user-translations nil
  "Like `agda-input-translations', but more suitable for user
customizations since by default it is empty.

These translation pairs are included first, before those in
`agda-input-translations' and the ones inherited from other input
methods."
  :group 'agda-input
  :set 'agda-input-incorporate-changed-setting
  :initialize 'custom-initialize-default
  :type '(repeat (cons (string :tag "Key sequence")
                       (repeat :tag "Translations" string))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Inspecting and modifying translation maps

(defun agda-input-get-translations (qp)
  "Return a list containing all translations from the Quail
package QP (except for those corresponding to ASCII).
Each pair in the list has the form (KEY-SEQUENCE . TRANSLATION)."
  (with-temp-buffer
    (activate-input-method qp) ; To make sure that the package is loaded.
    (unless (quail-package qp)
      (error "%s is not a Quail package." qp))
    (let ((decode-map (list 'decode-map)))
      (quail-build-decode-map (list (quail-map)) "" decode-map 0)
      (cdr decode-map))))

(defun agda-input-show-translations (qp)
  "Display all translations used by the Quail package QP (a string).
\(Except for those corresponding to ASCII)."
  (interactive (list (read-input-method-name
                      "Quail input method (default %s): " "Agda")))
  (let ((buf (concat "*" qp " input method translations*")))
    (with-output-to-temp-buffer buf
      (with-current-buffer buf
        (quail-insert-decode-map
         (cons 'decode-map (agda-input-get-translations qp)))))))

(defun agda-input-add-translations (trans)
  "Add the given translations TRANS to the Agda input method.
TRANS is a list of pairs (KEY-SEQUENCE . TRANSLATION). The
translations are appended to the current translations."
  (with-temp-buffer
    (dolist (tr (agda-input-concat-map (eval agda-input-tweak-all) trans))
      (quail-defrule (car tr) (cdr tr) "Agda" t))))

(defun agda-input-inherit-package (qp &optional fun)
  "Let the Agda input method inherit the translations from the
Quail package QP (except for those corresponding to ASCII).

The optional function FUN can be used to modify the translations.
It is given a pair (KEY-SEQUENCE . TRANSLATION) and should return
a list of such pairs."
  (let ((trans (agda-input-get-translations qp)))
    (agda-input-add-translations
     (if fun (agda-input-concat-map fun trans)
       trans))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Setting up the input method

(defun agda-input-setup ()
  "Set up the Agda input method based on the customisable
variables and underlying input methods."

  ;; Create (or reset) the input method.
  (with-temp-buffer
    (quail-define-package "Agda" "UTF-8" "∏" t ; guidance
     "Agda input method.
The purpose of this input method is to edit Agda programs, but
since it is highly customisable it can be made useful for other
tasks as well."
     nil nil nil nil nil nil t ; maximum-shortest
     ))

  (agda-input-add-translations
   (mapcar (lambda (tr) (cons (car tr) (vconcat (cdr tr))))
           (append agda-input-user-translations
                   agda-input-translations)))
  (dolist (def agda-input-inherit)
    (agda-input-inherit-package (car def)
                                (eval (cdr def)))))

(defun agda-input-incorporate-changed-setting (sym val)
  "Update the Agda input method based on the customisable
variables and underlying input methods.
Suitable for use in the :set field of `defcustom'."
  (set-default sym val)
  (agda-input-setup))

;; Set up the input method.

(agda-input-setup)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Administrative details

(provide 'agda-input)
;;; agda-input.el ends here
#+end_src

*** Add unicode characters to Agda's translations

**** Punctuation and parentheses

#+begin_src emacs-lisp
(add-to-list 'agda-input-user-translations '(";;" "﹔"))
(add-to-list 'agda-input-user-translations '(";;" "⨾"))
(add-to-list 'agda-input-user-translations '("|" "❙"))
(add-to-list 'agda-input-user-translations '("st" "•"))
(add-to-list 'agda-input-user-translations '("{" "｛"))
(add-to-list 'agda-input-user-translations '("}" "｝"))
(add-to-list 'agda-input-user-translations '("{" "⁅"))
(add-to-list 'agda-input-user-translations '("}" "⁆"))
(add-to-list 'agda-input-user-translations '("..." "…"))
#+end_src

**** Arrows

#+begin_src emacs-lisp
(add-to-list 'agda-input-user-translations '("pto" "⇀"))
(add-to-list 'agda-input-user-translations '("into" "↪"))
(add-to-list 'agda-input-user-translations '("onto" "↠"))
(add-to-list 'agda-input-user-translations '("conv" "↓"))
(add-to-list 'agda-input-user-translations '("=v" "⇓"))
(add-to-list 'agda-input-user-translations '("eval" "⇓"))
#+end_src

**** Box drawing

#+begin_src emacs-lisp
(add-to-list 'agda-input-user-translations '("box|" "│"))
(add-to-list 'agda-input-user-translations '("box-" "─"))
(add-to-list 'agda-input-user-translations '("boxtl" "├"))
(add-to-list 'agda-input-user-translations '("boxcul" "┌"))
(add-to-list 'agda-input-user-translations '("boxcll" "└"))
#+end_src

**** Correct mistakes on subscripts/superscripts

I often accidentally hold the shift key for too long when entering
subscripts and superscripts; these translations account for that.

#+begin_src emacs-lisp
(add-to-list 'agda-input-user-translations '("^!" "¹"))
(add-to-list 'agda-input-user-translations '("^@" "²"))
(add-to-list 'agda-input-user-translations '("^#" "³"))
(add-to-list 'agda-input-user-translations '("^$" "⁴"))
(add-to-list 'agda-input-user-translations '("^%" "⁵"))
(add-to-list 'agda-input-user-translations '("^^" "⁶"))
(add-to-list 'agda-input-user-translations '("^&" "⁷"))
(add-to-list 'agda-input-user-translations '("^*" "⁸"))
(add-to-list 'agda-input-user-translations '("^(" "⁹"))
(add-to-list 'agda-input-user-translations '("^)" "⁰"))
(add-to-list 'agda-input-user-translations '("_!" "₁"))
(add-to-list 'agda-input-user-translations '("_@" "₂"))
(add-to-list 'agda-input-user-translations '("_#" "₃"))
(add-to-list 'agda-input-user-translations '("_$" "₄"))
(add-to-list 'agda-input-user-translations '("_%" "₅"))
(add-to-list 'agda-input-user-translations '("_^" "₆"))
(add-to-list 'agda-input-user-translations '("_&" "₇"))
(add-to-list 'agda-input-user-translations '("_*" "₈"))
(add-to-list 'agda-input-user-translations '("_(" "₉"))
(add-to-list 'agda-input-user-translations '("_)" "₀"))
#+end_src

**** Emoticons

#+begin_src emacs-lisp
(add-to-list 'agda-input-user-translations '(":)" "😀"))
(add-to-list 'agda-input-user-translations '("grin" "😀"))
(add-to-list 'agda-input-user-translations '("Grin" "😁"))
(add-to-list 'agda-input-user-translations '("meh" "😐"))
(add-to-list 'agda-input-user-translations '("sad" "🙁"))
(add-to-list 'agda-input-user-translations '("gah" "😵"))
(add-to-list 'agda-input-user-translations '("yes" "✔"))
(add-to-list 'agda-input-user-translations '("no" "❌"))
#+end_src

😀 😁 😐 🙁 😵

**** Better access to prime symbols

#+begin_src emacs-lisp
(add-to-list 'agda-input-user-translations '("''" "″"))
(add-to-list 'agda-input-user-translations '("'''" "‴"))
(add-to-list 'agda-input-user-translations '("''''" "⁗"))
#+end_src

**** Small, halfwidth and fullwidth math symbols

These can be useful where use of the normal symbols
is restricted; for instance, in ~ditaa~ diagrams many
of them have special meaning.
#+begin_src emacs-lisp
(add-to-list 'agda-input-user-translations '("s*" "﹡"))
(add-to-list 'agda-input-user-translations '("s+" "﹢"))
(add-to-list 'agda-input-user-translations '("s-" "﹣"))
(add-to-list 'agda-input-user-translations '("s<" "﹤"))
(add-to-list 'agda-input-user-translations '("s>" "﹥"))
(add-to-list 'agda-input-user-translations '("s=" "﹦"))
(add-to-list 'agda-input-user-translations '("s\\" "﹨"))
(add-to-list 'agda-input-user-translations '("f+" "＋"))
(add-to-list 'agda-input-user-translations '("f<" "＜"))
(add-to-list 'agda-input-user-translations '("f=" "＝"))
(add-to-list 'agda-input-user-translations '("f>" "＞"))
(add-to-list 'agda-input-user-translations '("f\\" "＼"))
(add-to-list 'agda-input-user-translations '("f^" "＾"))
(add-to-list 'agda-input-user-translations '("f|" "｜"))
(add-to-list 'agda-input-user-translations '("f~" "～"))
(add-to-list 'agda-input-user-translations '("fnot" "￢"))
(add-to-list 'agda-input-user-translations '("h<-" "￩"))
(add-to-list 'agda-input-user-translations '("hu" "￪"))
(add-to-list 'agda-input-user-translations '("h->" "￫"))
(add-to-list 'agda-input-user-translations '("hd" "￬"))
#+end_src

**** Other

#+begin_src emacs-lisp
(add-to-list 'agda-input-user-translations '("op" "⊕"))
(add-to-list 'agda-input-user-translations '("^<" "﹤"))
(add-to-list 'agda-input-user-translations '("d<" "⪡"))
(add-to-list 'agda-input-user-translations '("powset" "℘"))
(add-to-list 'agda-input-user-translations '("X" "⨉"))
;; Lunate sigmas
(add-to-list 'agda-input-user-translations '("Ls" "ϲ"))
(add-to-list 'agda-input-user-translations '("LS" "Ϲ"))
#+end_src

This Yi script character for the syllable “git” I use
as a shorthand for “git” (the version control software)
in my tab names.
#+begin_src emacs-lisp
(add-to-list 'agda-input-user-translations '("git" "ꇚ"))
#+end_src

**** Activate the new additions

#+begin_src emacs-lisp
(agda-input-setup)
#+end_src

*** Activate Agda input method in most modes

Agda input mode makes it extremely easy to use unicode in documents,
something I strongly prefer to do.
When I can use symbols directly, instead of (for instance)
LaTeX commands, it makes my plaintext far more readable.

So, let's enable Agda input mode in most instances.
#+begin_src emacs-lisp
(add-hook 'text-mode-hook
       (lambda () (set-input-method "Agda")))
(add-hook 'prog-mode-hook
       (lambda () (set-input-method "Agda")))
(add-hook 'artist-mode-hook
       (lambda () (set-input-method "Agda")))
#+end_src

If using ~evil~, we also need to set it as the input method
for insert and Emacs modes.
#+begin_src emacs-lisp
(setq evil-input-method "Agda")
#+end_src

** System package management

I currently use Nix for configuring my (new) systems; see [[../nix/]].
In the past I have also used Guix, though only in a non-declarative manner.

*** Nix

~nix-mode~ is for editing Nix expressions (files).
#+begin_src emacs-lisp
(use-package nix-mode)
#+end_src

See the [[Nix LSP]] section below for settings to integrate with a language server for Nix.

* Keybindings and controls

I make use of ~general~ to organise keybindings.
#+begin_src emacs-lisp
(use-package general)
#+end_src

** General definers

You can use ~general-define-key~ directly to define shortcuts,
ideally using the keyword argument ~:prefix~ to avoid repeating
prefixes, but if you are (even only possibly)
using a prefix several times,
it's better to create a custom function to use instead of
~general-define-key~.

Setting ~:keymaps~ to ~'override~ ensures that no package will
override my shortcuts.

#+begin_src emacs-lisp
(general-create-definer general-main-define-key
  :prefix "C-c"
  :keymaps 'override)

(general-create-definer general-appearance-define-key
  :prefix "C-c a"
  :keymaps 'override)

(general-create-definer general-buffer-define-key
  :prefix "C-c b"
  :keymaps 'override)

(general-create-definer general-window-define-key
  :prefix "C-c w"
  :keymaps 'override)

(general-create-definer general-tab-define-key
  :prefix "C-c t"
  :keymaps 'override)

(general-create-definer general-dired-define-key
  :prefix "C-c d"
  :keymaps 'override)

(general-create-definer general-shell-define-key
  :prefix "C-c s"
  :keymaps 'override)

(general-create-definer general-project-define-key
  :prefix "C-c p"
  :keymaps 'override)

(general-create-definer general-other-package-define-key
  :prefix "C-c o"
  :keymaps 'override)
#+end_src

** Invoke processes

*** Debug Emacs commands

When something fails or hangs within Emacs, use these to diagnose.
#+begin_src emacs-lisp
(general-other-package-define-key
  "e" '(:ignore t :which-key "emacs settings")
  "e d" '(:ignore t :which-key "elisp debug")
  "e d e" 'toggle-debug-on-error
  "e d q" 'toggle-debug-on-quit)
#+end_src

*** imenu                                     :movement:

#+begin_src emacs-lisp
(general-main-define-key
  "i" 'counsel-imenu)
#+end_src

*** avy                                       :movement:

#+begin_src emacs-lisp
(general-main-define-key
  "j" 'avy-goto-char-timer)
#+end_src

*** yankpad                                   :completion:

#+begin_src emacs-lisp
(general-main-define-key
  "f" 'yankpad-expand)

(general-other-package-define-key
  "y i" 'yankpad-insert
  "y m" 'yankpad-map
  "y r" 'yankpad-reload)
#+end_src

*** dired

**** Jumping to specific files

These are not properly ~dired~ shortcuts, but some files
I open often enough to want a direct shortcut.
#+begin_src emacs-lisp
(general-dired-define-key
  "s" '(:ignore t
        :which-key "scratch buffers")
  "sa" '((lambda () (interactive)
           (find-file "~/Dropbox/McMaster/Agda/agda-scratch.agda"))
         :which-key "agda scratch")
  "so" '((lambda () (interactive)
           (find-file "~/logs/scratch/org-scratch.org"))
         :which-key "org scratch")
  "e" '((lambda () (interactive)
           (find-file "~/dotfiles/emacs/emacs-init.org"))
         :which-key "emacs init"))
#+end_src

**** Jumping to directories

I use shortcuts to jump to frequently used directories in ~dired~
(from any buffer, not just while in ~dired~).

Some times it is convenient to use a different function to
invoke ~dired~; in particular, in the past,
I used ~dired-single~ with the invokation ~dired-single-magic-buffer~,
in order to avoid having multiple ~dired~ buffers created.
This turned out to be detrimental once I started keeping
multiple ~dired~ windows open in different tabs.
#+begin_src emacs-lisp
(defun my-dired-invocation (directory)
  "My custom dired invocation.
   It will use my special “magic buffer” for browsing."
  (dired directory))
#+end_src

#+begin_src emacs-lisp
(general-dired-define-key
  "c" '((lambda () (interactive)
          (my-dired-invocation default-directory))
        :which-key "current")
  "/" '((lambda () (interactive)
          (my-dired-invocation "/"))
        :which-key "root")
  "h" '((lambda () (interactive)
          (my-dired-invocation "~"))
        :which-key "home")
  "~" '((lambda () (interactive)
          (my-dired-invocation "~"))
        :which-key "home")
  "a" '((lambda () (interactive)
          (my-dired-invocation "~/@"))
        :which-key "aliases")
  "@" '((lambda () (interactive)
          (my-dired-invocation "~/@"))
        :which-key "aliases")
  "d" '((lambda () (interactive)
          (my-dired-invocation "~/dotfiles/"))
        :which-key "dotfiles")
  "D" '((lambda () (interactive)
          (my-dired-invocation "~/Downloads/"))
        :which-key "downloads")
  "l" '((lambda () (interactive)
          (my-dired-invocation "~/logs/"))
        :which-key "logs")
  "r" '((lambda () (interactive)
          (my-dired-invocation "~/reading/"))
        :which-key "reading")
  "p" '((lambda () (interactive)
          (my-dired-invocation "~/projects/"))
        :which-key "projects")
  "f" '((lambda () (interactive)
          (my-dired-invocation "~/filing/"))
        :which-key "filing")
  "t" '((lambda () (interactive)
          (my-dired-invocation "~/teaching/"))
        :which-key "teaching")
  "T" '((lambda () (interactive)
          (my-dired-invocation "~/projects/agda-computability"))
        :which-key "thesis"))
#+end_src

*** Shells

Use my tab-aware ~vterm~ keybinding by default.
#+begin_src emacs-lisp
(general-shell-define-key
  "v" 'vterm-tab-aware)
#+end_src

In case I want a ~vterm~ instance not tied to the current tab,
include a keybinding for the singular ~*vterm*~ instance
(prepend with the universal argument ~C-u~ to get more instances if needed).
#+begin_src emacs-lisp
(general-shell-define-key
  "V" 'vterm)
#+end_src

These eshell keybindings are deprecated for me, since I don't actively use it.
If I return to it, I should set up a means of assigning a unique buffer to each tab
like I have for ~vterm~ and set a keybinding for that.
# Note: If uncommenting, also set to tangle again.
#+begin_src emacs-lisp :tangle no
;; (general-shell-define-key
;;   "s" 'eshell)

;; (setq my/eshell-counter 0)
;; (general-shell-define-key
;;   "n" '((lambda () (interactive)
;;           (setq my/eshell-counter (+ 1 my/eshell-counter))
;;           (eshell my/eshell-counter))
;;         :which-key "new eshell"))
#+end_src

*** magit                                     :vc:

#+begin_src emacs-lisp
(general-main-define-key
  "g" 'magit-status)
#+end_src

*** mu4e                                      :mail:

#+begin_src emacs-lisp
(general-main-define-key
  "m" 'mu4e)
#+end_src

With insight on performing the buffer kill action after the asynchronous
shell command finishes from [[https://emacs.stackexchange.com/questions/42172/run-elisp-when-async-shell-command-is-done][here]].
See the ~kill-buffer-on-process-finish~ definition earlier in this file.
#+begin_src emacs-lisp
(general-other-package-define-key
  "m" '((lambda () (interactive)
          (let* ((output-buffer-name "*mbsync all directories*")
                 (output-buffer (generate-new-buffer output-buffer-name))
                 (process
                  (progn
                    (display-buffer-at-bottom output-buffer '((window-height . 5)))
                    (async-shell-command "mbsync -a || sleep 60" output-buffer) ;; Sleep for a minute, so any error can be read
                    (get-buffer-process output-buffer))))
              (if (process-live-p process)
                  (set-process-sentinel process #'kill-buffer-and-its-windows-on-process-finish)
                (message "mbsync all directories is not running, but I expected it to be!"))))
        :which-key "mbsync all directories"))
#+end_src

*** list-processes

#+begin_src emacs-lisp
(general-other-package-define-key
  "p" 'list-processes)
#+end_src

*** Personal Elisp

Update my Emacs Git README file.
#+begin_src emacs-lisp
(general-other-package-define-key
  "e R" 'my/dotfiles-readme-generate)
#+end_src

** Programming

These keybindings deal with language server interactions
and programming project helpers.

*** Diagnostics

#+begin_src emacs-lisp
(general-project-define-key
  "d" 'flymake-show-project-diagnostics)
#+end_src

*** treemacs

#+begin_src emacs-lisp
(general-project-define-key
  "t" 'treemacs)
#+end_src

*** Language specific

The ~java-eglot~ package, configured in the section [[Java]],
provides functions for running code from within Emacs.
#+begin_src emacs-lisp
(general-create-definer general-java-define-key
  :prefix "C-c p j"
  :keymaps 'override)
#+end_src

The actual keybindings I define in the Java section.

** Buffer                                      :buffer:

#+begin_src emacs-lisp
(general-buffer-define-key
  "r" '((lambda () (interactive) (revert-buffer () t ()))
        :which-key "revert buffer")

  "u" '(:ignore t
        :which-key "undo actions")
  "u p" '((lambda () (interactive) (undo-propose))
          :which-key "undo-propose")
  "u t" '((lambda () (interactive) (undo-tree-visualize))
          :which-key "undo-tree")

  "t" '((lambda () (interactive) (beginning-of-buffer))
        :which-key "buffer top")
  "b" '((lambda () (interactive) (end-of-buffer))
        :which-key "buffer bottom")

  ;; The effect of previous and next buffer are more easily visualised if you have tab-line mode enabled.
  "<left>" '((lambda () (interactive) (prev-buffer))
             :which-key "previous buffer")
  "<right>" '((lambda () (interactive) (next-buffer))
              :which-key "next buffer"))
#+end_src

** Appearance                                  :theme:

#+begin_src emacs-lisp
(general-appearance-define-key
  "t"   '(:ignore t
          :which-key "themes")
  "t t" '((lambda () (interactive) (toggle-my-themes))
          :which-key "toggle theme")
  "t c" '((lambda () (interactive) (disable-all-custom-themes))
          :which-key "clear theme"))
#+end_src

#+begin_src emacs-lisp
(general-appearance-define-key
  "o"   '(:ignore t
          :which-key "org cosmetics")
  "o i"   '(:ignore t
            :which-key "org indent")
  "o i y" '((lambda () (interactive) (org-indent-mode 1))
            :which-key "org indent yes")
  "o i n" '((lambda () (interactive) (org-indent-mode 0))
            :which-key "org indent no"))
#+end_src

These are cosmetics relating to lines in the current buffer.
#+begin_src emacs-lisp
(general-appearance-define-key
  "l"     '(:ignore t
            :which-key "line cosmetics")
  "l n"   '(:ignore t
            :which-key "line numbers")
  "l n y" '((lambda () (interactive) (display-line-numbers-mode 1))
            :which-key "line numbers - yes")
  "l n n" '((lambda () (interactive) (display-line-numbers-mode 0))
            :which-key "line numbers - no")
  "l w"   '(:ignore t
            :which-key "line wrap")
  "l w y" '((lambda () (interactive) (visual-line-mode 1))
            :which-key "yes line wrap")
  "l w n" '((lambda () (interactive) (visual-line-mode 0))
            :which-key "no line wrap"))
#+end_src

Sometimes I need to toggle fontlocking.
#+begin_src emacs-lisp
(general-appearance-define-key
  "f"     '(:ignore t
            :which-key "font lock")
  "f y"   '((lambda () (interactive)
              (font-lock-mode t))
            :which-key "yes font lock")
  "f n"   '((lambda () (interactive)
              (font-lock-mode 0))
            :which-key "no font lock"))
#+end_src

Controls to adjust the automatic window resizing by ~golden-ratio~ for
when I am using different sizes of screens.
#+begin_src emacs-lisp
(general-appearance-define-key
  "r"   '(:ignore t
          :which-key "golden ratio")
  "r a" 'my/optimize-golden-ratio-behavior
        :which-key "automatic"
  "r w" 'my/golden-ratio:widescreen
        :which-key "widescreen mode"
  "r d" 'my/golden-ratio:default
        :which-key "default mode")
#+end_src

Manually adjust the window splitting behaviour for various screen sizes.
See [[Tweak window splitting]].
#+begin_src emacs-lisp
(general-appearance-define-key
  "s" '(:ignore t
        :which-key "window splitting")
  "s a" 'consistent-window-splits-optimize
         :which-key "Automatically optimize based on current frame width"
  "s d" 'consistent-window-splits-set:default
         :which-key "Revert to default behavior"
  "s l" 'consistent-window-splits-set:laptop
         :which-key "Optimize for laptop screen"
  "s w" 'consistent-window-splits-set:wide
         :which-key "Optimize for widescreen monitor"
  "s u" 'consistent-window-splits-set:ultrawide
         :which-key "Optimize for ultrawide monitor")
#+end_src

** Window management                           :window:

Move around easily with ~windmove~.
#+begin_src emacs-lisp
(general-window-define-key
  "<right>" 'windmove-right :which-key "move focus right"
  "<left>"  'windmove-left  :which-key "move focus left"
  "<up>"    'windmove-up    :which-key "move focus up"
  "<down>"  'windmove-down  :which-key "move focus down")
#+end_src

Also, let's add a shortcut to jump right to the minibuffer,
assuming it is active.
The space key is low and wide, just like the minibuffer,
so it seems a natural choice.
#+begin_src emacs-lisp
(defun switch-to-minibuffer-window ()
    "Switch to the minibuffer window, if it's active.
     Otherwise do nothing."
    (interactive)
    (when (active-minibuffer-window)
        (select-window (active-minibuffer-window))))

(general-window-define-key
  "SPC" 'switch-to-minibuffer-window
         :which-key "move focus to minibuffer")
#+end_src

Move to another frame, if one exists.
#+begin_src emacs-lisp
(general-window-define-key
  "f"  '((lambda () (interactive) (other-frame 1))
         :which-key "other frame")
#+end_src

Adjust the window layout to various configurations.
#+begin_src emacs-lisp
  "v" 'rotate:main-vertical :which-key   "Make main window vertically"
  "h" 'rotate:main-horizontal :which-key "Make main window horizontally"
  "t" 'rotate:tiled :which-key           "Tile windows"
  "r" 'rotate :which-key                 "Rotate through window configurations"
#+end_src

Undo and redo window layout changes.
#+begin_src emacs-lisp
  "["  'winner-undo
  "]"  'winner-redo
#+end_src

Manually resize the focused window. Note this will not work when using [[Automatically enlarge active window][golden-ratio]] mode!
#+begin_src emacs-lisp
  "-"     '((lambda () (interactive) (shrink-window 5))
            :which-key "shrink window")
  "="     '((lambda () (interactive) (enlarge-window 5))
            :which-key "enlarge window")
  "_"     '((lambda () (interactive) (shrink-window 999))
            :which-key "minimise window")
  "+"     '((lambda () (interactive) (enlarge-window 999))
            :which-key "maximise  window"))
#+end_src

** Tab management                              :tab:

#+begin_src emacs-lisp
  (general-tab-define-key
    "r" 'tab-rename
    "k" 'tab-close
    "n" 'tab-new

    "<right>" 'tab-next
    "<left>"  'tab-previous
    "<down>"  'tab-recent
    "<up>"    'tab-undo
    "S-<right>" '((lambda () (interactive) (tab-move 1))
                :which-key "move tab to left")
    "S-<left>"  '((lambda () (interactive) (tab-move -1))
                :which-key "move tab to right")

    "1" '((lambda () (interactive)
            (tab-bar-select-tab 1))
          :which-key "↪ 1")
    "2" '((lambda () (interactive)
            (tab-bar-select-tab 2))
          :which-key "↪ 2")
    "3" '((lambda () (interactive)
            (tab-bar-select-tab 3))
          :which-key "↪ 3")
    "4" '((lambda () (interactive)
            (tab-bar-select-tab 4))
          :which-key "↪ 4")
    "5" '((lambda () (interactive)
            (tab-bar-select-tab 5))
          :which-key "↪ 5")
    "6" '((lambda () (interactive)
            (tab-bar-select-tab 6))
          :which-key "↪ 6")
    "7" '((lambda () (interactive)
            (tab-bar-select-tab 7))
          :which-key "↪ 7")
    "8" '((lambda () (interactive)
            (tab-bar-select-tab 8))
          :which-key "↪ 8")
    "9" '((lambda () (interactive)
            (tab-bar-select-tab 9))
          :which-key "↪ 9")
    "0" '((lambda () (interactive)
            (tab-bar-select-tab 10))
          :which-key "↪ 10")
    "-" '((lambda () (interactive)
            (tab-bar-select-tab 11))
          :which-key "↪ 11")
    "=" '((lambda () (interactive)
            (tab-bar-select-tab 12))
          :which-key "↪ 12")

    "d" '((lambda () (interactive)
          (tab-bar-switch-to-tab "dotfiles"))
          :which-key "↪ email")

    "l" '((lambda () (interactive)
          (tab-bar-switch-to-tab "Logs"))
          :which-key "↪ Logs")
    "m" '((lambda () (interactive)
          (tab-bar-switch-to-tab "email"))
          :which-key "↪ email")
    "b" '((lambda () (interactive)
          (tab-bar-switch-to-tab "Blog"))
          :which-key "↪ Logs"))
#+end_src

** Counsel                                     :completion:

#+begin_src emacs-lisp
(general-main-define-key
  "y" 'counsel-yank-pop)
#+end_src

** Company                                     :completion:

#+begin_src emacs-lisp
(general-main-define-key
  "c" 'company-manual-begin)
#+end_src

** Hideshow

#+begin_src emacs-lisp
(general-create-definer general-hideshow-define-key
  :prefix "C-c h"
  :keymaps 'override)
#+end_src

#+begin_src emacs-lisp
(general-hideshow-define-key
  "h" '((lambda () (interactive)
          (toggle-fold)) ;; todo why this is hard to use in Go
        :which-key "fold code"))

(general-hideshow-define-key
  "s" '((lambda () (interactive)
          (hs-show-block))
        :which-key "unfold code"))

(general-hideshow-define-key
  "H" '((lambda () (interactive)
          (hs-hide-all))
        :which-key "fold all toplevel"))

(general-hideshow-define-key
  "S" '((lambda () (interactive)
          (hs-show-all))
        :which-key "unfold all"))

(general-hideshow-define-key
  "u" '((lambda () (interactive)
          (hs-hide-level 0))
        :which-key "fold under"))
#+end_src

** Other

I like dad jokes, and occasionally like to torture those around me
without leaving me work environment 😀.
#+begin_src emacs-lisp
(use-package dad-joke)
(general-other-package-define-key
  "j" 'dad-joke)
#+end_src

** Disable the mouse

I find myself wanting to learn to use the many tools available
in Emacs to navigate using the keyboard,
but consistently falling back to the mouse unconsiously.
So to force the issue, ~disable-mouse~ mode will disable
most interactions of the mouse with Emacs.
I have found some slip through the cracks,
such as clicking between tab bar tabs, but they are few.
#+begin_src emacs-lisp
;; (use-package disable-mouse)
;; (global-disable-mouse-mode)
#+end_src

This is additionally required if using evil mode.
#+begin_src emacs-lisp
;;(mapc #'disable-mouse-in-keymap
;;  (list evil-motion-state-map
;;        evil-normal-state-map
;;        evil-visual-state-map
;;        evil-insert-state-map))
#+end_src

* Intermediate cosmetics

** Whitespace display                          :space:

*** Erroneous whitespace

~whitespace~ mode has several utilities for visualising whitespace.
#+begin_src emacs-lisp
(require 'whitespace)
(add-hook 'text-mode-hook 'whitespace-mode)
#+end_src
Note that it's not appropriate in all modes, especially more “menu-like” modes,
such as Magit buffers.

Adding ~faces~ to ~whitespace-style~ enables the use of faces
to visualise whitespace; we start here with just that entry.
#+begin_src emacs-lisp
(setq whitespace-style '(face))
#+end_src

It's good practice to avoid trailing spaces
and line which are only whitespace (empty);
warn me about those.
#+begin_src emacs-lisp
(add-to-list 'whitespace-style 'trailing t)
(add-to-list 'whitespace-style 'empty t)
#+end_src

A missing newline at the end of a file is less important,
but I like to visualise it so I am aware in case it matters
if I change it.
#+begin_src emacs-lisp
(add-to-list 'whitespace-style 'missing-newline-at-eof t)
#+end_src

Also warn me if I'm mixing tabs and spaces.
Specifically, if tabs occur after spaces;
there are legitimate reasons to indent further with spaces after tabs,
and unfortunately we cannot easily distinguish those.
#+begin_src emacs-lisp
(add-to-list 'whitespace-style 'space-before-tab::space t)
#+end_src

By default, the face for spaces before tabs only modifies the foreground;
but since spaces are not visualised
(they could be by ~whitespace-mode~, but I am not setting that)
I need the background to be set to see the warning.
#+begin_src emacs-lisp
(set-face-attribute
  'whitespace-space-before-tab
  nil ;; all frames
  :background "dark red")
#+end_src

Here's some practice text for that visualisation:
#+begin_src org
	   # Tab before space, space after tab
  	 # Space before tab, tab after space
#+end_src

*** Non-breaking spaces

Since I use unicode regularly, I do use non-breaking spaces
occasionally, especially for intraperiodic spaces, e.g.,
following ~Dr.~ or ~Mrs.~.
I do want to be aware of those spaces; thankfully there is
a face for that.
#+begin_src emacs-lisp
(custom-theme-set-faces
 'user
 '(nobreak-space ((t (:underline t)))))
#+end_src

*** Deprecated whitespace highlighting

I previously used ~whitespace-style~ to highlight
trailing whitespace; however, I find this feature intrusive,
so I avoid it.

If it is wanted later, then I should add to the list
#+begin_example emacs-lisp
(face trailing)
#+end_example
We need to add ~face~ to the list, to enable using faces
to highlight whitespace.

Note there is no way to visualise spaces only at the end of lines;
The visualisation is done by changing the display table,
and there is no ability to do so only in particular places.
Otherwise I would use that rather than highlighting.

** Rainbow delimiters                          :delimiter:

Above, I have settings for highlighting the delimiter
matching the one under the cursor.

The package ~rainbow-delimiters~ goes ones step further than
highlighting the delimiter matching the one under cursor;
it makes the matching of all delimiters
obvious by using various colours.
Each level of nesting uses a different colour.
#+begin_src emacs-lisp
(use-package rainbow-delimiters)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
(add-hook 'text-mode-hook #'rainbow-delimiters-mode)
#+end_src

One potential downside of ~rainbow-delimiters~ is that when
delimiter matching fails for reasons out of our control,
it can make the appearance of delimiters very poor in that buffer.

# Commented opening paren to match unmatched closing one in example below (
For instance, if we write a list using a parenthese after each label,
1) such as here,
those parentheses will be unmatched, and will be highlighted in red.

Worse, in some modes, it is not clear which delimiters
should be matched and which not.
In particular, delimiters which occur inside strings
in code should not be considered as proper delimiters,
and programming modes usually set up this behaviour.
But Org mode source blocks for those languages do not inherit
that behaviour, so such delimiters are not given any special status
and will be highlighted.

If we are working on another's Org code, there is little we can do
to alleviate this.
In my own Org code, I tend to insert comments to match the delimiters,
or avoid cases where this can occur (such as using periods after
the labels in lists).

For an example of this, see my settings for the Org emphasis
regular expressions, which require some commented out
delimiters to avoid breaking all delimiter matching
later in this file.

** Tab-bar                                     :tab:

I make use of ~tab-bar-mode~.
But note that these are not like tabs in most other applications,
where you have a tab for each open file!
That functionality is provided by ~tab-line-mode~,
not ~tab-bar-mode~, which is configured [[Tab-line][in its own section]].

~tab-bar-mode~ tabs instead act as saved window configurations.
#+begin_src emacs-lisp
(tab-bar-mode)
#+end_src

Show numbers on the tabs, so I can easily change tabs
using keyboard shortcuts by number.
#+begin_src emacs-lisp
(setq tab-bar-tab-hints 't)
#+end_src

Remove the close buttons on tabs.
Hitting them by mistake is annoying,
and I can close tabs by other commands easily enough.
#+begin_src emacs-lisp
(setq tab-bar-close-button-show nil)
#+end_src

Setting the ~tab-bar-format~ controls the order
in which elements appear on the tab bar.
We stick to just the tabs
(with group support, so if we group tabs
 the groups with collapse/expand),
and any global information (which would normally be shown in the modeline)
on the right side after a gap.
This includes the time, if we enable ~display-time-mode~.
#+begin_src emacs-lisp
(setq tab-bar-format
  '(tab-bar-format-tabs-groups
    tab-bar-format-align-right
    tab-bar-format-global))
#+end_src

In practice I've found that the right-aligned portion of the tab-bar
tends to run off onto another line, despite my best efforts.
This hack to the align right function will prevent that
by offsetting it by a few pixels.
#+begin_src emacs-lisp :var offset=5
; (eval-after-load "tab-bar"
;   (defun tab-bar-format-align-right ()
;     "Align the rest of tab bar items to the right."
;     (let* ((rest (cdr (memq 'tab-bar-format-align-right tab-bar-format)))
;            (rest (tab-bar-format-list rest))
;            (rest (mapconcat (lambda (item) (nth 2 item)) rest ""))
;            (hpos (progn
;                    (add-face-text-property 0 (length rest) 'tab-bar t rest)
;                    (string-pixel-width rest)))
;            (str (propertize " " 'display
;                             ;; The `right' spec doesn't work on TTY frames
;                             ;; when windows are split horizontally (bug#59620)
;                             (if (window-system)
;                                 `(space :align-to (- right (,hpos)))
;                               `(space :align-to (,(- (frame-inner-width)
;                                                      hpos)))))))
;       `((align-right menu-item ,str ignore)))))
#+end_src

** Tab-line                                    :tab:

In contrast to tab-bar mode (configured [[Tab-bar][here]]), the Emacs tab /line/ functions
as a list of recently visited buffers,
much more like tabs in browsers and other applications.

I make use of this mode to quickly shift between several files
without losing my original place.
A more disciplined approach would be to use bookmarks
(which are temporary in Emacs, much more like a physical bookmark
 than a browser one), but the tab-line suffices in the lack of those.
#+begin_src emacs-lisp
(use-package tab-line)
(global-tab-line-mode t)
#+end_src

I don't ever use the create button,
since a new tab is automatically created
whenever we visit a file without an existing tab.
And to save space, and prevent mis-clicks,
let's only show the close button for the active tab.
#+begin_src emacs-lisp
(setq tab-line-new-button-show nil)
(setq tab-line-close-button-show 'selected)
#+end_src

** A more noticable divider between windows    :window:

One problem with a fill column ruler is that it can seem like
it is the divider between windows.

For that reason, I like to have a more noticable divider
between windows. ~window-divider-mode~ provides this.
#+begin_src emacs-lisp
(window-divider-mode)
#+end_src

** COMMENT Dim buffers when not in use         :buffer:

The package ~dimmer~ will dim inactive windows to emphasise which
window has focus.
See its [[https://github.com/gonewest818/dimmer.el][Github page]].
#+begin_src emacs-lisp
(use-package dimmer)
#+end_src

Turn ~dimmer-mode~ on when Emacs starts.
#+begin_src emacs-lisp
(dimmer-mode)
#+end_src

Don't dim ~which-key~ and ~helm~ buffers.
#+begin_src emacs-lisp
(dimmer-configure-which-key)
(dimmer-configure-helm)
#+end_src

We can adjust the ~:foreground~ colours, the ~:background~ colours,
or ~:both~. With a dark theme, adjusting the background causes
the background to become lighter in inactive buffers,
which “looks wrong” (makes them looked like they have focus).
So I set this to just ~:foreground~ (which is the default anyway).
#+begin_src emacs-lisp
(setq dimmer-adjustment-mode :foreground)
#+end_src

I find the default dimming of ~20%~ to be too faint;
it is noticeable when changing windows, but it does not
remain noticeable enough later (e.g. when I look away from Emacs
then look back). Increasing that to ~30%~ seems to be sufficient,
while maintaing the readability of unfocussed buffers.
#+begin_src emacs-lisp
(setq dimmer-fraction 0.3)
#+end_src

Note that by default, all windows will be dimmer when Emacs
notices that it does not have focus in the windowing system.
I like this behaviour; it could be changed by changing
the variable ~dimmer-watch-frame-focus-events~.

The developer of the ~modus~ themes I use recommends
using RGB colour space with ~dimmer~;
they say that colour space “remains faithful
to the hueness of the colours used by the themes.”
#+begin_src emacs-lisp
(setq dimmer-use-colorspace :rgb)
#+end_src

** Dim windows when not in use                 :window:

I like to emphasise the window in focus, and a convenient way to do that
is to dim other windows.
Despite the “buffer” in its name, ~auto-dim-other-buffers~ mode does this.
#+begin_src emacs-lisp
(use-package auto-dim-other-buffers)
(auto-dim-other-buffers-mode t)
#+end_src

The Modus themes I use have extreme backgrounds;
absolute black for dark mode, and absolute white for light mode.
So for dark mode, “dimming” is not a true option;
by default the inactive windows become brighter instead!
So I modify the dimming face to instead make the text lighter
(or dimmer, in light mode).
#+begin_src emacs-lisp
(custom-theme-set-faces
 'user
 '(auto-dim-other-buffers-face
   ((t (:background unspecified :foreground "#888")))))
#+end_src
I find this has the added benefit of affecting more of the unfocused windows;
because auto dim other buffer mode only affects a conservative set of faces,
it usually doesn't touch parts of the windows with non-default background.
With this foreground modification, any default text on those non-default backgrounds
is also affected.

I previously used the package [[https://github.com/gonewest818/dimmer.el][dimmer]] to perform this function,
but unfortunately it's no longer actively maintained
and has some bugs.

** Automatically enlarge active window         :window:

The ~golden-ratio~ package adds a mode which
automatically enlarges with active window,
shrinking non-focused windows,
in order to allow for better focus on the current task
while keeping other windows mostly visible.
It's particularly effective when working from a laptop screen,
and I prefer it to constant manual resizing.
#+begin_src emacs-lisp
(use-package golden-ratio)
(golden-ratio-mode t)
#+end_src

I do find it works best with a two-column setup;
with a third column it tends to shrink one window
past the point of uselessness.
I'm experimenting with settings to potentially mitigate that.

On very wide monitors, we need to adjust the factor to prevent
#+begin_src emacs-lisp
(defun my/golden-ratio:wide () (interactive)
  (setq golden-ratio-adjust-factor 0.4)
  (message "Golden ratio window adjustments set for widescreen"))
#+end_src

Of course, we also need to be able to change it back.
#+begin_src emacs-lisp
(defun my/golden-ratio:default () (interactive)
  (setq golden-ratio-adjust-factor 1.0)
  (message "Golden ratio window adjustments set to default"))
#+end_src

And now, run those functions automatically based on the frame width
when it changes.
#+begin_src emacs-lisp
(defun my/optimize-golden-ratio-behavior (&optional frame)
  "Optimize the golden ratio window sizing behaviour when
  the current width of FRAME is greater than 300 columns.
  If FRAME is omitted, use the width of the currently selected frame."
    (let ((width (frame-width frame))
          (threshold 300))
      (message (format "Automatically optimizing golden ratio behaviour based on new frame width %d" width))
      (cond
       ((> width threshold) (my/golden-ratio:wide))
       (t                   (my/golden-ratio:default)))))

(advice-add 'consistent-window-splits-optimize :after 'my/optimize-golden-ratio-behavior)
#+end_src

Set it automatically now during init.
#+begin_src emacs-lisp
(my/optimize-golden-ratio-behavior)
#+end_src

** Kill the open init buffer and reopen it     :cleanup:

To ensure all these cosmetic changes are picked up,
kill my init buffer that we opened earlier and reopen it.
#+begin_src emacs-lisp
(kill-buffer "emacs-init.org")
(find-file my/emacs-init-file)
#+end_src

* Intermediate modes and intermediate mode-specific settings

** Org mode cosmetics                          :org:

**** Indent text based on heading by default

Although it wastes some space, it's generally easier to read
Org files if the contents of a heading are indented
based on the nesting of the heading.
#+begin_src emacs-lisp
(setq org-startup-indented t)
#+end_src

This can be overrode for particular files
by using the ~startup~ setting ~noindent~.
(I.e., put ~#+startup: noindent~ in the file.)

**** Hide emphasis markers by default

Emphasis markers, the markup syntax that
makes particular portions of the text bold, italicized, etc.,
do not generally need to be seen when deiting.
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

It is convenient to show the emphasis markers around point.
Otherwise it becomes tedious to edit emphasised text.

There have been a couple Reddit posts seeking to solve this problem.
First, [[https://www.reddit.com/r/orgmode/comments/43uuck/][this code]] which doesn't work for all emphasis markers.
#+begin_example emacs-lisp
(defun org-show-emphasis-markers-at-point ()
  (save-match-data
    (if (and (org-in-regexp org-emph-re 2)
             (>= (point) (match-beginning 3))
             (<= (point) (match-end 4))
             (member (match-string 3) (mapcar 'car org-emphasis-alist)))
        (with-silent-modifications
         (remove-text-properties
          (match-beginning 3) (match-beginning 5)
           '(invisible org-link)))
      (apply 'font-lock-flush (list (match-beginning 3) (match-beginning 5))))))
#+end_example

Then, [[https://www.reddit.com/r/orgmode/comments/dj5u1y][this more recent code]]
which adds more checks.
However, it seems to lag input a bit?
#+begin_example emacs-lisp
(defun sbr-org-toggle-emphasis-markers-at-point ()
  (interactive)
  (save-match-data
    (when (or (org-in-regexp org-emph-re 2)
              (org-in-regexp org-verbatim-re 2))
      (if (and (>= (point) (match-beginning 3))
               (<= (point) (match-end 4))
               (member (match-string 3) (mapcar 'car org-emphasis-alist))
               (get-text-property (match-beginning 3) 'invisible))
          (with-silent-modifications
            (remove-text-properties
             (match-beginning 3) (match-beginning 5)
             '(invisible org-link)))
        (apply 'font-lock-flush (list (match-beginning 3) (match-beginning 5)))))))
#+end_example

This is my attempt, combining the two to some extent.
:TODO: this doesn't always hide the characters after point leaves
#+begin_src emacs-lisp
(defun org-toggle-emphasis-markers-at-point ()
  (save-match-data
    (when (or (org-in-regexp org-emph-re 2)
              (org-in-regexp org-verbatim-re 2)
              (org-in-regexp org-link-any-re 2))
      (if (and (>= (point) (match-beginning 3))
               (<= (point) (match-end 4))
               (member (match-string 3) (mapcar 'car org-emphasis-alist)))
               ;; invisible check?
          (with-silent-modifications
            (remove-text-properties
             (match-beginning 3) (match-beginning 5)
             '(invisible org-link)))
        (apply 'font-lock-flush
          (list (match-beginning 3) (match-beginning 5)))))))
#+end_src

We run the above function after each command in an Org mode buffer.
:TODO: improve this functionality before use.
#+begin_src emacs-lisp
;(add-hook 'org-mode-hook
;  (lambda ()
;    (add-hook 'post-command-hook
;      'org-toggle-emphasis-markers-at-point nil t)))
#+end_src

**** Emphasis marker regexps

We can change the behaviour of Org emphasis markers
in terms of what characters are allowed to occur around
and between them; see
[[https://emacs.stackexchange.com/questions/41111/][this stack exchange post]]
for a sample setup, and
[[https://emacs.stackexchange.com/questions/13820][this other post]]
which is linked to from the first and which has more details.

Note that these settings are somewhat complicated
by the fact that they are used to construct regular expressions;
I lost a great amount of time to misplaced brackets and braces,
which made Org very confused about what I wanted,
since they were misinterpreted as regular expression syntax.
See my
[[https://stackoverflow.com/q/63805679/2041536][StackOverflow question]] on this.

Everything here must be set when Org is loaded.
#+begin_src emacs-lisp
(with-eval-after-load 'org
#+end_src

Only these characters are allowed to immediately precede
an emphasis character (left outer boundary characters).
Note that, as I am including a dash, it must be the first or final character,
and if including a closing bracket, it must be the first character.
See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Special.html#Regexp-Special][Special Characters in Regular Expression]].
#+begin_src emacs-lisp
  (setcar org-emphasis-regexp-components
    (concat
      ;; All whitespace characters.
      "[:space:]"
      (string
        ;; Opening delimiters; the comments prevent check-parens from getting mad 😀.
        ?\( ;;)
        ?\{ ;;}
        ?“  ;;”
        ?\[ ;;]
        ;; Dashes
        ?— ?– ?-))) ;; Do not move the dash. It will break the regexp.
#+end_src

Only these characters are allowed to immedately follow
an emphasis character (right outer boundary characters).
#+begin_src emacs-lisp
  (setcar (nthcdr 1 org-emphasis-regexp-components)
    (concat
      (string ;[
         ?\]) ;; Do not move the bracket. It will break the regexp.
      ;; All whitespace characters.
      "[:space:]"
      (string
        ;; Closing delimiters, with matching comments as above.
            ;;(
        ?\) ;;{
        ?\} ;;“
        ?”
        ;; Single quote
        ?'
        ;; Punctuation
        ?. ?? ?! ?, ?\; ?:
        ;; Dashes
        ?– ?— ?-))) ;; Do not move the dash. It will break the regexp.
#+end_src

Any characters are allowed as inner boundary characters,
/except/ for those listed here.
#+begin_src emacs-lisp
  (setcar (nthcdr 2 org-emphasis-regexp-components)
    "[:space:]")
#+end_src

Any characters are allowed between the inner border characters.
(The regular expression ~.~ matches any character).
#+begin_src emacs-lisp
  (setcar (nthcdr 3 org-emphasis-regexp-components)
    ".")
#+end_src

Only one newline allowed, though.
#+begin_src emacs-lisp
  (setcar (nthcdr 4 org-emphasis-regexp-components) 1)
#+end_src

Now we update the setting.
#+begin_src emacs-lisp
  (org-set-emph-re
    'org-emphasis-regexp-components
    org-emphasis-regexp-components))
#+end_src
NOTE the extra closing parenthesis to end the ~with-eval-after-load~!

***** Test it out

Here are tests of all the ~pre~ and ~post~ values at time of writing.
#+begin_src org
 *test*
(*test*
)
[*test*
]
{*test*
}
“*test*
”
-*test*
–*test*
—*test*

*test* ;
(
*test*)
[
*test*]
{
*test*}
“
*test*”
*test*-
*test*–
*test*—
*test*.
*test*?
*test*!
*test*,
*test*;
*test*:
#+end_src

**** Highlight math mode blocks

Org mode supports some LaTeX content inline.
In particular, we can use math mode syntax ~$…$~ and
subscripts ~_{…}~ and superscripts ~^{…}~.
We should highlight this content to emphasis its presence.
#+begin_src emacs-lisp
(setq org-highlight-latex-and-related '(latex script entities))
#+end_src

:TODO: What does ~entities~ refer to here?

**** Pretty bullets

Replace the plain asterisk bullets preceding Org headings
with fancier characters; a collection is used, so that
headings at different levels have different bullets.
#+begin_src emacs-lisp
(use-package org-bullets
  :hook (org-mode . org-bullets-mode))
#+end_src

**** Replace the ellipsis

By default, folded portions of the document are
presented by an (non-unicode) ellipsis. Let's replace that.
#+begin_src emacs-lisp
(setq org-ellipsis " ⮷")
#+end_src

**** Inline images

We can configure Org to automatically inline linked images
when opening documents.
#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)
#+end_src

**** Tag position

By default (as of Org 9.1.9),
tags get shifted to the 77th column.
But this causes blank lines to be inserted
when working on narrower screens.
I bump it down a good bit,
to ensure tags stay away from the right side of the screen.
#+begin_src emacs-lisp
(setq org-tags-column 48)
#+end_src

**** Adjusting image display size

I like to use inline images in Org mode, but of course
I don't want large images to be shown at full size!
Better to err on the side of making images too small,
so set the width of all images to be just 256 pixels;
big enough to see well, but not so large as to take the whole screen.
#+begin_src emacs-lisp
(setq org-image-actual-width 256)
#+end_src

**** Colour-coded source block backgrounds

We can colour the background of Org source blocks
based on the language. Neat!
The nuanced colours of the Modus themes are specifically intended
for this application.
#+begin_src emacs-lisp
(setq org-src-block-faces
  '(;; Lisps
    ("emacs-lisp" modus-themes-nuanced-magenta)
    ("elisp"      modus-themes-nuanced-magenta)
    ("clojure"    modus-themes-nuanced-magenta)

    ;; ML family functional
    ("purescript" modus-themes-nuanced-blue)
    ("elm"        modus-themes-nuanced-blue)
    ("haskell"    modus-themes-nuanced-blue)
    ("scala"      modus-themes-nuanced-blue)
    ("amm"        modus-themes-nuanced-blue)

    ;; Imperative and/or object oriented languages
    ("c"          modus-themes-nuanced-green)
    ("cpp"        modus-themes-nuanced-green)
    ("c++"        modus-themes-nuanced-green)
    ("csharp"     modus-themes-nuanced-green)
    ("java"       modus-themes-nuanced-green)
    ("javascript" modus-themes-nuanced-green)
    ("js"         modus-themes-nuanced-green)
    ("typescript" modus-themes-nuanced-green)
    ("ruby"       modus-themes-nuanced-green)
    ("python"     modus-themes-nuanced-green)
    ("sh"         modus-themes-nuanced-green)
    ("bash"       modus-themes-nuanced-green)
    ("zsh"        modus-themes-nuanced-green)
    ("go"         modus-themes-nuanced-green)

    ;; Logical, proof assistants and databases
    ("agda2"      modus-themes-nuanced-cyan)
    ("prolog"     modus-themes-nuanced-cyan)
    ("sql"        modus-themes-nuanced-cyan)

    ;; Plaintext, data and configuration formats
    ("text"       modus-themes-nuanced-red)
    ("org"        modus-themes-nuanced-red)
    ("markdown"   modus-themes-nuanced-red)
    ("html"       modus-themes-nuanced-red)
    ("latex"      modus-themes-nuanced-red)
    ("ditaa"      modus-themes-nuanced-red)
    ("dot"        modus-themes-nuanced-red)

    ;; Configuration and pure data
    ("xml"        modus-themes-nuanced-yellow)
    ("css"        modus-themes-nuanced-yellow)
    ("json"       modus-themes-nuanced-yellow)
    ("conf"       modus-themes-nuanced-yellow)
    ("docker"     modus-themes-nuanced-yellow)
    ("dhall"      modus-themes-nuanced-yellow)
    ("yaml"       modus-themes-nuanced-yellow)
    ("toml"       modus-themes-nuanced-yellow)))
#+end_src

We may need to restart Org for the changes to take effect.
#+begin_src emacs-lisp
(org-mode-restart)
#+end_src

***** COMMENT Test it out

The built in examples at least use the theme's nuanced colours.
The below examples assume the Modus Vivendi theme.
The Operandi colours are sometimes different.

Nuanced magenta for Lisps.
#+begin_example emacs-lisp
(defun my/cool-message (arg) (message "hello world"))
#+end_example

Nuanced blue for the ML family of functional languages.
#+begin_example purescript
main :: Effect Unit
main = do
  log "Hello World!"
#+end_example

Nuanced green for imperative languages,
including shell languages.
#+begin_example sh
echo "hello world"
#+end_example

Nuanced cyan for logical languages and proof assistants.
#+begin_example agda2
hello world
#+end_example

Nuanced red for HTML, LaTeX, and other languages
intended to produce documents to be read or viewed.
Plaintext and ASCII (or other) drawing languages included here.
#+begin_example html
<p>Hello World</p>
#+end_example

Nuanced yellow for configuration filetypes
and pure data languages, such as XML and JSON.
#+begin_example css
hello {
    world: Red;
}
#+end_example

** Org mode exportation settings               :org:

*** Export in the background

:TODO: This section needs a full cleanup.

Using ~latex-mk~, the export process for LaTeX takes a bit of time.
Tying up emacs during that time is annoying, so set the
export to happen in the background.
This setting can be modified locally in the export dialog frame
if desired by adding ~C-a~ to the export key sequence.
#+begin_src emacs-lisp
; (setq org-export-in-background t)
#+end_src

This works by spawning a new Emacs session in which the file is exported.
By default, that session would use this init file, but that's overkill
and wastes time; most of this init is not relevant for that session.
So, we'll set a different init file, constructed from the relevant
portions of this file.
#+begin_src emacs-lisp
; (setq org-export-async-init-file
;   "~/.config/emacs/org-async-init.el")
#+end_src

Some default settings.
#+begin_src emacs-lisp :noweb yes :tangle ~/.config/emacs/org-async-init.el
;; Org export init, tangled from my Emacs init
(require 'package)
(setq package-enable-at-startup nil)
(package-initialize)

(require 'org)
(require 'ox)
(require 'ox-extra)

(setq org-export-async-debug t)
#+end_src

:TODO: There must be a better way to generate this file.
These settings are from this exporting section.
#+begin_src emacs-lisp :noweb yes :tangle ~/.config/emacs/org-async-init.el
<<export-ignore-headlines>>
<<export-ignore-sections>>
<<export-preserve-indentation>>
<<export-htmlize>>
<<export-preserve-org-links>>
<<export-latex-compiler>>
<<export-latex-process>>
<<export-latex-classes>>
<<export-latex-beamer-classes>>
<<export-latex-minted>>
<<export-latex-hyperref>>
<<export-reveal>>
<<export-reveal-theme>>
<<export-reveal-title>>
<<export-reveal-extra-css>>
<<export-pandoc>>
<<export-headline-ids>>
<<export-sub-superscripts>>
#+end_src

We also need code evaluation settings, as code blocks may need
to be evaluated for export.
#+begin_src emacs-lisp :noweb yes :tangle ~/.config/emacs/org-async-init.el
<<evaluate-no-confirm>>
<<evaluate-languages>>
<<evaluate-ditaa-path>>
<<evaluate-shell-init>>
<<evaluate-plantuml-path>>
#+end_src

*** Ignoring content

**** Headings

Use the ~:ignore:~ tag on headlines to omit the headline when
exporting, but keep its contents.
#+Name: export-ignore-headlines
#+begin_src emacs-lisp
(ox-extras-activate '(ignore-headlines))
#+end_src

Alternatively, use the ~:noexport:~ tag to omit the headline
/and/ its contents.
#+Name: export-ignore-sections
#+begin_src emacs-lisp
;;;; noexport is in the list by default
;; (add-to-list 'org-export-exclude-tags "noexport")
#+end_src

**** Drawers

Ignore all drawers when exporting, by default.
#+begin_src emacs-lisp
(setq org-export-with-drawers nil)
#+end_src

*** Source code block indentation and colouring

I want to preserve my indentation for source code during export.
#+Name: export-preserve-indentation
#+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
#+end_src

The ~htmlize~ package preserves source code colouring on export to html.
(And presumably does a lot more I am not fully aware of).
#+Name: export-htmlize
#+begin_src emacs-lisp
(use-package htmlize)
#+end_src

Now, since I work with a dark theme (at least most of the time),
the source code colouring ~htmlize~ uses might not show up well
on the typically white background in the exported HTML.
This code from [[https://emacs.stackexchange.com/a/3512/30156][StackExchange]]
removes that problem; use the current background colour when exporting!
#+begin_src emacs-lisp
(defun my-org-inline-css-hook (exporter)
  "Insert custom inline css"
  (when (eq exporter 'html)
    (let ((my-pre-bg (face-background 'default)))
      ;;(setq org-html-head-include-default-style nil)
      (setq org-html-head-extra
            (format "<style>pre.src{background:%s;color:white;} </style>" my-pre-bg)))))

(add-hook 'org-export-before-processing-hook 'my-org-inline-css-hook)
#+end_src

The above was modified to not explicitly disable the default styling
(don't need it in my case, but also don't need to disable it)
and to use ~head-extra~ instead of ~head~, as ~head~ is overwritten
by the themes I use.

Note, if I set ~HTML_HEAD_EXTRA~ in an Org file,
then the background colour setting will be lost!

:TODO: It would be nice to pick up the background colour for that particular language, rather than default; I like the differing colours the Modus theme gives me for source blocks.

*** Don't change Org links to HTML

By default
(see the [[https://orgmode.org/manual/Links-in-HTML-export.html][manual]])
when exporting to HTML, Org will change ~.org~ links to ~.html~.
I don't want this; for instance, when teaching a course,
I like to link to both a generated HTML file and
the original Org source version of notes
(on my generated course homepage).
#+Name: export-preserve-org-links
#+begin_src emacs-lisp
(setq org-html-link-org-files-as-html nil)
#+end_src

If I mean to link to the HTML file, I will do so explicitly.

*** Require braces to denote sub/superscripts

Sometimes I want to export the characters ~_~ or ~^~.
However, Org allows these to be used for LaTeX style sub/superscripts,
so a lone ~_~ will be exported (to LaTeX at least)
as ~\_{}~ (and similarly for a lone ~^~).

In order to avoid this, but still allow for LaTeX style sub/superscripts,
we can use a setting to /require/ that sub/superscripts be enclosed in brackets
(which is my preference in any case).
#+Name: export-sub-superscripts
#+begin_src emacs-lisp
(setq org-export-with-sub-superscripts '{})
#+end_src

*** LaTeX export settings

**** Default LaTeX compiler

I use a lot of unicode, and I find ~xelatex~ and ~lualatex~
handle that more easily than ~pdflatex~.

From my experience so far, they seem pretty interchangable
for my purposes, so the decision of which to use is arbitrary.

Based on [[https://tex.stackexchange.com/questions/36/differences-between-luatex-context-and-xetex][this discussion on Stack Exchange]], LuaTeX seems the more
“up and coming” engine. I've used it for quite a while now,
and have found no problems with it.
#+Name: export-latex-compiler
#+begin_src emacs-lisp
(setq org-latex-compiler "lualatex")
#+end_src

**** LaTeX compilation process

I use ~latexmk~ to automatically run as many passes as needed
to resolve references, etc.
#+Name: export-latex-process
#+begin_src emacs-lisp
(setq org-latex-pdf-process
      '("latexmk -%latex -shell-escape -f %f"))
#+end_src

The flags/format specifiers are
| ~%latex~        | stands in for the latex compiler (defaults to the setting above) |
| ~-f~            | force continued processing past errors                           |
| ~%f~            | stands in for the (relative) filename                            |
| ~-shell-escape~ | necessary to use ~minted~                                          |

**** Custom document classes

I want a ~report~ class that begins with ~chapter~'s, rather than
~part~'s.
#+Name: export-latex-classes
#+begin_src emacs-lisp
(add-to-list
  'org-latex-classes
    '("report-noparts"
      "\\documentclass{report}"
      ("\\chapter{%s}" . "\\chapter*{%s}")
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
      ("\\paragraph{%s}" . "\\paragraph*{%s}")
      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

Sometimes, for creating slides, ~beamer~ is useful.
(Though I try to avoid it now; it feels low level to me).
#+Name: export-latex-beamer-classes
#+begin_src emacs-lisp
(add-to-list
  'org-latex-classes
    '("beamer"
      "\\documentclass[presentation]{beamer}"
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
#+end_src

**** Use minted for code blocks

First, make sure we load the ~minted~ package.
#+begin_src emacs-lisp
(add-to-list 'org-latex-packages-alist '("newfloat" "minted"))
#+end_src
The ~newfloat~ package can be used with ~minted~ with
a ~newfloat~ option to, for instance, support pagebreaks
in the float. See this StackExchange
[[https://tex.stackexchange.com/questions/254044/][post]]
if you want to set that up.

Now, we tell Org to use a ~minted~ environment,
rather than the default ~verbatim~, for code.
#+begin_src emacs-lisp
(setq org-latex-listings 'minted)
#+end_src

***** Default options for minted

One reason to use ~minted~ or ~listings~ over the simple ~verbatim~ is
that it can put decent-looking linebreaks where necessary
to prevent code running out of the margins.
This is controlled by the ~breaklines~ argument.

Probably there are other options I should add as well.

#+begin_src emacs-lisp
(setq org-latex-minted-options
  '(("breaklines" "true")))
#+end_src

***** Don't box unicode characters

Since I primarily export Agda code, which is full of unicode characters,
and most ~minted~ styles enclose those characters in a red ~fbox~,
I use this hack to disable ~fbox~'s inside ~minted~ environments.
(setq 'org-latex-packages-alist ())

#+begin_src emacs-lisp
(add-to-list 'org-latex-packages-alist
  "\\makeatletter
\\def\\dontdofcolorbox{\\renewcommand\\fcolorbox[4][]{##4}}
\\AtBeginEnvironment{minted}{\\dontdofcolorbox}
\\makeatother")
#+end_src

#+begin_src emacs-lisp
(add-to-list 'org-latex-packages-alist '("" "etoolbox"))
#+end_src

***** Treat Agda source as Haskell for listings

Unfortunately, ~minted~ doesn't support Agda,
so we simply have Org tell it that it's Haskell code.
#+begin_src emacs-lisp
(add-to-list 'org-latex-minted-langs '(agda2 "Haskell"))
#+end_src

***** Alternative: use listings in place of minted

As a step between using ~verbatim~ blocks and
using ~minted~ for source code,
we can use the ~listings~ package.

I found that ~listings~ caused odd typesetting of my Agda code;
code was out of order, particularly when using underscores,
and had oddly placed line breaks.
It may have been an issue with treating Agda code as Haskell;
I didn't diagnose much before switching to
using ~minted~ instead.

If the setup is desired, here is how to do it:
#+begin_example emacs-lisp
(setq org-latex-listings t) ;; As opposed to 'minted
(add-to-list 'org-latex-listings-langs '(agda2 "Haskell"))
#+end_example

**** Hyperref setup

The ~LaTeX~ ~hyperref~ package gives us better links.
I don't care for varying link colours, so I set them all to
the common blue colour.
#+Name: export-latex-hyperref
#+begin_src emacs-lisp
(setq org-latex-hyperref-template
  "\\hypersetup{
   pdfauthor={%a},
   pdftitle={%t},
   pdfkeywords={%k},
   pdfsubject={%d},
   pdfcreator={%c},
   pdflang={%L},
   colorlinks,
   linkcolor=blue,
   citecolor=blue,
   urlcolor=blue
   }
"
)
#+end_src

**** More flexible tables

Adding the ~tabularx~ package as a dependency gives us
more flexible tables when we need them.
See [[https://orgmode.org/manual/Tables-in-LaTeX-export.html][the Org manual]]
for information on how to export tables as ~tabularx~ tables.
#+begin_src emacs-lisp
(add-to-list 'org-latex-packages-alist
  '("" "tabularx"))
#+end_src

**** Image handling

I prefer to be explicit about how images are handled during export.
So, I turn off some defaults of how they are handled in LaTeX.

In particular, the LaTeX export backend by default
wraps images in ~center~ blocks; but this breaks the ability
to include images in tables.
#+begin_src emacs-lisp
(setq org-latex-images-centered nil)
#+end_src

:TODO: Is this setting wise?
#+begin_src emacs-lisp
(setq org-latex-image-default-width nil)
#+end_src

*** HTML export settings

**** Modify the postamble

By default, ~org-html-postamble~ is set to ~auto~.
We overwrite that to ~t~ so that the postamble is constructed
following the ~org-html-postamble-format~, which we set.
#+begin_src emacs-lisp
(setq org-html-postamble t)

(setq org-html-postamble-format
 '(("en"
    "<p class=\"author\">Author: %a</p>
     <p class=\"author\">Contact: %e</p>
     <script language=javascript> if (\"%d\") { `<p class=\"date\">Original date: %d</p>` } </script>
     <p class=\"date\">Last updated: %C</p>
     <p class=\"creator\">Created using %c</p>
     <p class=\"validation\">%v</p>")))
#+end_src

**** Ensure useful HTML anchors

This code snippet is borrowed from Musa's
[[https://github.com/alhassy/emacs.d/#Ensuring-Useful-HTML-Anchors][init]].

#+begin_quote
Upon HTML export, each tree heading is assigned
an ID to be used for hyperlinks.
Default IDs are something like org1957a9d,
which does not endure the test of time:
Re-export will produce a different id.
Here's a rough snippet to generate IDs from headings,
by replacing spaces with hyphens, for headings without IDs.
#+end_quote

I have made several edits.
- Begin by deleting all custom IDs which have apparently
  been added by this process.
- At each step, get the list of custom IDs from earlier in the file;
  if the ID we intend to add at this step is in that list,
  add a counter to the end, incrementing it until the ID is unique.
- Do not assign the custom id if
  the heading is tagged with ~:noexport:~ or ~:ignore:~;
  there's no point to adding one if the heading is not included
  in the export.
#+Name: export-headline-ids
#+begin_src emacs-lisp
(defun my/ensure-headline-ids (&rest _)
  "Org trees without a :CUSTOM_ID: property have the property
   set to be their headline.

   Trees whose headline are tagged with :ignore:
   are not given an ID.

   Trees whose headline are tagged with :noexport:
   and any subtrees of those trees are not given an ID.

   A prefix is used to identify IDs which were set by this process,
   so they can be recreated in case their headline changes.
   A postfix counter is used to prevent the case where
   trees cannot be linked to because they happen to share
   their heading with earlier trees.
  "
  (interactive)
  (let ((generated-ids ())
        (prefix "org-anchor-"))
    (cl-flet ((append-counter (x n) (concat x "^" (number-to-string n))))
      (org-map-entries
       (lambda ()
         (let* ((heading-components (org-heading-components))
                (headline (nth 4 heading-components))
                (tags     (nth 5 heading-components)))
           (if (and tags (string-match-p (regexp-quote ":noexport:") tags))
             ;; This heading is tagged as noexport.
             ;; Set org-map-continue-from to next heading at this level.
             ;; (Just moving to the next heading would not suffice;
             ;;  children of this heading are also not exported.)
             (setq org-map-continue-from (progn (org-goto-sibling)
                                                (line-beginning-position)))
             ;; Otherwise, check if this heading is tagged as ignore.
             (unless (and tags (string-match-p (regexp-quote ":ignore:") tags))
               ;; Otherwise, we want to check this heading's custom ID.
               (let ((id (org-entry-get nil "CUSTOM_ID")))
                 ;; If `id` was not found, or if it seems to have been generated by this function,
                 ;; proceed to generate a new custom ID.
                 (unless (and id (not (string-prefix-p prefix id)))
                   ;; Create the id. Concatenate the prefix...
                   (let ((new-id (concat prefix
                                     ;; ...with this heading's headline
                                     ;; (Note that spaces are not allowed in links;
                                     ;;  substitute dashes for any found.)
                                     (s-replace " " "-" headline))))
                          (push new-id generated-ids)
                     ;; Finally, add a counter of the number of
                     ;; previous occurrences of this id, to prevent repetition.
                     (let ((unique-id (append-counter
                                        new-id
                                        (seq-count (lambda (x) (string-equal x new-id))
                                                   generated-ids))))
                       (org-entry-put nil "CUSTOM_ID" unique-id)))))))))))))

;; Whenever html & md export happens, ensure we have headline ids.
(advice-add 'org-html-export-to-html :before 'my/ensure-headline-ids)
(advice-add 'org-md-export-to-markdown :before 'my/ensure-headline-ids)
#+end_src

*** Additional export formats

**** Org Reveal

I make use of ~org-reveal~ to create ~reveal.js~ slide decks.
This is way easier than dealing with ~beamer~ in LaTeX,
and results in much more attractive and better organised slides.
#+Name: export-reveal
#+begin_src emacs-lisp
(use-package ox-reveal)
#+end_src

If we're somewhat lazy, we to could keep
a local copy of the ~reveal.js~ packages,
and then point to it with the ~org-reveal-root~ variable.
More proactively, we can include the repo as a subrepo
of whatever project we're working on.
:TODO: Add instructions on how to do that here.

***** Theme

~reveal.js~ comes with many themes; ~black~ is the current default
at time of writing this. I set it just to be sure it stays consistent.

#+Name: export-reveal-theme
#+begin_src emacs-lisp
(setq org-reveal-theme "black")
#+end_src

At the time of writing, the included themes are
- ~black~: Black background, white text, blue links
- ~white~: White background, black text, blue links
- ~league~: Gray background, white text, blue links
- ~beige~: Beige background, dark text, brown links
- ~sky~: Blue background, thin dark text, blue links
- ~night~: Black background, thick white text, orange links
- ~serif~: Cappuccino background, gray text, brown links
- ~simple~: White background, black text, blue links
- ~solarized~: Cream-colored background, dark green text, blue links
(list from the [[https://github.com/hakimel/reveal.js/#theming][~reveal.js~ github]]).

***** Title page

The default title slide includes title and date, with the formatting
#+begin_src html
<h1 class="title">%t</h1>
<p class="date">Created: %d/p>
#+end_src
where ~%t~ stands for the document title and ~%d~ stands for the date.

I prefer a slightly smaller title, and additionally include
- the author name (~%s~) and
- the author email (~%a~).
#+Name: export-reveal-title
#+begin_src emacs-lisp
(setq org-reveal-title-slide
  "<h2 class=\"title\">%t</h2>
   <h3>%s</h3>
   <h4>%a</h4>
   <h5>%d</h5>")
#+end_src

**** Pandoc export formats

~ox-pandoc~ is “another exporter that translates Org-mode file to various other
formats via Pandoc”.

I don't make much use of it, but it more flexible, and so has
lots of options which make be useful in the future.

#+Name: export-pandoc
#+begin_src emacs-lisp
(use-package ox-pandoc)
#+end_src

*** Export markdown blocks as HTML

If we are given some markdown we wish to place into an Org file,
we can of course convert it to Org and place it appropriately.

If we're only interested in exporting to HTML, though,
we can more easily just put the markdown into a ~markdown~ ~src~ block,
and it can automatically be evaluated into HTML.

Note the result will not be visible in PDF exports!

For the basic process,
see https://christiantietze.de/posts/2020/10/org-babel-markdown-to-html/

First, we need Org babel functions for markdown;
apparently, this ten-year old (at time of writing) code
—https://github.com/tnoda/ob-markdown/—
that does not seem to be in a package repository is
the best candidate.
#+begin_src emacs-lisp
(use-package markdown-mode)
(require 'ob-markdown)
#+end_src
I have included this repository in [[./elisp/ob-markdown]] as a Git subtree.
See [[Git subtrees]] for instructions on maintaining that subtree, if necessary.

Now we instruct Org mode to, by default,
wrap the results of evaluating ~markdown~ blocks in ~example html~ blocks,
and then export those results.
Again, note that nothing will show up in LaTeX exports!
#+begin_src emacs-lisp
(add-to-list 'org-babel-default-header-args:markdown
             '(:results . "output verbatim html"))
(add-to-list 'org-babel-default-header-args:markdown
             '(:exports . "results"))
#+end_src

*** Letters

When writing a letter, I use
[[https://www.ctan.org/pkg/scrlttr2][the Koma-Script letter class]]
for LaTeX, rather than the default letter class.
There is a nice package giving support for using Org mode
to organise the letter.
#+begin_src emacs-lisp
(require 'ox-koma-letter)
#+end_src

Here's a sample Org document to produce a simple letter.
I have it set to tangle to [[/tmp/letter-template.org]],
so I can quickly copy it when I want to write a letter.
#+begin_src org :tangle /tmp/letter-template.org
#+Title: A title for the produced PDF, not shown on the page unless set to do so
#+Author: Mark Armstrong
#+Date: The date

,* My contact info                               :noexport:

#+Email: markparmstrong@gmail.com
#+Phone_number: 111-111-1111
#+URL: armkeh.github.io

,* Preamble                                      :noexport:

#+Subject: Computer programming part-time/summer camp instructor position

Disregard the title. Use only subject, and center it.
#+Options: title:nil subject:centered

Include my email, phone and URL in my address.
Make sure to set these above!
#+Options: email:t phone:t url:t

Don't print the foldmarks.
#+Options: foldmarks:nil

#+LCO: UScommercial9

,* To                                            :to:

Their mailing address

,* From                                          :from:

My mailing address

,* Dear recipient,

Here is my awesome letter.

,* All the best,                                 :closing:

Mark Armstrong
#+end_src

** A completion framework; Ivy, Counsel and Swiper :completion:

:TODO: Better documentation here.

*** Ivy

#+begin_src emacs-lisp
(use-package ivy
  :config
  (ivy-mode 1)
#+end_src

Add recent files and bookmarks to ~ivy-switch-buffer~.
#+begin_src emacs-lisp
  (setq ivy-use-virtual-buffers t)
#+end_src

Display both the index and the count in the current candidate count.
#+begin_src emacs-lisp
  (setq ivy-count-format "(%d/%d) ")
#+end_src

Enable minibuffer commands in the minibuffer.
#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)
#+end_src

# End the settings
#+begin_src emacs-lisp
)
#+end_src

*** Swiper

#+begin_src emacs-lisp
(use-package swiper
  :config
  ;; (global-set-key "\C-r" 'swiper)
  (global-set-key (kbd "C-s") 'swiper))
#+end_src

*** Counsel

:TODO: Move keybindings to General settings.
#+begin_src emacs-lisp
(use-package counsel
 :config
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file))
#+end_src

*** Prescient

#+begin_quote
~prescient.el~ is a library which sorts and filters lists of candidates,
such as appear when you use a package like Ivy or Company.
Extension packages such as ~ivy-prescient.el~ and ~company-prescient.el~ adapt
the library for usage with various frameworks.
#+end_quote

In particular, I like to have recently run invoked commands appear
as the first suggestions when I use ~M-x~.
#+begin_src emacs-lisp
(use-package prescient)
(use-package ivy-prescient)
(ivy-prescient-mode)
#+end_src

** COMMENT Improving search; CTRLF (control f) :movement:

https://github.com/raxod502/ctrlf

Can I get over ~C-s~ not jumping to the minibuffer
if a search is already running?
If not, bring swiper back.
#+begin_src emacs-lisp
(use-package ctrlf)
(ctrlf-mode +1)
#+end_src

** COMMENT A completion framework; Selectrum   :completion:

https://github.com/raxod502/selectrum

#+begin_src emacs-lisp
(use-package selectrum)
(selectrum-mode +1)
#+end_src

** COMpleting ANYthing; Company                :completion:

:TODO: Review these settings, and consider reformatting to avoid open parenthese across codeblocks.

Install ~company~ and set it to be used everywhere.
#+begin_src emacs-lisp
(use-package company
  :diminish
  :config
  (global-company-mode 1)
  (setq
#+end_src

I do find it convenient to require fewer characters before
getting autocomplete suggestions.
#+begin_src emacs-lisp
   company-minimum-prefix-length 1
#+end_src

Search all open buffers for completion candidates.
#+begin_src emacs-lisp
   company-dabbrev-other-buffers "all"
   company-dabbrev-code-other-buffers "all"
#+end_src

Sort candidates by importance, then case, then in-buffer frequency.
#+begin_src emacs-lisp
   company-transformers '(company-sort-by-backend-importance
                          company-sort-prefer-same-case-prefix
                          company-sort-by-occurrence)
#+end_src

Align any annotations to completions to the right.
#+begin_src emacs-lisp
   company-tooltip-align-annotations t
#+end_src

Annotate the completions with numbers.
We can select an annotation with ~M-num~ instead
of navigating to it.
#+begin_src emacs-lisp
   company-show-quick-access t
#+end_src

Show up to ten candidates in a tooltip.
When we get to the bottom of the list, wrap.
#+begin_src emacs-lisp
   company-tooltip-limit 10

   company-selection-wrap-around t
#+end_src

Don't downcase by default,
but if I choose a completion with different casing
than my prefix, change the prefix casing.
#+begin_src emacs-lisp
   company-dabbrev-downcase nil
   company-dabbrev-ignore-case nil
#+end_src

Pause very briefly before offering completion.
This way if I am typing quickly it does not try to interrupt.
#+begin_src emacs-lisp
   company-idle-delay 0.3)
#+end_src

Rebind the controls for completion.
I find using ~return~ distruptive, as often I mean to insert a newline
instead of complete a suggestion.
Use ~tab~ instead.
Also, if documentation is available, ~C-d~ accesses it
in a new temporary buffer.
#+begin_src emacs-lisp
  :bind (:map company-active-map
              ;; Don't complete on return.
              ("<return>" . nil) ("RET" . nil)
              ;; Use tab instead.
              ("<tab>" . company-complete-selection)
              ("C-d" . company-show-doc-buffer)))
#+end_src

Pop up a tooltip when I hover on a completion that has documentation.
#+begin_src emacs-lisp
(use-package company-quickhelp
 :config
   (setq company-quickhelp-delay 0.1)
   (company-quickhelp-mode))
#+end_src

Add emoji support. For instance, ~:smile:~ completes to 😄.
#+begin_src emacs-lisp
(use-package company-emoji
  :config (add-to-list 'company-backends 'company-emoji))
#+end_src

** Snippets                                    :completion:

I use ~yasnippets~ for text expansion, and ~yankpad~ to organise my
snippets.

For inserting snippets, we require string manipulation functions
from the ~subr-x~ package (built-in).
#+begin_src emacs-lisp
(require 'subr-x)
#+end_src

#+begin_src emacs-lisp
(use-package yasnippet)
(yas-global-mode t)

(use-package yankpad)
(setq yankpad-file "~/dotfiles/emacs/yankpad.org")
#+end_src

Ignore major mode, always use defaults.
Yankpad will freeze if no org heading has the name of the given category.
#+begin_src emacs-lisp
(setq yankpad-category "Default")
#+end_src

~yas-wrap-around-region~ controls what is inserted for a snippet's
~$0~ field. A non-nil, non-character setting has it insert the
current region's contents (i.e. if we highlight a region and
invoke a snippet, the region will be wrapped).
#+begin_src emacs-lisp
(setq yas-wrap-around-region t)
#+end_src

~yas-indent-line~ controls how inserted snippets are inserted.
~fixed~ indicates the snippet should be indented to the column at point.
~auto~ instead causes each line to be indented using ~indent-according-to-mode~.
I set it to fixed because this is usually what I want; I know best, not the mode.
#+begin_src emacs-lisp
(setq yas-indent-line 'fixed)
#+end_src

*** Interacting with Company

Taken without additional commentary for now from Musa's init.
#+begin_src emacs-lisp
;; Add yasnippet support for all company backends
;;
(cl-defun my/company-backend-with-yankpad (backend)
  "There can only be one main completition backend, so let's
   enable yasnippet/yankpad as a secondary for all completion
   backends.

   Src: https://emacs.stackexchange.com/a/10520/10352"

  (if (and (listp backend) (member 'company-yankpad backend))
      backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yankpad))))

;; Set company-backend as a secondary completion backend to all existing backends.
(setq company-backends (mapcar #'my/company-backend-with-yankpad company-backends))
#+end_src

** Walking through undo history; undo-propose  :vc:

The ~undo-propose~ package is a fairly minimal addition to
the builtin undo features of Emacs
(which can be confusing, but are very powerful,
 since undo-ing is an action which can be undone).
#+begin_src emacs-lisp
(use-package undo-propose)
#+end_src

What ~undo-propose~ does is open a new, read-only buffer
in which the undoing is to be done
(~undo~ and ~undo-only~ are wrapped so as to be allowed,
 although the buffer is read-only).
It provides commands to
- overwrite the original buffer,
  - either as a single (squashed) action (~C-c C-s~),
  - or as the chain of undo actions performed (~C-c C-c~),
- run a diff against the original buffer (~C-c C-d~), or
- be discarded entirely (~C-c C-k~).

Notice that undo history can be viewed as
a very crude local version control.
Local in two senses;
- in space, because the history is only available on our current machine, and
- in time, because the history is lost when the buffer is closed
  (or Emacs closes).
Still, this history can be of use, and when combined with automatic backups
(see [[Organising automatic backups]] and [[Walking through backups; backup-walker]]),
and usually further an actual version control system such as Git,
we can be reasonably assured we will not find ourselves
wanting to recover some deleted work and being unable to.

*** What about undo-tree?

In the past, I have used ~undo-tree~ to visualise
the changes to a file as a tree,
allowing movement up and down branches as a local sort
of version control.
But the actual visualisation can sometimes cause lag,
and ~undo-tree~ has been known to cause corruptions
when undoing/redoing (though I have not experienced this personally).
For the moment, I will stick to the builtin undo behaviour,
with ~undo-propose~ to help visualise the changes.

** Walking through backups; backup-walker      :vc:

The ~backup-walker~ package gives us the resources
to actually make use of the backups Emacs generates as
a crude offline version control.
It enables us to traverse backwards and forwards in time
through the backups, seeing a diff at each step.
Try it out with ~backup-walker-start~,
and move back and forth with ~n~ and ~p~.
#+begin_src emacs-lisp
(use-package backup-walker)
#+end_src

** Jumping through the buffer by characters    :movement:

A bit of common wisdom to avoid RSI (repetivie strain injuries)
says to avoid moving between keyboard and mouse frequently;
leave your hands in a (properly relaxed and comfortable)
keyboard position as much as possible.
With this in mind, we should have ways to move the cursor
that don't involve the mouse, but also don't involve
mashing the arrow keys or similar.

[[https://github.com/abo-abo/avy][~avy~]] is a
“package for jumping to visible text using a char-based decision tree”.
We invoke a command, type one, two or a small handful of characters,
and then can use homerow keys to decide which instance of those characters
on-screen to jump to.
We can even jump to other windows!
#+begin_src emacs-lisp
(use-package avy)
#+end_src

** Viewing the working directory               :movement:

A common feature for modern text editors and IDEs
is a narrow left window (or in other terminology, frame),
showing the layout of the local directories and files as a tree,
allowing for quick opening of other files in the current project.

Of course, Emacs has packages that provide this;
[[https://github.com/Alexander-Miller/treemacs][Treemacs]] is one such.
#+begin_src emacs-lisp
(use-package treemacs)
#+end_src

Usually there is a unique Treemacs instance per Emacs frame.
(Side note:
  Treemacs has a notion of “[[https://github.com/Alexander-Miller/treemacs?tab=readme-ov-file#projects-and-workspaces][workspaces]]”,
  which allows you to establish multiple concurrent file trees
  and switch between them.)
Since I use tab-bar mode tabs, which are like separate frames,
I use treemac's tab-bar support to have an instance per tab.
#+begin_src emacs-lisp
(use-package treemacs-tab-bar)
(treemacs-set-scope-type 'Tabs)
#+end_src

Of course, the tree is much more useful if it shows the full context
of the project we are working in. But rather than treemac's workspaces,
I prefer the simpler approach of using a single file tree,
but following the current project
(which, in the lack of a project management system, falls back
 to the current git repository).
#+begin_src emacs-lisp
(treemacs-project-follow-mode t)
#+end_src

If I am keeping the Treemacs window open, I want it to not take
too much space. As we move the cursor through the list,
the full filepath of items is expanded in the echo area ansyway.
#+begin_src emacs-lisp
(setq treemacs-width 20)
#+end_src

Since the window is narrow, don't indent much.
#+begin_src emacs-lisp
(setq treemacs-indentation 1)
#+end_src

The ~treemacs-indent-guide-mode~ provides a nice indentation guide
for nested parts of the file tree, but I find it adds too much space around the guide.
Instead I just make my own guide by overriding the indentation string.
#+begin_src emacs-lisp
(setq treemacs-indentation-string "│")
#+end_src

Track the git status of files using Treemacs.
#+begin_src emacs-lisp
(treemacs-git-mode 'deferred) ;; Show status of files and directories using colours
(treemacs-git-commit-diff-mode t) ;; Track # of commits we're ahead/behind
(use-package treemacs-magit) ;; Fills in some gaps in the above.
#+end_src

Track changes to files and update the tree if necessary
(for instance, if files have had their git status changed).
#+begin_src emacs-lisp
(treemacs-filewatch-mode t)
#+end_src

Use the fringe indicator to compliment the highlighting
on the currently selected file's name in the tree.
#+begin_src emacs-lisp
(treemacs-fringe-indicator-mode 'always)
#+end_src

I find the all-the-icons icons less intrusive than the defaults.
Plus, it matches what I use with Dired.
#+begin_src emacs-lisp
(use-package treemacs-all-the-icons)
(treemacs-load-theme "all-the-icons")
#+end_src

* Final cosmetics

** Icon support

The ~all-the-icons~ package provides icons to prettify things
or replace certain text.
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

The ~all-the-icons-dired~ package adds icons
corresponding to file types next to files in the list.
#+begin_src emacs-lisp
(use-package all-the-icons-dired)
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src

By default, the icons are monochrome. Let's turn on the colour.
#+begin_src emacs-lisp
(setq all-the-icons-dired-monochrome nil)
#+end_src

Some packages, including the ~doom-modeline~, prefer ~nerd-icons~.
#+begin_src emacs-lisp
(use-package nerd-icons)
(with-demoted-errors "Error installing nerd-icons during init (was the network disconnected?): %S"
  (nerd-icons-install-fonts 'no-prompt))
#+end_src

** Modeline styling                            :theme:

The Emacs modeline is a line attached to the bottom of each Emacs window
which displays information about the current buffer.
Other programs tend to have a similar concept, though they tend
to have a single information line/panel for the whole OS window (frame).

It is possible to take an extremely minimal approach and hide the modeline,
or if using the ~tab-bar~, place its information there instead.
And I do move some of the more “global” information to the ~tab-bar~ instead.
But there is a lot of potential for displaying useful info in the modeline,
especially when we take control of it with a modeline styling package.

*** Add styling via Doom modeline

I previously used Spaceline, the Spacemacs modeline,
which is a very nice appearing modeline replacement.
Now prefer Doom modeline, which is a fair bit more “plain”,
but still very nice in appearance,
and is compatible with far more modeline additions
(in particular, the modeline scroll bar I like;
 see [[Add a little scrollbar to the modeline]]).
#+begin_src emacs-lisp
(use-package doom-modeline)
(doom-modeline-mode)
#+end_src

I find the Doom modeline takes a little too much
vertical space by default; it will always take
at least as much vertical space as needed for its contents,
so set its height to ~0~ to make it as short as possible.
#+begin_src emacs-lisp
(setq doom-modeline-height 0)
#+end_src

*** Set up my preferred modeline

With ~doom-emacs~, we define a modeline in two parts,
one for the left-hand-side and one for the right.
#+begin_src emacs-lisp
(doom-modeline-def-modeline 'my/doom-modeline
  ;; Left side
  '(window-number modals remote-host buffer-info buffer-encoding buffer-position)
  ;; Right side
  '(check major-mode minor-modes input-method process))
#+end_src

It's convenient to have a function to set my preferred modeline as the default.
#+begin_src emacs-lisp
(defun my/doom-modeline-setter ()
   (doom-modeline-set-modeline 'my/doom-modeline 'default))
#+end_src

Set the default modeline whenever Doom modeline starts
#+begin_src emacs-lisp
(add-hook 'doom-modeline-mode-hook 'my/doom-modeline-setter)
#+end_src

And set it now.
#+begin_src emacs-lisp
(my/doom-modeline-setter)
#+end_src

Disable mode-specific modelines, at least for now;
this is a point I could return to if I find they could be of use in certain modes.
#+begin_src emacs-lisp
(setq doom-modeline-mode-alist nil)
#+end_src

Some already existing buffers, including *Messages*, may have another modeline set.
We need to force them to correct it.
#+begin_src emacs-lisp
(dolist (stubborn-buffer '("*Messages*"))
  (with-current-buffer stubborn-buffer (doom-modeline-set-modeline 'my/doom-modeline)))
#+end_src
Note that some information, such as the current time and my unread email count,
I display in the ~global-mode-string~ which I include in my tab bar instead of here.

*** Adjust behaviour of modeline components

Do display an icon indicating if the file in the buffer has changed from the disk.
Note that even without this, the filepath will change colours when the file has been modified.
#+begin_src emacs-lisp
(setq doom-modeline-buffer-state-icon t)
#+end_src

The minor mode listing is disabled by default.
This also disables the ~minion~ button if using that
(which provides a pop-up menu which lists and allows toggling of minor modes).
#+begin_src emacs-lisp
(setq doom-modeline-minor-modes t)
#+end_src

*** Force update all existing modelines

For good measure, force all modelines to update.
#+begin_src emacs-lisp
(force-mode-line-update 'for-all-buffers)
#+end_src

** Flash on error

The doom themes package comes with a function to make
the mode line flash on error.
#+begin_src emacs-lisp
(use-package doom-themes)
(require 'doom-themes-ext-visual-bell)
(doom-themes-visual-bell-config)
#+end_src
I'd previously just used ~visible-bell~, but it's a bit nosier
than necessary.

** Add a little scrollbar to the modeline

While I disable the usual scrollbars to save space,
they can be useful for giving a visualisation
of where we are in the buffer.
There are a few ways to add such a visual representation
to the modeline instead; the ~mlscroll~ package
is one, and the small horizontal scrollbar it
can actually be used as a scrollbar. Neat!
#+begin_src emacs-lisp
(use-package mlscroll)
(setq mlscroll-right-align nil)
(setq mlscroll-alter-percent-position 'replace)
(mlscroll-mode 1)
#+end_src

** Show the clock

Let's display the current time, with updates every minute.

First set the format for the clock.
- ~%a~ for abbreviated day of the week name.
- ~%b~ for abbreviated month name.
- ~%d~ for day of the month.
- ~%R~ for hour and minute, separated by a ~:~, in 24-hour format.
#+begin_src emacs-lisp
(setq display-time-format "%a %b %d %R")
#+end_src

Do not show load and mail in the time string; I include that information separately.
#+begin_src emacs-lisp
(setq display-time-default-load-average nil)
(setq display-time-mail-file nil) ;; This is default, but I set it as documentation for myself.
#+end_src

Now activate the mode.
#+begin_src emacs-lisp
(display-time-mode 1)
#+end_src

I've found when using ~doom-modeline~ (and hence possibly other custom modelines),
the ~global-mode-string~ gets modified on me to not include the time string;
let's ensure it's added in.
Note that this section must then go after custom modeline setup.
#+begin_src emacs-lisp
(add-to-list 'global-mode-string "   " 'append) ;; Padding
(add-to-list 'global-mode-string 'display-time-string 'append)
#+end_src

** Indentation indicators/guides

Historically, I used [[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]] to
visualize indentation, which was fairly configurable
(supporting both character and background fill modes)
as well as fast. But it was never “pretty”.

The newer [[https://github.com/jdtsmith/indent-bars][indent-bars]] solves the aesthetics problem.
#+begin_src emacs-lisp
(use-package indent-bars)
(add-hook 'prog-mode-hook 'indent-bars-mode)
#+end_src

** Kill the open init buffer and reopen it     :cleanup:

To ensure all these cosmetic changes are picked up,
kill my init buffer that we opened earlier and reopen it.
#+begin_src emacs-lisp
(kill-buffer "emacs-init.org")
(find-file my/emacs-init-file)
#+end_src

* Final (nearly) modes and final mode-specific settings

** Org mode                                    :org:

*** Speed keys

Speed keys are single keystrokes which execute commands in an
~org~ file when the cursor is at the start of a headline.
They are particularly useful for quickly moving a headline around,
or promoting/demoting a headline (and all children headlines accordingly).
#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

To see the commands available, execute
#+begin_example emacs-lisp
(org-speed-command-help)
#+end_example

*** Automatic tables of contents

This package provides automatic maintainance of a table of contents
under any heading which is labelled with the ~:TOC:~ tag.
#+begin_src emacs-lisp
(use-package toc-org
  ;; Automatically update toc when saving an Org file.
  :hook (org-mode . toc-org-mode))
#+end_src

*** Custom TODO keywords

These words, when appearing at the start of a headline,
mark that headline as a TODO task in the appropriate state.
I've added =SOON=, =NEXT=, =WORKING=, =DELEGATED= and =CANCELLED=.
#+begin_src emacs-lisp
(setq org-todo-keywords
  '((sequence "TODO" "DELEGATED" "WORKING" "BACKBURN" "CONFIRMING" "OVERDUE" "|" "DONE" "CANCELLED")))
#+end_src

Note the ~"|"~ entry; headlines marked with any of the states
past that entry are considered to be completed.
Those before the ~"|"~ are still outstanding tasks.

*** Clock closing time for TODO items

Record the time a TODO task entered a completed state
in a ~CLOSED~ field under the heading.
This is entered automatically when using Org to switch between TODO states.
Using ~org-speedkeys~, you can cycle states
by using ~t~ on the leftmost asterisk of a heading.
#+begin_src emacs-lisp
(setq org-log-done 'time)
#+end_src

*** Allow alphabetical lists

While not frequently that useful, it is nice to be allowed
to label list items alphabetically.
Note that the labels used in the plaintext Org do not affect the labels
used in most export formats (at least HTML and LaTeX).
#+begin_src emacs-lisp
(setq org-list-allow-alphabetical t)
#+end_src

*** Agenda

#+begin_src emacs-lisp
(setq org-agenda-files
  '("~/logs/personal/todo.org"))
#+end_src

** COMMENT Alerts for emails                   :mail:

Deprecated because ~mu4e~ itself now puts the email count in the modeline for me.

The ~mu4e-alert~ package provides the ability to get
various kinds of alert about incoming mail using ~mu4e~.
#+begin_src emacs-lisp
(use-package mu4e-alert)
#+end_src

Use the Emacs ~notifications~ libraries to send
desktop notifications (OS-level notifications).
This should work on Linux systems.
We can set ~lib-notify~ instead (for Linux),
but this way we don't rely on that library being installed.
But in my current workflow, desktop notifications
are in fact an unnecessary distraction;
I already receive notifications in Emacs, on my phone
and on my watch. So this is commented out for now.
#+begin_src emacs-lisp
;;(mu4e-alert-set-default-style 'notifications)
;;(add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
#+end_src

Show the unread email count (or however we format the alert)
in the global information area, which usually shows on the modeline.
I actually show that on the tab-bar instead.
#+begin_src emacs-lisp
(mu4e-alert-enable-mode-line-display)
#+end_src

Only alert for emails coming into the inbox.
Don't worry about other mail directories.
(I direct some less urgent mail to other directories,
 and don't want to be bothered by notifications from them.)
Do include all mail in the inbox, even if it is read;
I follow a “zero inbox” approach, so the number of emails
in the inbox is the number of emails I still have to deal with today,
even if some or all are marked as read.
#+begin_src emacs-lisp
(setq mu4e-alert-interesting-mail-query
   (concat
      "flag:unread"
      "maildir:/Inbox"))
#+end_src

Only show the count of unread emails in the notifications,
not the senders or subjects.
:TODO: Does this stop the message spam?
#+begin_src emacs-lisp
(setq mu4e-alert-email-notification-types '(count))
#+end_src

** Dired

~dired~ (for DIRectory EDitor) is Emacs builtin utility
for browsing directories and operating on their contents.

Herein are my (fairly minimal) modifications to its behaviour.

*** File information

~dired~ makes use of switches for ~ls~.
#+begin_src emacs-lisp
(setq dired-listing-switches
      "--group-directories-first -aDgGhL --time-style \"+  %Y %b %d %H:%M  \"")
#+end_src

Here's a description of those single letter switches.
| ~-a~                        | do not ignore entries starting with .                      |
| ~-g~                        | long listing format, but do not list owner                 |
| ~-G~                        | in a long listing, don't print group names                 |
| ~-h~                        | print human readable size                                  |
| ~-L~                        | show information for /references/ rather than symbolic links |

In the past, I had also used ~-B~ to ignore entries
ending with ~~~, in order to ignore automatic Emacs backup files.
I now organise those files into a set directory,
so I do want to see them if they are somehow present.

*** Cosmetic

Don't display whitespace information via ~whitespace-mode~ in Dired buffers.
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook
  (lambda ()
     (setq-local whitespace-style nil)))
#+end_src

Highlighting the whole line we're on helps keep track of what file
the cursor is on.
#+begin_src emacs-lisp
(add-hook 'dired-after-readin-hook 'hl-line-mode)
#+end_src

** Which key                                   :completion:

~which-key-mode~ is a handy minor mode that shows us
possible completions as we type commands.
Very useful if you remember only a prefix of the command,
not the whole thing.
#+begin_src emacs-lisp
(use-package which-key)
(which-key-mode)
#+end_src

It is also useful for discovery of shortcuts;
occasionally it is enlightening to take some time
and browse the possible completions of prefixes as you type.

** Winner mode                                 :window:

~winner-mode~ allows us to undo or redo changes to window layouts.
See my keybindings for this above.
#+begin_src emacs-lisp
(winner-mode 1)
#+end_src

** Easier movement between windows – Windmove  :window:

The package ~windmove~ lets us jump between windows in a frame.
#+begin_src emacs-lisp
(use-package windmove)
#+end_src

(Keep in mind OS windows are known as /frames/ in Emacs terminology,
 and the term /windows/ refers to the panes within a frame.)

~windmove~ lets us move between windows with the arrow keys
while holding a key; by default, the key is ~shift~.
That conflicts with ~org~ though, so we could use
~windmove-default-keybindings~ to change it.

** Window numbers – Winum                      :window:

While ~windmove~ is wonderful, if we have several windows
in the frame, it can be tedious to move between them,
since it may required several commands in a row.
In the case, perhaps we prefer to jump straight to windows,
by assigning each window a number and jumping based on those numbers.
The ~winum~ package facilitates this.
#+begin_src emacs-lisp
(use-package winum)
(winum-mode)
#+end_src

** Ediff                                       :vc:

By default, when using the GUI, Ediff opens a new frame for
the controls for the Ediff session.
I typically use Emacs in fullscreen, and this additional frame
is usually unwelcome. Instead, use a window in the current frame.
#+begin_src emacs-lisp
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src

I prefer to see the files being compared side by side,
rather than split vertically.
#+begin_src emacs-lisp
(setq ediff-split-window-function 'split-window-horizontally)
#+end_src

** Magit                                       :vc:

Explicitly install Magit; “a Git Porcelain inside Emacs”.
This is a killer feature of Emacs; Magit not only simplifies
interation with Git, it also expands our capabilities
in many ways over the CLI.
:TODO: Explain some here or link to some examples?
#+begin_src emacs-lisp
(use-package magit)
#+end_src

“Forge allows you to work with Git forges, such as Github and Gitlab,
from the comfort of Magit and the rest of Emacs.”
I do not yet use this extensively, but mean to at some point,
in order to keep more of my work tasks in Emacs 😄.
#+begin_src emacs-lisp
(use-package forge
  :after magit)
#+end_src

*** Commit messages

Commit message subjects should be short and sweet.
Many sources suggest a soft limit of just 50 characters,
with 72 being a hard upper limit; this is even pseudo-enforced
on Github (at least), with characters after 72 being hidden by default.
(See [[https://cbea.ms/git-commit/][this post]] on well-written commit messages.)

To this end, Magit tries to enforce a line length of 72,
(actually 68, to avoid long words trailing off the end)
by forcefully breaking the line for you when you enter a space
if it is too long.

Unfortunately, this advice can conflict with other requirements
in the workplace; in particular
with [[https://www.conventionalcommits.org/en/][conventional commits]]
and adding ticket numbers to commit messages.

To avoid having to fight with Magit to un-break the line
in the case that I go over 72 characters,
I increase the allowance by a bit.
Let's go with 1.5 times the length.
#+begin_src emacs-lisp
(setq git-commit-summary-max-length 98)
#+end_src

** Show uncommitted changes to files as we view them :vc:

~magit~ is awesome; aside from the fine-grained control
over what to add from a file, its status buffer
gives a really nice way to review the changes to files
using Org-mode like folding.

But just a useful, or perhaps moreso, for reviewing changes to files
are the packages ~diff-hl~ and ~git-gutter~, which show
the status of lines by marking the gutter area
to show added and modified lines.
#+begin_src emacs-lisp
(use-package git-gutter)
(global-git-gutter-mode)
#+end_src

And it provides controls to jump between and act on those changes,
so for simple commits we may not even need the ~magit~ status buffer.
:TODO: Shortcuts to jump between and act on hunks. Probably a hydra! See Musa's setup.

** Minions; see and toggle minor modes         :simplify:

The ~minions~ package implements a handy pop-up menu
for toggling minor modes.
While I don't really care for a GUI menu for toggling,
it is a convenient way to view the minor modes that are active
(along with commonly used ones that are inactive),
without taking extra space on the modeline
or opening a help buffer.
#+begin_src emacs-lisp
(use-package minions)
(minions-mode 1)
#+end_src

** HTTP requests                               :programming:

The package [[https://github.com/federicotdn/verb][Verb]] allows
for organizing and sending API requests in Emacs buffers.
I use it as an alternative to applications
such as [[https://www.postman.com/][Postman]] or [[https://insomnia.rest/][Insomnia]].
Those applications are wonderful for
collaborating with a team on a shared collection of API requests,
but for my own purposes, organizing them in plaintext in Emacs
empowers me to better manage/backup requests using Org and ~git~,
and add extensible behaviour through Elisp.
#+begin_src emacs-lisp
(use-package verb)
#+end_src

Verb includes support for encoding requests within Org source blocks,
and using Babel to execute them.
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((verb . t)))
#+end_src
For example, we can write and send a request by typing ~C-c C-c~ within a block like this:
#+begin_src org
,#+begin_src verb :op send
get https://sample.api/endpoint
,#+end_src
#+end_src
or alternatively, see the request that would be executed by setting ~export curl~ instead:
#+begin_src org
,#+begin_src verb :op export curl
get https://sample.api/endpoint
,#+end_src
#+end_src
Other options for operation (~op~) and flags are available;
see https://github.com/federicotdn/verb?tab=readme-ov-file#babel-integration.

* Programming language modes and mode-specific settings

** COMMENT Language server protocol            :programming:

#+begin_src emacs-lisp
(setq lsp-keymap-prefix "C-c l")
(use-package lsp-mode)
#+end_src

Add integrations with some other packages.
#+begin_src emacs-lisp
(use-package lsp-ivy)
(use-package lsp-treemacs)

(with-eval-after-load 'lsp-mode
  (add-hook 'lsp-mode-hook 'lsp-enable-which-key-integration))
#+end_src

Squeeze the information for the symbol under the cursor,
which would usually be shown in a popup upon mouse hover,
onto the left of the frame.
Also include code actions there.
#+begin_src emacs-lisp
(use-package lsp-ui)
(setq lsp-ui-sideline-show-hover t)
(setq lsp-ui-sideline-show-code-actions t)
#+end_src

Customise the code action information shown in the global mode string
(which with my setup is shown in the upper right, in the tab bar,
 instead of on the modeline).
#+begin_src emacs-lisp
(setq lsp-modeline-code-actions-segments '(count name))
#+end_src

Also see error reports in the global mode string.
#+begin_src emacs-lisp
(with-eval-after-load 'lsp-mode
  ;; :global/:workspace/:file
  (setq lsp-modeline-diagnostics-scope :workspace))
#+end_src

** Language server protocol                    :programming:

*** Basics

The [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]] (LSP):
#+begin_quote
defines the protocol used between an editor or IDE and a language server
that provides language features like auto complete, go to definition,
find all references etc.
#+end_quote

Previously support for these features was built on a per-language,
per-editor basis. Now both language and editor developers
need only target the LSP for the two to interoperate.

Emacs has two major packages for LSP support:
- [[https://emacs-lsp.github.io/lsp-mode/][LSP mode]]
- and [[https://joaotavora.github.io/eglot/][Eglot]], which is built in to Emacs (as of Emacs 29)
  and hence is the “default”.

I am using Eglot, but may change my mind later;
abstracting to these variables in all the language settings below
simplifies the process of switching should I need to do so.
#+begin_src emacs-lisp
(setq-local my/language-server-mode-hook 'eglot-ensure)
(setq-local my/language-server-programs-list 'eglot-server-programs)
#+end_src

*** Eglot-specific

Ensure that Eglot is kept up-to-date:
#+begin_src emacs-lisp
(with-demoted-errors "Error updating eglot (or checking for update) during init (was the network disconnected?): %S"
  (eglot-upgrade-eglot))
#+end_src

*** COMMENT Interaction with Flycheck

# Disabled (temporarily at least), because I could not get Flycheck
# to display feedback from other backends while flycheck-eglot mode was active.
# And so far, with Go at least, I don't see obvious benefits from this mode.

“Glue” together Eglot and [[https://www.flycheck.org/en/latest/][Flycheck]],
the modern Emacs syntax checking extension.
#+begin_src emacs-lisp
(use-package flycheck-eglot
  :custom (flycheck-eglot-exclusive nil)
  :config (global-flycheck-eglot-mode 1))
#+end_src

By default, ~flycheck-eglot~ mode excludes feedback from backends
other than Eglot from Flycheck. I'd like to see that feedback;
in particular, in Go, ~go fmt~ offers important feedback.
In the future, I might make this more selective based on language.
#+begin_src emacs-lisp
;(add-hook 'flycheck-eglot-mode-hook (lambda () (setq flycheck-eglot-exclusive nil)))
#+end_src

** Debugging                                   :programming:

In the same way that [[Language server protocol][LSP]] establishes a common interface in order for
programming languages and programming tools to interoperate,
the Debug Adaptor Protocol aims to establish a standardized interface
for debuggers. ~Dape~ is an adaptor client for the DAP in Emacs.
#+begin_src emacs-lisp
(use-package dape)
#+end_src

** JSON                                        :programming:

#+begin_src emacs-lisp
(use-package json-mode)
#+end_src

** Dhall configuration language                :programming:

#+begin_src emacs-lisp
(use-package dhall-mode)
#+end_src

** Purescript                                  :programming:

#+begin_src emacs-lisp
(use-package purescript-mode)
#+end_src

** Elm                                         :programming:

#+begin_src emacs-lisp
(use-package elm-mode)
#+end_src

** Haskell                                     :programming:

#+begin_src emacs-lisp
(use-package haskell-mode)
#+end_src

** Go                                          :programming:

Activate Org babel support for Go.
:TODO: Commentary on how to evaluate Go code nicely.
#+begin_src emacs-lisp
(use-package ob-go)
#+end_src

#+begin_src emacs-lisp
(use-package go-mode)
;(use-package go-lint)
#+end_src

#+begin_src emacs-lisp
(add-hook 'go-mode-hook my/language-server-mode-hook)
#+end_src

Automatically follow ~gofmt~ rules.
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'gofmt-before-save)
#+end_src

If installed, add the additional Go linter, ~golangci-lint~, to the Flycheck checkers.
#+begin_src emacs-lisp
(when (executable-find "golangci-lint")
  (use-package flycheck-golangci-lint)
  (add-hook 'go-mode-hook 'flycheck-golangci-lint-setup))
#+end_src

** Java                                        :programming:

[[https://github.com/yveszoundi/eglot-java][eglot-java]] provides
some wrapping around the Eclipse JDT language server for Java.
In particular, it will handle installation of the language server,
which is convenient since it is not available in all package managers,
and I prefer to avoid manual installs.
#+begin_src emacs-lisp
(use-package eglot-java)
(add-hook 'java-mode-hook 'eglot-java-mode)
#+end_src

Keep the Java LSP server up-to-date.
#+begin_src emacs-lisp
(with-demoted-errors "Error updating (or checking for update of) Java LSP server during init (was the network disconnected?): %S"
  (eglot-java-upgrade-lsp-server))
#+end_src

Add keybindings for running ~main~ and tests (JUnit).
#+begin_src emacs-lisp
(general-java-define-key
 "r" 'eglot-java-run-main
 "t" 'eglot-java-run-test)
#+end_src

** Python                                      :programming:

Hook in to the Python language server; usually ~pylsp~.
#+begin_src emacs-lisp
(add-hook 'python-mode-hook my/language-server-mode-hook)
#+end_src

:TODO: Improve the below, which gives some basic ability to browse Python docs from within Emacs.
#+begin_src emacs-lisp
(use-package pydoc)

(cond ((executable-find "python")) ;; Leave pydoc command as default
      ((executable-find "python3") (setq pydoc-command "python3 -m pydoc")))
#+end_src

** Lua                                         :programming:

#+begin_src emacs-lisp
(use-package lua-mode)
#+end_src

** Typescript                                  :programming:

#+begin_src emacs-lisp
(use-package typescript-mode)
#+end_src

Use only two spaces per indentation level.
#+begin_src emacs-lisp
(setq typescript-indent-level 2)
#+end_src

#+begin_src emacs-lisp
(add-hook 'typescript-mode-hook my/language-server-mode-hook)
#+end_src

** YAML configuration language                 :programming:

:TODO: Commentary needed.
#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src

:TODO: Probably some better settings could be filled in, since I actually use this at work.

** TOML configuration language                 :programming:

:TODO: Commentary needed.
#+begin_src emacs-lisp
(use-package toml-mode)
#+end_src

** Common Lisp                                 :programming:

Org babel support for Lisp is builtin, so just ~require~ it.
#+begin_src emacs-lisp
(require 'ob-lisp)
#+end_src

:TODO: Commentary needed.
#+begin_src emacs-lisp
(use-package slime)
#+end_src

#+begin_src emacs-lisp
(setq slime-contribs                 '(slime-fancy)
      slime-complete-symbol-function 'slime-fuzzy-complete-symbol
      slime-net-coding-system        'utf-8-unix
      slime-lisp-implementations     '((sbcl  ("sbcl"))
                                       (abcl  ("abcl"))
                                       (clisp ("clisp"))))
#+end_src

Fill in the paths if necessary.
#+begin_src text
~/.guix-profile/bin/
~/.guix-profile/bin/
~/.guix-profile/bin/
#+end_src

** Geiser Emacs/Scheme                         :programming:

Org babel support for scheme is builtin, so just ~require~ it.
#+begin_src emacs-lisp
(require 'ob-scheme)
#+end_src

:TODO: Commentary needed.
#+begin_src emacs-lisp
(use-package geiser)
#+end_src

** Geiser Guile scheme support                 :programming:

:TODO: Commentary needed.
#+begin_src emacs-lisp
(use-package geiser-guile)
#+end_src

** Clojure                                     :programming:

Org babel support for clojure is builtin, so just ~require~ it.
#+begin_src emacs-lisp
(require 'ob-clojure)
#+end_src

:TODO: Commentary needed.
#+begin_src emacs-lisp
(setq org-babel-clojure-backend 'cider)
(use-package cider)
(setq cider-default-repl-command "lein")
#+end_src

** Ammonite (deprecated)                       :programming:
:Properties:
:header-args: :tangle no
:End:

~ob-ammonite~ interacts with the ~ammonite~ REPL for ~scala~.
Unfortunately it's been dropped off MELPA, apparently.
It should still be available on [[https://github.com/zwild/ob-ammonite][Github]].
If I ever come back to this, maybe I should fork the project,
or rebuild my own; it's not that large.
#+begin_src emacs-lisp
;; (use-package ob-ammonite)
#+end_src
Note that the ~scala~ source blocks are marked as ~amm~ source,
not actually ~scala~. See
[[https://github.com/zwild/ob-ammonite][the documentation]].

This code causes Ammonite ~amm~ blocks to export as ~scala~ blocks
in LaTeX so ~minted~ knows how to handle them.
This code inspired by a similar problem solved on
[[https://emacs.stackexchange.com/a/19941][StackExchange]].
#+begin_src emacs-lisp
(defun my/ammonite-src-to-scala-src (text backend info)
  "Translate Ammonite minted blocks resulting from LaTeX export
to Scala minted blocks."
  (when (org-export-derived-backend-p backend 'latex)
    (with-temp-buffer
      (insert text)
      (goto-char (point-min))
      (replace-regexp "\\(\\\\begin{minted}.*\\){amm}" "\\1{scala}")
      (buffer-substring-no-properties (point-min) (point-max)))))

(add-hook 'org-export-filter-src-block-functions 'my/ammonite-src-to-scala-src)
#+end_src

** Ditaa                                       :programming:

Ditaa is a neat little tool for producing images from ASCII diagrams.
It's great for simple diagrams in Org mode presentations,
as the source code can be embedded in the Org but hidden in the produced document,
replaced by the generated image.

Org babel support for Ditaa is builtin, so just ~require~ it.
#+begin_src emacs-lisp
(require 'ob-ditaa)
#+end_src

We need to point to the ~jar~ file for the Ditaa tool.
It should be in the path; if not we skip this setup step.
#+Name: evaluate-ditaa-path
#+begin_src emacs-lisp
(let ((ditaa-path (executable-find "ditaa")))
  (if ditaa-path (setq org-ditaa-jar-path ditaa-path)))
#+end_src

** Docker

#+begin_src emacs-lisp
(use-package dockerfile-mode)
#+end_src

#+begin_src emacs-lisp
(use-package docker)
#+end_src

** Cucumber, Gherkin

#+begin_src emacs-lisp
(use-package feature-mode)
#+end_src

** Nix LSP

On systems using Nix, we can install [[https://github.com/oxalica/nil][nil]],
a language server for the Nix language.
I assume here if ~nix~ is installed then so is the ~nil~ package;
this will cause an error if I have somehow not installed it
(it should be always installed, since it is in my Nix configuration).
#+begin_src emacs-lisp
(when (executable-find "nix")
  (add-hook 'nix-mode-hook my/language-server-mode-hook)
  (add-to-list my-language-server-programs-list '(nix-mode . ("nil"))))
#+end_src

** Fold code

https://www.reddit.com/r/emacs/comments/746cd0/comment/dnwi2x1/?utm_source=share&utm_medium=web2x&context=3
#+begin_src emacs-lisp
(defun toggle-fold ()
  (interactive)
  (save-excursion
    (end-of-line)
    (hs-toggle-hiding)))
#+end_src

Other options include origami and yafolding
hideshow is efficient and built in
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'hs-minor-mode)
#+end_src

* Session setup

Before anything, we opened my init file earlier;
kill that buffer now, so that it's not open if it's not wanted,
or if it is wanted, so that cosmetic changes we made above
will be properly applied.
#+begin_src emacs-lisp
(kill-buffer "emacs-init.org")
#+end_src

Also go ahead and close any windows that may have been created.
#+begin_src emacs-lisp
(delete-other-windows)
#+end_src

The remainder of these settings are segragated,
and then loaded based on the identity of the machine being used.

** Personal machines
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/dotfiles/emacs/personal-session.el
:END:

*** List paths and tab names

For maintainability, most files opened below and tab names are listed here.
#+begin_src emacs-lisp
(letrec ((log-dir      "~/logs/")
         (scratch-dir  "~/logs/scratch/")
         (dotfiles-dir "~/dotfiles/")
         (projects-dir "~/projects/")
         (emacs-dir    (concat dotfiles-dir "emacs/"))

         (emacs-init   (concat emacs-dir "emacs-init.org"))
         (yankpad-file (concat emacs-dir "yankpad.org"))

         (journal (concat log-dir "personal/journal.org"))
         (docket  (concat log-dir "personal/docket.org"))
         (scratch (concat log-dir "personal/scratch.org"))

         (dotfiles-tab-name "dotfiles")
         (logs-tab-name     "logs")
         (mail-tab-name     "mail")
         (homepage-tab-name "homepage"))
#+end_src

*** Create tabs

First, let's create some “consistent” tabs;
whatever projects I am working on, these tabs will always be present.
#+begin_src emacs-lisp
(tab-rename dotfiles-tab-name)
(tab-new)
(tab-rename logs-tab-name)
(tab-new)
(tab-rename mail-tab-name)
(tab-new)
(tab-rename homepage-tab-name)
#+end_src

Then, open a few “project” tabs as the rightmost.
I use the directory ~~/projects~ to collect various pieces of work,
so it makes sense to open that directory by default.
#+begin_src emacs-lisp
(tab-new)
(find-file projects-dir)
(tab-rename "🚧")
(tab-new)
(find-file projects-dir)
(tab-rename "🏗️")
(tab-new)
(find-file projects-dir)
(tab-rename "👷")
(tab-new)
(find-file projects-dir)
(tab-rename "🛠️")
#+end_src

*** Visit tabs and setup buffers

Now, let us visit the tabs, and set up the windows in them.
Since they're named (presumably uniquely),
we'll use ~tab-bar-switch-to-tab~ which takes a ~name~ argument.

My ~cascading-find-files~ sometime comes in handy here.

First, the ~init~ tab.
Here I want my Emacs init in my usual three window split
(large single window on the left, two vertically split windows on the right),
with the messages buffer on the upper right
and a help buffer preemptively opened in the lower right.
#+begin_src emacs-lisp
(tab-bar-switch-to-tab dotfiles-tab-name)
(find-file emacs-init)
(split-window nil nil 'right)      ; Normally would use `left' to leave the right in focus, but...
(describe-symbol 'describe-symbol) ; describe symbol will use the window not in focus.
(other-window 1)                   ; Switch to the help buffer on the right.
(split-window nil nil 'above)
(switch-to-buffer "*Messages*")
(other-window 1) ; Put focus on init file
#+end_src

The logs tab is similar, but with three of my logging files
with different subjects.
#+begin_src emacs-lisp
(tab-bar-switch-to-tab logs-tab-name)
(find-file journal)
(split-window nil nil 'left)
(find-file docket)
(split-window nil nil 'above)
(find-file scratch)
(other-window 1)
#+end_src

The ~email~ tab has my scratch file on the left
and my inbox on the right.
#+begin_src emacs-lisp
(tab-bar-switch-to-tab mail-tab-name)
(mu4e)
(split-window nil nil 'right)
(find-file scratch)
#+end_src

For my blog, open the homepage Org file and a magit buffer.
#+begin_src emacs-lisp
(let ((github-io-dir "~/projects/armkeh.github.io/"))
  (let ((github-io-main (concat github-io-dir "index.org")))
    (tab-bar-switch-to-tab homepage-tab-name)
    (find-file github-io-main)
    (split-window nil nil 'right)
    (magit-status-setup-buffer)))
#+end_src

**** Focus on the first tab

#+begin_src emacs-lisp
(tab-select 1)
#+end_src

**** Close the ~let~

#+begin_src emacs-lisp
)
#+end_src

** Check identity of machine and load session

:TODO: Commentary.
:TODO: Be more helpful if the identity is unknown; perhaps button actions to set it properly?

#+begin_src emacs-lisp
(let ((machine-identity-file "~/.this-machine"))
  (if (file-exists-p machine-identity-file)
      (let ((this-machine (f-read-text "~/.this-machine")))
        (pcase (string-trim-right this-machine)
          ("personal" (load "~/dotfiles/emacs/personal-session.el"))
          (otherwise  (message-box "Couldn't determine what this machine is for session setup. Put a correct identity in ~/.this-machine."))))
    ;; else, machine identity file doesn't exist
    (message "Init: Didn't find the machine identity file at ~/.this-machine, so don't know how to set up the session.")))
#+end_src

* Cleanup

** Check the contents of the (proper/system) init file

It is not uncommon for the Emacs init file to be modified
without my direct action;
either because of some setting change
I consent to without thinking about it,
or some well-meaning process making a change I presumably want.

It is for that reason that this file is not directly tangled to ~~/.emacs~.
Erasing those changes by re-writing the content
of that file every time I start Emacs is probably not what I actually want.

That said, I should be made aware of the fact that a change has been made;
either I will want to just undo the settings, or more likely, I will want
to migrate them to their proper place in this file.

Using the copy of the expected ~.emacs~ content which is tangled to ~/tmp/.emacs~ above,
this code checks the contents of ~~/.emacs~. If it is not as expected,
show a popup message and then displays a diff buffer to alert me to the changes.
#+begin_src emacs-lisp :noweb yes :results raw
(let* ((dotemacs-file "~/.config/emacs/init.el")
       (dotemacs-backup "/tmp/init.el")
       (dotemacs-contents
        (with-temp-buffer
          (insert-file-contents dotemacs-file)
          (buffer-string)))
       (dotemacs-expected
        (with-temp-buffer
          (insert-file-contents dotemacs-backup)
          (buffer-string))))
  (unless (equal dotemacs-contents dotemacs-expected)
    (message-box "~/.config/emacs/init.el content has been modified from my expected contents!\n\nOpening a diff buffer.")
    (diff dotemacs-file dotemacs-backup)))
#+end_src

Some notes about this:
- I initially attempted to accomplish this comparison by somehow
  comparing the text of the Emacs init file to the text of the
  ~src~ block above directly, avoiding the need to tangle that block to ~/tmp~.
  Unfortunately, I couldn't find a satisfying way to obtain the text
  of the ~src~ block in this file as a string.
  - Copying it manually raises issues if it ever changes, of course.
  - I could use noweb syntax to place its contents into this ~src~ block,
    but I could not make it a string, as it contains double quotes,
    and Emacs lacks a form for string literals.
    - I could convert it to a string using the ~string~ function,
      but then comments would be lost. I followed this line briefly anyway,
      trying to read in the contents of Emacs init file as Elisp code,
      and then compare the code instead of comparing strings.
      This gets a bit too complicated though and makes
      the difference reporting less satisfying, as it cannot show
      the actual file contents.


On startup, ensure my dotfiles README does not remain stale by regenerating it.
#+begin_src emacs-lisp
(my/dotfiles-readme-generate)
#+end_src

*** Why not use markdown?

We could, instead of producing the ~README.org~ file,
just as easily produce a ~README.md~ file
by switching out the export command above.

In fact, for a while, I was producing a markdown file for the README.

But the setup for internal links in the markdown files
Org produces involve randomised link anchors,
so every time Emacs was started there were (uninteresting!)
changes to the README file, even if nothing had changed with
the init file itself.

So, we instead use an Org file for the README.

** Prompt before quitting Emacs

It's rare that I actually want to close Emacs, so it's not an annoyance
to prompt first; in fact, it's much preferred to accidentally closing.
#+begin_src emacs-lisp
(setq confirm-kill-emacs 'yes-or-no-p)
#+end_src
Note that the prompt is skipped if we already have a “do ~x~ before exiting?”
prompt, such as for saving some files.

This is the very last setting, because if we don't make it this far,
I want to be able to fix the error that stopped us reaching here
and quit without being hassled.
