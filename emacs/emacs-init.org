#+Title: My literate Emacs initialisation file
#+Description: My literate emacs initialisation file.
#+Startup: indent

* Introduction

This is my ~emacs~ initialisation code, documented for my own understanding
in the future and for sharing with others.

I'm following [[https://alhassy.github.io/init/][Musa's]] example using an ~org~ file for this.

** Setting up ~.emacs~ to use this code

Create a symbolic link to this file in =~/.emacs.d/~,
then add to the bottom of =~/.emacs= these lines:
#+BEGIN_EXAMPLE emacs-lisp
;; BEGIN my edits

;; I've set up an init file following Musa's guide: https://alhassy.github.io/init/

;; Evaluate my init file.
(org-babel-load-file "~/.emacs.d/emacs-init.org")

;; Byte compile the file so that changes to emacs-init.org get picked up.
(byte-compile-file "~/.emacs")

;; END my edits
#+END_EXAMPLE

* Packages
** General

*** Add package repositories

 #+begin_src emacs-lisp
 (require 'package)
 (setq package-archives
    '(("melpa" . "https://melpa.org/packages/")
      ("gnu" . "https://elpa.gnu.org/packages/")
      ("org" . "http://orgmode.org/elpa/")))
 (package-initialize)
 #+end_src

*** COMMENT Set the load path for manually downloaded packages

(Currently I don't use manually downloaded packages)

 #+begin_src emacs-lisp
 (add-to-list 'load-path "~/Dropbox/Organisation/setup/emacs/downloaded-packages")
 #+end_src

** ~agda~ mode

We need Emacs to locate Agda mode. This command is put in ~.emacs~

#+begin_src emacs-lisp
(load-file (let ((coding-system-for-read 'utf-8))
                (shell-command-to-string "agda-mode locate")))
#+end_src

#+begin_src emacs-lisp
(require 'agda-input)
(require 'agda2-highlight)
#+end_src

*** Alternative problem highlighting

I find the background coloring used by Agda for incomplete pattern matching,
redundant clauses and clauses which do not hold definitionally hard to read
in general, and usually unreadable with different themes.

So I use set other indicators instead.

#+begin_src emacs-lisp
(set-face-attribute
  'agda2-highlight-coverage-problem-face
  nil ;; all frames
  :background nil
  :underline "dark red"
)
(set-face-attribute
  'agda2-highlight-reachability-problem-face
  nil ;; all frames
  :background nil
  :strike-through t
)
(set-face-attribute
  'agda2-highlight-catchall-clause-face
  nil ;; all frames
  :background nil
  :slant 'italic
)
#+end_src

*** Add unicode characters to Agda's translations

**** Punctuation

#+begin_src emacs-lisp
(add-to-list 'agda-input-user-translations '(";;" "﹔"))
(add-to-list 'agda-input-user-translations '(";;" "⨾"))
(add-to-list 'agda-input-user-translations '("|" "❙"))
(add-to-list 'agda-input-user-translations '("st" "•"))
#+end_src

**** Activate the new additions

#+begin_src emacs-lisp
(agda-input-setup)
#+end_src

*** Activate Agda input mode in ~text~ and ~prog~ modes

#+begin_src emacs-lisp
(require 'agda-input)
(add-hook 'text-mode-hook
       (lambda () (set-input-method "Agda")))
(add-hook 'prog-mode-hook
       (lambda () (set-input-method "Agda")))
#+end_src

** ~org~ mode

 #+begin_src emacs-lisp
 (require 'org)
 #+end_src

*** Hide emphasis markers by default

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

*** Source code block colouring

#+begin_src emacs-lisp
(require 'htmlize)
#+end_src

*** Allow for ignoring headlines (but not their contents) on export

#+begin_src emacs-lisp
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))
#+end_src

*** COMMENT Template expansion (<s Tab, etc.)

 #+begin_src emacs-lisp
 (require 'org-tempo)
 #+end_src

**** Emacs Lisp source template: <el

#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
     '("el" . "src emacs-lisp"))
#+end_src

**** (Org) Agda source template: <ag

#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
     '("ag" . "src org-agda"))
#+end_src

**** Interactive Way to C source template: <ic

#+begin_src emacs-lisp
 (add-to-list 'org-structure-template-alist
      '("ic" . "src c :tangle (currently-working-with \"name\")"))
#+end_src

**** Interactive Way to C header template: <ich

#+begin_src emacs-lisp
 (add-to-list 'org-structure-template-alist
      '("ich" . "src c :tangle (currently-working-with-header \"name\")"))
#+end_src

**** Verbatim template: <ver

 #+begin_src emacs-lisp
 (add-to-list 'org-structure-template-alist
      '("ver" . "verbatim"))
 #+end_src

**** Answer template: <ans

 #+begin_src emacs-lisp
 (add-to-list 'org-structure-template-alist
      '("ans" . "answer"))
 #+end_src

*** Highlight math mode blocks

 #+begin_src emacs-lisp
 (setq org-highlight-latex-and-related '(latex))
 #+end_src

*** LaTeX specific

**** ~org-latex-pdf-process~ (set to use ~latexmk~ with ~-lualatex~)

#+begin_src emacs-lisp
(setq org-latex-pdf-process
      '("latexmk -lualatex -f %f"))
#+end_src

~-f~ to “force continued processing past errors”
~%f~ for the (relative) file name

**** Document classes (customising outermost structure)

#+begin_src emacs-lisp
(add-to-list
  'org-latex-classes
    '("report-noparts"
      "\\documentclass{report}"
      ("\\chapter{%s}" . "\\chapter*{%s}")
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
      ("\\paragraph{%s}" . "\\paragraph*{%s}")
      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src
*** Export in the background

#+begin_src emacs-lisp
(setq org-export-in-background t)
#+end_src
** ~pdf-tools~

Need to “install” it each time emacs starts
#+begin_src emacs-lisp
(pdf-tools-install)
#+end_src

*** COMMENT Default to midnight mode

#+begin_src emacs-lisp
(add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
#+end_src

** ~yasnippet~

#+begin_src emacs-lisp
(require 'yasnippet)
(setq yas-snippet-dirs "~/Dropbox/Organisation/setup/emacs/snippets")
(yas-global-mode 1)
#+end_src

*** Make ~org~ mode “play nice” with ~yasnippets~

#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (setq-local yas/trigger-key [tab])
            (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))
#+end_src

* Cosmetics

** Always confirm before closing Emacs

#+begin_src emacs-lisp
(setq confirm-kill-emacs 'yes-or-no-p)
#+end_src

** Disable the splash screen

 #+begin_src emacs-lisp
 (setq inhibit-splash-screen t)
 #+end_src

** Disable the tool bar

 #+begin_src emacs-lisp
 (tool-bar-mode -1)
 #+end_src

** Themes

I use the ~doom-nord~ themes,
and toggle between the non-~light~ and ~light~ variants.

#+begin_src emacs-lisp
(load-theme 'doom-nord t)

(setq my-dark-theme 'doom-nord)
(setq my-light-theme 'doom-nord-light)

(defun disable-all-custom-themes ()
  "Disable all custom themes.
   Returns the previous highest precendence theme
   (nil if no themes were previously enabled).

   Implementation:
     Gets the highest precedence applied theme as the first element
     of custom-enabled-themes.

     Then iteratively disables all the themes in custom-enabled-themes.
  "
  (let ((most-recent-theme (car custom-enabled-themes)))
    (while (car custom-enabled-themes)
      (disable-theme (car custom-enabled-themes)))
    most-recent-theme
  )
)

(defun toggle-my-themes ()
  "Disable all custom, then try to toggle the themes
   my-dark-theme and my-light-theme, in that if one was
   the last applied theme, the other will be applied.

   If neither was the last applied theme, my-dark-theme
   will be applied as a default.
  "

  (let ((most-recent-theme (disable-all-custom-themes)))
    (if (eq most-recent-theme my-dark-theme)
        (load-theme my-light-theme)
        (load-theme my-dark-theme)
    )
  )
)

(eq (car custom-enabled-themes) my-dark-theme)
(disable-all-custom-themes)
(toggle-my-themes)
#+end_src

Make it “play nice” with ~org~

#+begin_src emacs-lisp
(doom-themes-org-config)
#+end_src

** Flash on error

#+begin_src emacs-lisp
(doom-themes-visual-bell-config)
#+end_src

#+begin_src emacs-lisp
;;(setq visible-bell 1)
#+end_src

** Display date and time

 #+begin_src emacs-lisp
 (setq display-time-day-and-date t)
 (setq display-time-24h-format t)
 (display-time)
 #+end_src

** Show the line and column numbers in the minibuffer

#+begin_src emacs-lisp
(line-number-mode 1)
(column-number-mode 1)
#+end_src
 
** Show line numbers on left (for ~text~ and ~prog~ mode)

#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'linum-mode)
(add-hook 'prog-mode-hook 'linum-mode)
#+end_src

Setting it globally would conflict with ~pdf-tools~.
#+begin_src emacs-lisp
;; (global-linum-mode t)
#+end_src

** Highlight matching parenthesis when cursor is near

 #+begin_src emacs-lisp
 (load-library "paren")
 (show-paren-mode 1)
 (transient-mark-mode t)
 (require 'paren)
 #+end_src

** Show trailing whitespace

#+begin_src emacs-lisp
(custom-set-variables '(show-trailing-whitespace t))
#+end_src

** Display directories first in Dired

#+begin_src emacs-lisp
(setq dired-listing-switches "--group-directories-first -al")
#+end_src

** COMMENT Show ruler at 80 characters (fill-column.el)

I had manually downloaded this package previously.

 #+begin_src emacs-lisp
 (require 'fill-column-indicator)
 (define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode t)))
 (global-fci-mode t)
 #+end_src

** COMMENT Use only one buffer for Dired (joseph-single-dired.el)

I had manually downloaded this package previously.

#+begin_src emacs-lisp
(eval-after-load 'dired '(progn (require 'joseph-single-dired)))
#+end_src

** Buffers to open upon startup

*** Emacs init (this file)

#+begin_src emacs-lisp
(find-file "~/Dropbox/Organisation/setup/emacs/emacs-init.org")
#+end_src

*** Emacs tips and tricks

#+begin_src emacs-lisp
(find-file "~/Dropbox/Organisation/setup/emacs/tips-and-tricks.org")
#+end_src

*** My phone log

#+begin_src emacs-lisp
(find-file "~/Dropbox/Organisation/log/phone-log.org")
#+end_src

*** My log (as the initial buffer)

#+begin_src emacs-lisp
(setq initial-buffer-choice "~/Dropbox/Organisation/log/log.org")
#+end_src

* Shortcuts
** Textual insert shortcuts

*** “⋯”
#+begin_src emacs-lisp
(global-set-key (kbd "C-c d q")
                (lambda () (interactive) (insert "“”") (backward-char)))
#+end_src

*** ~\begin{⋯}~

#+begin_src emacs-lisp
(global-set-key (kbd "C-c l b e")
                (lambda () (interactive) (insert "\\begin{}") (backward-char)))
#+end_src

*** ~\end{⋯}~

#+begin_src emacs-lisp
(global-set-key (kbd "C-c l e e")
                (lambda () (interactive) (insert "\\end{}") (backward-char)))
#+end_src

*** ~\item_~

#+begin_src emacs-lisp
(global-set-key (kbd "C-c l i")
                (lambda () (interactive) (insert "\\item ")))
#+end_src

*** \begin{code} ⋯ \end{code}

*TODO*: I should make this accept an argument, or make a version that accepts an argument

*TODO*: (more ambitious) Make this take into account indentation.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c l e c")
                (lambda () (interactive) (insert "\\begin{code}\n\n\\end{code}")
                                         (previous-line)))
#+end_src

** Org mode shortcuts
*** Moving subtrees

#+begin_src emacs-lisp
(global-set-key (kbd "C-c o s u")
                (lambda () (interactive) (org-move-subtree-up)))
(global-set-key (kbd "C-c o s d")
                (lambda () (interactive) (org-move-subtree-down)))
(global-set-key (kbd "C-c o s l")
                (lambda () (interactive) (org-promote-subtree)))
(global-set-key (kbd "C-c o s r")
                (lambda () (interactive) (org-demote-subtree)))
#+end_src

** ~dired~ shortcuts (C-c d _)
*** Home ~h~

#+begin_src emacs-lisp
(global-set-key (kbd "C-c d h")
                (lambda () (interactive) (dired "~")))
#+end_src

*** Dropbox ~d~

#+begin_src emacs-lisp
(global-set-key (kbd "C-c d d") (lambda () (interactive) (dired "~/Dropbox")))
#+end_src

*** Organisation ~o~

#+begin_src emacs-lisp
(global-set-key (kbd "C-c d o") (lambda () (interactive) (dired "~/Dropbox/Organisation")))
#+end_src

*** McMaster ~m~

#+begin_src emacs-lisp
(global-set-key (kbd "C-c d m") (lambda () (interactive) (dired "~/Dropbox/McMaster/")))
#+end_src

*** Thesis ~t~

#+begin_src emacs-lisp
(global-set-key (kbd "C-c d t") (lambda () (interactive) (dired "~/Dropbox/McMaster/Agda/thesis")))
#+end_src

*** Courses ~c~

**** 3ea3 ~e~

#+begin_src emacs-lisp
(global-set-key (kbd "C-c d c e") (lambda () (interactive) (dired "~/Dropbox/McMaster/3ea3")))
#+end_src

** ~magit~ shortcuts

#+begin_src emacs-lisp
(global-set-key (kbd "C-c g")
                'magit-status)
#+end_src

** General

*** Go to top/bottom of buffer (~M-<~, ~M->~ replacements)

#+begin_src emacs-lisp
(global-set-key (kbd "C-c b t")
                '(lambda () (interactive)
                         (beginning-of-buffer)))

(global-set-key (kbd "C-c b b")
                '(lambda () (interactive)
                         (end-of-buffer)))
#+end_src

*** ~F5~ to reload buffer

#+begin_src emacs-lisp
(global-set-key [f5]
                '(lambda () (interactive)
                         (revert-buffer nil t nil)))
#+end_src

*** Toggle my themes ~C-c t t~

#+begin_src emacs-lisp
(global-set-key (kbd "C-c t t")
                '(lambda () (interactive)
                 (toggle-my-themes)))
#+end_src

*** Disable all custom themes ~C-c t c~

#+begin_src emacs-lisp
(global-set-key (kbd "C-c t c")
                '(lambda () (interactive)
                 (disable-all-custom-themes)))
#+end_src

* Other

** Run my custom “dropbox start” command to ensure dropbox is running on the system

#+begin_src emacs-lisp
(start-process-shell-command "dropbox-start"
                             "*dropbox-start*"
                             "/opt/dropbox-filesystem-fix/dropbox_start.py")
#+end_src

* Scratch
