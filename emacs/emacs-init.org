#+Title: My literate Emacs initialisation file
#+Description: My literate emacs initialisation file.

* Introduction

This is my ~emacs~ initialisation code, documented for my own understanding
in the future and for sharing with others.

I'm following [[https://alhassy.github.io/init/][Musa Alhassy's]] example using
an ~org~ file for this.

** About me

#+begin_src emacs-lisp
(setq user-full-name "Mark Armstrong")
(setq user-mail-address "markparmstrong@gmail.com")
#+end_src

** Setting up ~.emacs~ to use this code

Create a symbolic link to this file in ~~/.emacs.d/~,
then add to the bottom of ~~/.emacs~ these lines:
#+BEGIN_EXAMPLE emacs-lisp
;; BEGIN my edits

;; Enable Emacs VC on symlinked files
(setq vc-follow-symlinks t)

;; Delete the old tangled and compiled init file.
(delete-file "~/.emacs.d/emacs-init.el")
(delete-file "~/.emacs.d/emacs-init.elc")

;; Load my init file.
(org-babel-load-file "~/.emacs.d/emacs-init.org")

;; END my edits
#+END_EXAMPLE

The separation of files ensures any outside edits to my
~.emacs~ are retained.

:TODO: check the content of .emacs on start; warn if it has changed

*** Why set ~vc-follow-symlinks~ here?

It's a setting I want anyway (it ensures Emacs's version control
works correctly on the target file), but why set it in ~.emacs~?

Since ~.emacs~ uses a symlink to this version controlled file,
having Emacs prompt me every time is annoying and slows my start up.

** Set a “custom” file

Emacs will, by default, insert all sorts of “custom” settings
into our ~.emacs~ file (or whichever of the default init locations we use),
especially those set via GUIs.

In order to avoid polluting that file, let's set it to use
a particular one. In fact, let's put it under my version control,
so I will notice changes to it.
#+begin_src emacs-lisp
(setq custom-file "~/Dropbox/Organisation/setup/emacs/custom.el")
(ignore-errors (load custom-file))
#+end_src

** A directory for non-package manager managed elisp files

For examples, this directory includes (symbolic links to)
elisp files I develop myself.
#+begin_src emacs-lisp
(add-to-list 'load-path "~/Dropbox/Organisation/setup/emacs/elisp")
#+end_src

* Table of contents                             :TOC_4:
- [[#introduction][Introduction]]
  - [[#about-me][About me]]
  - [[#setting-up-emacs-to-use-this-code][Setting up ~.emacs~ to use this code]]
    - [[#why-set-vc-follow-symlinks-here][Why set ~vc-follow-symlinks~ here?]]
  - [[#set-a-custom-file][Set a “custom” file]]
  - [[#a-directory-for-non-package-manager-managed-elisp-files][A directory for non-package manager managed elisp files]]
- [[#first-find-the-my-emacs-init-file][First: find the my emacs init file]]
- [[#elisp-code][~elisp~ code]]
  - [[#theme-change-hook][Theme change hook]]
  - [[#cascading-window-setup][Cascading window setup]]
- [[#various-packages][Various packages]]
  - [[#elisp-utilities][Elisp utilities]]
  - [[#package-repositories-and-use-package][Package repositories and ~use-package~]]
    - [[#set-the-load-path-for-manually-downloaded-packages][Set the load path for manually downloaded packages]]
    - [[#bootstrap-use-package][Bootstrap ~use-package~]]
    - [[#update-packages][Update packages]]
  - [[#e-vi-l-mode][E-vi-l mode]]
  - [[#completion-frameworks][Completion frameworks]]
    - [[#ivy-counsel-and-swiper][Ivy, Counsel and Swiper]]
      - [[#ivy][Ivy]]
      - [[#swiper][Swiper]]
      - [[#counsel][Counsel]]
    - [[#helm][Helm]]
  - [[#eshell][~eshell~]]
  - [[#agda-mode][~agda~ mode]]
    - [[#command-line-arguments][Command line arguments]]
    - [[#alternative-problem-highlighting][Alternative problem highlighting]]
    - [[#add-unicode-characters-to-agdas-translations][Add unicode characters to Agda's translations]]
      - [[#punctuation-and-parentheses][Punctuation and parentheses]]
      - [[#arrows][Arrows]]
      - [[#correct-mistakes-on-subscriptssuperscripts][Correct mistakes on subscripts/superscripts]]
      - [[#emoticons][Emoticons]]
      - [[#calccheck][Calccheck]]
      - [[#better-access-to-prime-symbols][Better access to prime symbols]]
      - [[#small-halfwidth-and-fullwidth-math-symbols][Small, halfwidth and fullwidth math symbols]]
      - [[#other][Other]]
      - [[#activate-the-new-additions][Activate the new additions]]
    - [[#activate-agda-input-mode-in-text-prog-and-artist-modes][Activate Agda input mode in ~text~, ~prog~ and ~artist~ modes]]
    - [[#org-agda-mode][Org Agda mode]]
  - [[#other-programming-languages][Other programming languages]]
    - [[#typescript][Typescript]]
    - [[#racket][Racket]]
    - [[#f][F#]]
    - [[#prolog][Prolog]]
    - [[#scheme][Scheme]]
    - [[#scala][Scala]]
  - [[#org-mode][Org mode]]
    - [[#capture][Capture]]
    - [[#agenda][Agenda]]
    - [[#speed-keys][Speed keys]]
    - [[#exporting][Exporting]]
      - [[#ignoring-content][Ignoring content]]
      - [[#source-code-block-indentation-and-colouring][Source code block indentation and colouring]]
      - [[#export-in-the-background][Export in the background]]
      - [[#dont-change-org-links-to-html][Don't change ~.org~ links to ~.html~]]
      - [[#latex-specific][LaTeX specific]]
      - [[#org-reveal][~org-reveal~]]
      - [[#ox-pandoc][~ox-pandoc~]]
      - [[#ox-tufte][~ox-tufte~]]
      - [[#html-specific][HTML specific]]
      - [[#require--to-denote-subsuperscripts][Require ~{}~ to denote sub/superscripts]]
    - [[#literate-programming][Literate programming]]
      - [[#execution][Execution]]
      - [[#editing-source-code][Editing source code]]
    - [[#cosmetics][Cosmetics]]
      - [[#indent-text-based-on-heading-by-default][Indent text based on heading by default]]
      - [[#hide-emphasis-markers-by-default][Hide emphasis markers by default]]
      - [[#emphasis-marker-regexps][Emphasis marker regexps]]
      - [[#require--to-denote-subsuperscripts-1][Require ~{}~ to denote sub/superscripts]]
      - [[#highlight-math-mode-blocks][Highlight math mode blocks]]
      - [[#pretty-bullets][Pretty bullets]]
      - [[#replace-the-ellipsis-][Replace the ellipsis ~...~]]
      - [[#tables][Tables]]
      - [[#inline-images][Inline images]]
      - [[#tag-position][Tag position]]
      - [[#adjusting-image-display-size][Adjusting image display size]]
    - [[#tables-of-contents][Tables of contents]]
    - [[#other-1][Other]]
      - [[#allow-alphabetical-lists][Allow alphabetical lists]]
      - [[#reveal-hidden-elements-if-they-are-edited][Reveal hidden elements if they are edited]]
      - [[#inline-tasks][Inline tasks]]
  - [[#org-struct-mode][Org struct mode]]
  - [[#pdf-tools][~pdf-tools~]]
    - [[#default-to-midnight-mode][Default to midnight mode]]
  - [[#yankpad-and-yasnippets][~yankpad~ and ~yasnippets~]]
    - [[#dont-add-a-final-newline-when-editing-snippet-files][Don't add a final newline when editing snippet files]]
  - [[#dired][~dired~]]
    - [[#file-information][File information]]
    - [[#cosmetic][Cosmetic]]
  - [[#magit][~magit~]]
  - [[#sending-email-send-mail][Sending email: ~send-mail~]]
    - [[#sending-html-mail][Sending HTML mail]]
  - [[#reading-email-mu4e-with-isync][Reading email: ~mu4e~ (with isync)]]
    - [[#basic-setup][Basic setup]]
      - [[#the-mail-directories][The mail directories]]
      - [[#get-mail-command][Get mail command]]
      - [[#updating-while-idle][Updating while idle]]
    - [[#viewing-emails][Viewing emails]]
      - [[#email-list][Email list]]
      - [[#individual-mail][Individual mail]]
      - [[#html-support][HTML support]]
    - [[#shortcuts-to-mailboxes-and-bookmarks][Shortcuts to mailboxes and bookmarks]]
    - [[#mu4e-maildirs-extension][~mu4e-maildirs-extension~]]
    - [[#message-composition-settings][Message composition settings]]
      - [[#flow][Flow]]
      - [[#html-support-nothing-to-see-here][HTML support (nothing to see here)]]
      - [[#changing-the-from-address-automatically][Changing the ~From~ address automatically]]
    - [[#enabling-org-like-folding-in-email-composition][Enabling Org-like folding in email composition]]
    - [[#miscellaneous][Miscellaneous]]
  - [[#docker][Docker]]
  - [[#winner-for-saving-and-restoring-window-layouts][~winner~ for saving and restoring window layouts]]
  - [[#exwm][~exwm~]]
  - [[#eaf-the-emacs-application-framework][~eaf~; the Emacs application framework]]
  - [[#command-logging][Command logging]]
- [[#key-bindings][Key bindings]]
  - [[#general-definers][~general~ definers]]
  - [[#invoke-processes][Invoke processes]]
    - [[#yankpad][~yankpad~]]
    - [[#dired-1][~dired~]]
      - [[#jumping-to-specific-buffers][Jumping to specific buffers]]
      - [[#files-not-already-opened][Files not(?) already opened]]
    - [[#eshell-1][~eshell~]]
    - [[#magit-1][~magit~]]
    - [[#mu4e][~mu4e~]]
    - [[#recentf][~recentf~]]
    - [[#list-processes][~list-processes~]]
  - [[#buffer-navigation-and-management-window-and-theme-management][Buffer navigation and management, window and theme management]]
  - [[#tab-management][Tab management]]
  - [[#other-2][Other]]
  - [[#number-pad-bindings][Number pad bindings]]
- [[#navigation][Navigation]]
  - [[#jump-between-windows-using-windmove][Jump between windows using ~windmove~]]
  - [[#change-scrolling-shortcut-behaviour][Change scrolling (shortcut) behaviour]]
- [[#cosmetics-1][Cosmetics]]
  - [[#fonts][Fonts]]
  - [[#themes][Themes]]
    - [[#toggling-the-themes][Toggling the themes]]
  - [[#displayingremoving-information-and-interface-elements][Displaying/removing information and interface elements]]
    - [[#remove-unnecessary-interface-elements][Remove unnecessary interface elements]]
    - [[#prompts-for-important-things][Prompts for important things]]
    - [[#the-mode-line][The mode line]]
      - [[#taking-the-spacemacs-modeline][Taking the Spacemacs modeline]]
      - [[#information-to-display][Information to display]]
      - [[#colour-the-modeline][Colour the modeline]]
      - [[#flash-on-error][Flash on error]]
      - [[#diminish-minor-mode-names][Diminish minor mode names]]
    - [[#show-line-numbers-on-left][Show line numbers on left]]
      - [[#for-older-versions-of-emacs][For older versions of Emacs]]
    - [[#delimiters-parentheses][Delimiters (parentheses)]]
      - [[#highlight-matching-delimiters][Highlight matching delimiters]]
      - [[#-and--are-not-delimiters][~<~ and ~>~ are not delimiters]]
      - [[#rainbow-delimiters][Rainbow delimiters]]
    - [[#whitespace-display][Whitespace display]]
      - [[#tabs][Tabs]]
      - [[#non-breaking-spaces][Non-breaking spaces]]
      - [[#deprecated--more-whitespace-highlighting][Deprecated – more whitespace highlighting]]
    - [[#show-ruler-at-70-characters-for-for-text-and-prog-mode][Show ruler at 70 characters for (for ~text~ and ~prog~ mode)]]
      - [[#deprecated--fci-mode][Deprecated – ~fci-mode~]]
    - [[#more-noticable-divider-between-windows][More noticable divider between windows]]
    - [[#dont-wrap-lines][Don't wrap lines]]
      - [[#disable-builtin-line-wrapping][Disable builtin line wrapping]]
      - [[#killing-lines-in-visual-line-mode][Killing lines in ~visual-line-mode~]]
    - [[#emoticons-1][Emoticons]]
    - [[#dim-buffers-when-not-in-use][Dim buffers when not in use]]
    - [[#tab-bar][Tab-bar]]
  - [[#automatically-revert-unchanged-files-which-change-on-the-disk][Automatically revert unchanged files which change on the disk]]
  - [[#show-possible-completions-as-i-type-shortcuts][Show possible completions as I type shortcuts]]
  - [[#provide-a-visualisation-of-my-undo-tree][Provide a visualisation of my undo tree]]
  - [[#session-setup-and-management][Session setup and management]]
    - [[#tabs-and-buffers-to-open-at-startup][Tabs and buffers to open at startup]]
      - [[#filepaths][Filepaths]]
      - [[#create-tabs][Create tabs]]
      - [[#visit-tabs-and-setup-buffers][Visit tabs and setup buffers]]
  - [[#smoother-scrolling][Smoother scrolling]]
  - [[#all-the-icons][“All the icons”]]
- [[#other-3][Other]]
  - [[#run-the-dropbox-start-command-to-ensure-dropbox-is-running-on-the-system][Run the “dropbox start” command to ensure dropbox is running on the system]]
  - [[#always-use-buffer-input-mode-in-mini-buffer][Always use buffer input mode in mini buffer]]
  - [[#copy-certain-files-to-my-google-drive-after-save][Copy certain files to my Google Drive after save]]
- [[#temporary-fixes][Temporary fixes]]
  - [[#org-strip-quotes][~org-strip-quotes~]]
- [[#ideas-for-additions][Ideas for additions]]
- [[#scratch][Scratch]]
  - [[#aliases-for-common-functions-particularly-useful-for-eshell][Aliases for common functions, particularly useful for eshell]]
  - [[#always-use-spaces-instead-of-tabs][Always use spaces instead of tabs]]

* First: find the my emacs init file

This way, if something goes wrong below, I am positioned to fix it
right away.
#+begin_src emacs-lisp
(find-file "~/.emacs.d/emacs-init.org")
#+end_src

* ~elisp~ code

This section defines some functions/variables referred to
below, that either don't fit in a particular place below,
or may be of general use.

** Theme change hook

[[https://www.reddit.com/r/emacs/comments/4v7tcj/][Apparently]],
there is no hook in Emacs for when a theme change occurs.
This code snippet, taken from the linked reddit post, defines one I can use.

#+begin_src emacs-lisp
(defvar after-load-theme-hook nil
  "Hook run after a color theme is loaded using `load-theme'.")
(defadvice load-theme (after run-after-load-theme-hook activate)
  "Run `after-load-theme-hook'."
  (run-hooks 'after-load-theme-hook))
#+end_src

** Cascading window setup

I set up my default desktop using a “cascading pattern”,
moving from larger windows in the upper right to
smaller windows in the lower left.

This works best with 2 or 3 windows, but it can be used for more.

The process is:
- If there are two or more files left to open:
  - Create a new window to the left.
  - Open the next file.
  - Move the focus to the left.
  - If there are two or more files left to open:
    - Create a new window below.
    - Open the next file.
    - Move focus down.
- Else if there is one file left to open,
  open it.
- Else, quit.
#+begin_src emacs-lisp
(defun cascading-find-files (files)
  "Opens a set of files in a cascading series of windows,
created by splitting the current window.
The windows begin in the upper right, with the first file,
and move left and then down, each window being half the size
of the previous (as long as this is possible)."
  (while files ;; there's at least one file to open
    (find-file (car files))
    (setq files (cdr files))
    (when files ;; there are two or more files
      (split-window nil nil 'left)
      (other-window 1)
      (find-file (car files)) ;; open second file on the left
      (setq files  (cdr files))
      (when files ;; there are still more files, so split horizontally
        (split-window nil nil 'below)
        (other-window 1)))))
#+end_src

* Various packages

** Elisp utilities

These utility packages simplify many families of tasks.

~s~ is for ~s~-tring management.
#+begin_src emacs-lisp
(use-package s)
#+end_src

~f~ is for ~f~-ile management.
#+begin_src emacs-lisp
(use-package f)
#+end_src

** Package repositories and ~use-package~

*** The repositories

#+begin_src emacs-lisp
(require 'package)
(setq package-archives
   '(("org" . "http://orgmode.org/elpa/")
     ("melpa" . "https://melpa.org/packages/")
     ("gnu" . "https://elpa.gnu.org/packages/")))
(package-initialize)
#+end_src

If needed, we can set ~package-archive-priorities~
to set the priority for these repositories.

*** Set the load path for manually downloaded packages

Also used as a scratch directory when I'm working on a package.
#+begin_src emacs-lisp
(add-to-list 'load-path "~/Dropbox/Organisation/setup/emacs/downloaded-packages")
#+end_src

*** Bootstrap ~use-package~

Using ~use-package~ allows me to easily migrate to new systems,
because I don't have to ~package-install~ every package I use.

Unless it's already installed, update the packages archives,
then install the most recent version of “use-package”.
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
#+end_src

I always want to download packages that aren't installed.
#+begin_src emacs-lisp
(setq use-package-always-ensure t)
#+end_src

*** Update packages

#+begin_src emacs-lisp
(use-package auto-package-update
  :config
  ;; Delete residual old versions
  (setq auto-package-update-delete-old-versions t)
  ;; Do not bother me when updates have taken place.
  (setq auto-package-update-hide-results t)
  ;; Update installed packages at startup if there is an update pending.
  (auto-package-update-maybe))
#+end_src

** COMMENT ~xah-fly-keys~

I've moved away from ~xah-fly-keys~, because resources regarding it
are more limited than ~evil~, and so I felt overwhelmed trying to
customise it. Further, many of my colleagues use ~evil~,
so it seems more beneficial to learn that, so I can more easily
integrate with them.

*** The setup

It seems to me that most Emacs users acknowledge that
Emacs' keybindings are not the best out there;
in particular, people refer to the “Emacs pinky” caused
by over-use of ~ctrl~.

One solution is ~evil-mode~, which brings Vim keybindings
to Emacs. Another is ~god-mode~. And yet another
alternative is ~xah-fly-keys~.

The reason I chose to try ~xah-fly-keys~ is that it places
the “arrow” keys in its “command mode” in the classic
⊥ pattern.

Do not override the usual ~ctrl~ keybindings when in insert mode.
I want Emacs to act “vanilla” when inserting,
so I don't feel uncomfortable if without ~xah-fly-keys~.
#+begin_src emacs-lisp
(setq xah-fly-use-control-key nil)
#+end_src

#+begin_src emacs-lisp
(use-package xah-fly-keys)

(xah-fly-keys-set-layout "qwerty")

(xah-fly-keys 1)
#+end_src

*** The basics

See the below keybinding chart for command mode.
Press ~M-space~ to enter command mode. I also bind ~S-c~ for this.
[[http://ergoemacs.org/misc/i/xah_fly_keys_layout_qwerty.svg]]

** E-vi-l mode

#+begin_src emacs-lisp
;(use-package evil)
;(evil-mode 1)
#+end_src

** Completion frameworks

*** Company

:TODOS:
- use company for appropriate modee in code blocks


Install ~company~ and set it to be used everywhere.
#+begin_src emacs-lisp
(use-package company
  :diminish
  :config
  (global-company-mode 1)
  (setq
#+end_src

I do find it convenient to require few characters before
getting autocomplete suggestions, but on my Chromebook
that slows things down far too much.
Let's require 4 characters before suggestions are provided.
#+begin_src emacs-lisp
   company-minimum-prefix-length 4
#+end_src

Search buffers using the same major mode for completion candidates.
Setting ~all~ instead would search all buffers.
#+begin_src emacs-lisp
   company-dabbrev-other-buffers t
   company-dabbrev-code-other-buffers t
#+end_src

Sort candidates by importance, then case, then in-buffer frequency.
#+begin_src emacs-lisp
;   company-transformers '(company-sort-by-backend-importance
;                          company-sort-prefer-same-case-prefix
;                          company-sort-by-occurrence)
#+end_src

Align any annotations to completions to the right.
#+begin_src emacs-lisp
   company-tooltip-align-annotations t
#+end_src

Annotate the completions with numbers.
We can select an annotation with ~M-num~ instead
of navigating to it.
#+begin_src emacs-lisp
   company-show-numbers t
#+end_src

Show up to ten candidates in a tooltip.
When we get to the bottom of the list, wrap.
#+begin_src emacs-lisp
   company-tooltip-limit 10

   company-selection-wrap-around t
#+end_src

Don't downcase by default,
but if I choose a completion with different casing
than my prefix, change the prefix casing.
#+begin_src emacs-lisp
   company-dabbrev-downcase nil
   company-dabbrev-ignore-case nil
#+end_src

Pause very briefly before offering completion.
This way if I am typing quickly it does not try to inte
#+begin_src emacs-lisp
   company-idle-delay 0.2)
#+end_src

Rebind the controls for completion. Don't use ~return~;
use ~tab~ instead.
Also, if documentation is available, ~C-d~ accesses it
in a new temporary buffer.
#+begin_src emacs-lisp
  :bind (:map company-active-map
              ;; Don't complete on return.
              ("<return>" . nil) ("RET" . nil)
              ;; Use tab instead.
              ("<tab>" . company-complete-selection)
              ("C-d" . company-show-doc-buffer))) 
#+end_src

Pop up a tooltip when I hover on a completion that has documentation.
#+begin_src emacs-lisp
(use-package company-quickhelp
 :config
   (setq company-quickhelp-delay 0.1)
   (company-quickhelp-mode))
#+end_src

Emoji support. :smile: → 😄
#+begin_src emacs-lisp
(use-package company-emoji
  :config (add-to-list 'company-backends 'company-emoji))
#+end_src

*** Ivy, Counsel and Swiper

I'm trying out Ivy and its related packages.

**** Ivy

#+begin_src emacs-lisp
(use-package ivy
  :config
  (ivy-mode 1)
#+end_src

Add recent files and bookmarks to ~ivy-switch-buffer~.
#+begin_src emacs-lisp
  (setq ivy-use-virtual-buffers t)
#+end_src

Display both the index and the count in the current candidate count.
#+begin_src emacs-lisp
  (setq ivy-count-format "(%d/%d) ")
#+end_src

Enable minibuffer commands in the minibuffer.
#+begin_src emacs-lisp
  (setq enable-recursive-minibuffers t)
#+end_src

# End the settings
#+begin_src emacs-lisp
)
#+end_src

**** Swiper

#+begin_src emacs-lisp
(use-package swiper
  :config
  ;; (global-set-key "\C-r" 'swiper)
  (global-set-key (kbd "C-s") 'swiper))
#+end_src

**** Counsel

#+begin_src emacs-lisp
(use-package counsel
 :config
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "s-y") 'counsel-yank-pop)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file))
#+end_src

*** Helm (deprecated)

I used a helm for a while.
Unfortunately, it was unacceptably slow on my machine;
often I would have to wait several seconds to complete
a ~M-x~ or ~C-h o~ as it searched for available function completions
—and simply typing the command was not an option, as hitting return
would select the default recommended completion.

The settings I had used were taken from Musa's init.
#+begin_example emacs-lisp
(use-package helm
 :diminish
 :init (helm-mode t)
 :bind (("M-x"     . helm-M-x)
        ("C-x C-f" . helm-find-files)
        ("C-x b"   . helm-mini)     ;; See buffers & recent files; more useful.
        ("C-x r b" . helm-filtered-bookmarks)
        ("C-x C-r" . helm-recentf)  ;; Search for recently edited files
        ("C-c i"   . helm-imenu)
        ("C-h a"   . helm-apropos)
        ;; Look at what was cut recently & paste it in.
        ("M-y" . helm-show-kill-ring)

        :map helm-map
        ;; We can list ‘actions’ on the currently selected item by C-z.
        ("C-z" . helm-select-action)
        ;; Let's keep tab-completetion anyhow.
        ("TAB"   . helm-execute-persistent-action)
        ("<tab>" . helm-execute-persistent-action)))
#+end_example

** ~eshell~

#+begin_src emacs-lisp
(use-package eshell)
#+end_src

Jeremias Queiroz posted a “fancy eshell prompt” setup on [[https://www.reddit.com/r/emacs/comments/6f0rkz/my_fancy_eshell_prompt/][Reddit]],
from which I derived this setup, but I've modified it to use
builtin face colours to improve portability across themes.
For instance, the ~default~ colour will most likely be white
for dark themes and black for light themes.
#+begin_src emacs-lisp
(setq eshell-prompt-function
  (lambda ()
    (let ((default  (face-attribute 'default :foreground))
          (green    (face-attribute 'success :foreground))
          (red      (face-attribute 'error   :foreground))
          (blue     (face-attribute 'link    :foreground))
          (yellow   (face-attribute 'warning :foreground)))
    (concat
    (propertize "┌—["                 'face  `(:foreground ,green))
    (propertize (user-login-name)     'face  `(:foreground ,red))
    (propertize "@"                   'face  `(:foreground ,blue))
    (propertize (system-name)         'face  `(:foreground ,red))
    (propertize "]──["                'face  `(:foreground ,green))
    (propertize (format-time-string "%a %b %d" (current-time)) 'face `(:foreground ,yellow))
    (propertize "]──["                'face `(:foreground ,green))
    (propertize (format-time-string "%H:%M" (current-time)) 'face `(:foreground ,yellow))
    (propertize "]\n"                 'face `(:foreground ,green))
    (propertize "│ "                  'face `(:foreground ,green))
    (propertize (concat (eshell/pwd)) 'face `(:foreground ,blue))
    (propertize "\n"                  'face `(:foreground ,green))
    (propertize "└─►"                 'face `(:foreground ,green))
    (propertize (if (= (user-uid) 0) " # " " $ ") 'face `(:foreground ,default))))))
#+end_src

** ~agda~ mode

We need Emacs to locate Agda mode. This command is put in ~.emacs~
#+begin_src emacs-lisp
(load-file (let ((coding-system-for-read 'utf-8))
                (shell-command-to-string "agda-mode locate")))
#+end_src

These packages are installed when setting up Agda,
so I simply ~require~ them.
They would be loaded when starting Agda mode,
but I need to load them now
- because I use ~agda2-info-buffer~ to open that buffer on startup,
- because I use ~agda-input~ everywhere, and
#+begin_src emacs-lisp
(require 'agda2-mode)
(require 'agda-input)
#+end_src

*** Command line arguments

Dr. Wolfram Kahl has recommended customising the following settings.
Note that my machine is a virtual machine running on a Chromebook
which, at time of writing (January 2020) has around ~6G~ (out of
the system's total ~8G~) available to it.

That said, my machine is routinely lagging quite badly,
and so I am trying to find the “sweet spot”.
#+begin_src emacs-lisp
(setq agda2-program-args '("+RTS" "-M3.0G" "-H0.6G" "-A128M" "-RTS"))
#+end_src

These arguments specify
| ~+RTS~, ~-RTS~ | Flags between these are arguments to the ~ghc~ runtime |
| ~-M[size]~   | Maximum heap size                                    |
| ~-H[size]~   | Suggested heap size                                  |
| ~-A[size]~   | Allocation area size used by the garbage collector   |

Full documentation for the ~ghc~ runtime argumentscan be found [[https://downloads.haskell.org/~ghc/7.8.4/docs/html/users_guide/runtime-control.html][here]].

Additional arguments that may be useful include
| ~-S[file]~ | Produces information about “each and every garbage collection” |
|          | - Outputs to ~stderr~ by default                               |

*** Alternative problem highlighting

I find the background colouring used by Agda for reporting
errors/warnings makes the underlying code too difficult
to read, especially in dark themes.

So I modify the faces Agda defines.
#+begin_src emacs-lisp
(require 'agda2-highlight)
#+end_src

First, we change all uses of background colouring to coloured boxes
instead.
#+begin_src emacs-lisp
;; Change backgrounds to boxes.
(cl-loop for (_ . face) in agda2-highlight-faces
      do (if (string-prefix-p "agda2-" (symbol-name face)) ;; Some non-Agda faces are in the list; don't change them
             (unless (equal face 'agda2-highlight-incomplete-pattern-face) ;; Workaround; this face is not defined in recent versions?
             (set-face-attribute face nil
               :box (face-attribute face :background)
               :background 'unspecified))))
#+end_src

These can also be intrusive in some cases; specifically, for
warnings about pattern matching. So I modify them specifically.
#+begin_src emacs-lisp
;; Coverage warnings highlight the whole function;
;; change the box to an underline to be less intrusive.
(set-face-attribute 'agda2-highlight-coverage-problem-face nil
  :underline (face-attribute 'agda2-highlight-coverage-problem-face :box)
  :box 'unspecified)

;; Deadcode warnings highlight the whole line;
;; change the box to a strikethrough to be less intrusive,
;; as well as thematically appropriate.
(set-face-attribute 'agda2-highlight-deadcode-face nil
  :strike-through (face-attribute 'agda2-highlight-deadcode-face :box)
  :box 'unspecified)

;; Non-definitional pattern matching may be ignored;
;; remove the colouring and just italicise it to be less intrusive.
(set-face-attribute 'agda2-highlight-catchall-clause-face nil
  :box 'unspecified
  :slant 'italic)
#+end_src

This code can be used to test out many of the redefined faces.
#+begin_src agda2
module HighlightTesting where
  open import Data.Nat using (ℕ ; zero ; suc)

  -- Coverage problem, non-definitional pattern matching, dead code.
  bad-pattern-matching : ℕ → ℕ
--bad-pattern-matching suc n   Missing case; other lines marked with coverage problem face
  bad-pattern-matching 0 = 0
  bad-pattern-matching (suc (suc 0)) = 0
  bad-pattern-matching (suc (suc n)) = 0 -- Non-definitional case (maybe use CATCHALL pragma?).
  bad-pattern-matching 0 = 0 -- Dead code.

  -- Non-terminating
  ∞? : ℕ
  ∞? = suc ∞?

  -- Unsolved meta warnings
  fail-to-solve-meta : ℕ
  fail-to-solve-meta = has-a-meta
    where
      has-a-meta : {n : ℕ} → ℕ
      has-a-meta = 0

  -- Shadowing in telescope
  shadowing-variable : (x : ℕ) → (x : ℕ) → ℕ
  shadowing-variable x y = x

  -- Missing function definition
  has-no-definition : Set

  data unpositive-type : Set where
    bad : (unpositive-type → ℕ) → unpositive-type
#+end_src

*** Add unicode characters to Agda's translations

**** Punctuation and parentheses

#+begin_src emacs-lisp
(add-to-list 'agda-input-user-translations '(";;" "﹔"))
(add-to-list 'agda-input-user-translations '(";;" "⨾"))
(add-to-list 'agda-input-user-translations '("|" "❙"))
(add-to-list 'agda-input-user-translations '("st" "•"))
(add-to-list 'agda-input-user-translations '("{" "｛"))
(add-to-list 'agda-input-user-translations '("}" "｝"))
(add-to-list 'agda-input-user-translations '("{" "⁅"))
(add-to-list 'agda-input-user-translations '("}" "⁆"))
(add-to-list 'agda-input-user-translations '("..." "…"))
#+end_src

**** Arrows

#+begin_src emacs-lisp
(add-to-list 'agda-input-user-translations '("pto" "⇀"))
(add-to-list 'agda-input-user-translations '("into" "↪"))
(add-to-list 'agda-input-user-translations '("onto" "↠"))
(add-to-list 'agda-input-user-translations '("conv" "↓"))
(add-to-list 'agda-input-user-translations '("=v" "⇓"))
(add-to-list 'agda-input-user-translations '("eval" "⇓"))
#+end_src

**** Correct mistakes on subscripts/superscripts

I often accidentally hold the shift key for too long when entering
subscripts and superscripts; these translations account for that.

#+begin_src emacs-lisp
(add-to-list 'agda-input-user-translations '("^!" "¹"))
(add-to-list 'agda-input-user-translations '("^@" "²"))
(add-to-list 'agda-input-user-translations '("^#" "³"))
(add-to-list 'agda-input-user-translations '("^$" "⁴"))
(add-to-list 'agda-input-user-translations '("^%" "⁵"))
(add-to-list 'agda-input-user-translations '("^^" "⁶"))
(add-to-list 'agda-input-user-translations '("^&" "⁷"))
(add-to-list 'agda-input-user-translations '("^*" "⁸"))
(add-to-list 'agda-input-user-translations '("^(" "⁹"))
(add-to-list 'agda-input-user-translations '("^)" "⁰"))
(add-to-list 'agda-input-user-translations '("_!" "₁"))
(add-to-list 'agda-input-user-translations '("_@" "₂"))
(add-to-list 'agda-input-user-translations '("_#" "₃"))
(add-to-list 'agda-input-user-translations '("_$" "₄"))
(add-to-list 'agda-input-user-translations '("_%" "₅"))
(add-to-list 'agda-input-user-translations '("_^" "₆"))
(add-to-list 'agda-input-user-translations '("_&" "₇"))
(add-to-list 'agda-input-user-translations '("_*" "₈"))
(add-to-list 'agda-input-user-translations '("_(" "₉"))
(add-to-list 'agda-input-user-translations '("_)" "₀"))
#+end_src

**** Emoticons

#+begin_src emacs-lisp
(add-to-list 'agda-input-user-translations '(":)" "😀"))
(add-to-list 'agda-input-user-translations '("grin" "😀"))
(add-to-list 'agda-input-user-translations '("Grin" "😁"))
(add-to-list 'agda-input-user-translations '("meh" "😐"))
(add-to-list 'agda-input-user-translations '("sad" "🙁"))
(add-to-list 'agda-input-user-translations '("gah" "😵"))
(add-to-list 'agda-input-user-translations '("yes" "✔"))
(add-to-list 'agda-input-user-translations '("no" "❌"))
#+end_src

😀 😁 😐 🙁 😵

**** Calccheck

TODO

**** Better access to prime symbols

#+begin_src emacs-lisp
(add-to-list 'agda-input-user-translations '("''" "″"))
(add-to-list 'agda-input-user-translations '("'''" "‴"))
(add-to-list 'agda-input-user-translations '("''''" "⁗"))
#+end_src

**** Small, halfwidth and fullwidth math symbols

These can be useful where use of the normal symbols
is restricted; for instance, in ~ditaa~ diagrams many
of them have special meaning.
#+begin_src emacs-lisp
(add-to-list 'agda-input-user-translations '("s*" "﹡"))
(add-to-list 'agda-input-user-translations '("s+" "﹢"))
(add-to-list 'agda-input-user-translations '("s-" "﹣"))
(add-to-list 'agda-input-user-translations '("s<" "﹤"))
(add-to-list 'agda-input-user-translations '("s>" "﹥"))
(add-to-list 'agda-input-user-translations '("s=" "﹦"))
(add-to-list 'agda-input-user-translations '("s\\" "﹨"))
(add-to-list 'agda-input-user-translations '("f+" "＋"))
(add-to-list 'agda-input-user-translations '("f<" "＜"))
(add-to-list 'agda-input-user-translations '("f=" "＝"))
(add-to-list 'agda-input-user-translations '("f>" "＞"))
(add-to-list 'agda-input-user-translations '("f\\" "＼"))
(add-to-list 'agda-input-user-translations '("f^" "＾"))
(add-to-list 'agda-input-user-translations '("f|" "｜"))
(add-to-list 'agda-input-user-translations '("f~" "～"))
(add-to-list 'agda-input-user-translations '("fnot" "￢"))
(add-to-list 'agda-input-user-translations '("h<-" "￩"))
(add-to-list 'agda-input-user-translations '("hu" "￪"))
(add-to-list 'agda-input-user-translations '("h->" "￫"))
(add-to-list 'agda-input-user-translations '("hd" "￬"))
#+end_src

**** Other

#+begin_src emacs-lisp
(add-to-list 'agda-input-user-translations '("op" "⊕"))
(add-to-list 'agda-input-user-translations '("^<" "﹤"))
(add-to-list 'agda-input-user-translations '("powset" "℘"))
(add-to-list 'agda-input-user-translations '("X" "⨉"))
;; Lunate sigmas
(add-to-list 'agda-input-user-translations '("Ls" "ϲ"))
(add-to-list 'agda-input-user-translations '("LS" "Ϲ"))
#+end_src

This Yi script character for the syllable “git” I use
as a shorthand for “git” (the version control software)
in my tab names.
#+begin_src emacs-lisp
(add-to-list 'agda-input-user-translations '("git" "ꇚ"))
#+end_src

**** Activate the new additions

#+begin_src emacs-lisp
(agda-input-setup)
#+end_src

*** Activate Agda input mode in ~text~, ~prog~ and ~artist~ modes

Agda input mode makes it extremely easy to use unicode in documents,
something I strongly prefer to do.
When I can use symbols directly, instead of (for instance)
LaTeX commands, it makes my plaintext far more readable.

So, let's enable Agda input mode in most instances.
#+begin_src emacs-lisp
(add-hook 'text-mode-hook
       (lambda () (set-input-method "Agda")))
(add-hook 'prog-mode-hook
       (lambda () (set-input-method "Agda")))
(add-hook 'artist-mode-hook
       (lambda () (set-input-method "Agda")))
#+end_src

*** Org Agda mode

Org-Agda mode is a Polymode Musa and I created
for working on literate Agda documents written in Org mode.
[[https://github.com/alhassy/org-agda-mode]]

We need to install Polymode.
#+begin_src emacs-lisp
(use-package polymode)
#+end_src

#+begin_src emacs-lisp
(require 'org-agda-mode)
#+end_src

*** COMMENT Working in ~.lagda.org~ files using Polymode


*This code has now been moved to the Org-Agda project.*

Polymode allows us to use more than one major mode in a buffer,
something usually impossible in Emacs.
Note there do exist several other solutions for this, such as MMM;
Polymode seemed the best candidate for what I want during my
(admittedly rather brief) search for solutions.
#+begin_src emacs-lisp
(use-package polymode)
#+end_src

[[https://polymode.github.io/][Read the docs]]!

**** Org-Agda mode

Org is our hostmode.
#+begin_src emacs-lisp
(define-hostmode poly-org-agda-hostmode
  :mode 'org-mode
  :keep-in-mode 'host)
#+end_src

Agda is our inner mode, delimited by Org source blocks.
#+begin_src emacs-lisp
(define-innermode poly-org-agda-innermode
  :mode 'agda2-mode
  :head-matcher "#\\+begin_src agda2\n"
  :tail-matcher "#\\+end_src\n"
  :head-mode 'org-mode
  :tail-mode 'org-mode
  ;; Disable font-lock-mode, which interferes with Agda annotations,
  ;; and undo the change to indent-line-function Polymode makes.
  :init-functions '((lambda (_) (font-lock-mode 0))
                    (lambda (_) (setq indent-line-function #'indent-relative))))
#+end_src

Now we define the polymode using the above host and inner modes.
#+begin_src emacs-lisp
(define-polymode poly-org-agda-mode
  :hostmode 'poly-org-agda-hostmode
  :innermodes '(poly-org-agda-innermode))
#+end_src

Finally, add our new mode to the auto mode list.
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.lagda.org" . poly-org-agda-mode))
#+end_src

**** COMMENT Alternative “Agda Org” mode (Agda as host, Org as inner)

One way to solve the indentation issue in the Agda inner mode
is to make Agda the outer mode instead,
because I know (at time of writing) how to adjust
the ~indent-line-function~ for the outer mode, but not the inner mode.

Agda is our hostmode.
#+begin_src emacs-lisp
(define-hostmode poly-agda-org-hostmode
  :mode 'agda2-mode
  :keep-in-mode 'host)
#+end_src

Org is our inner mode, delimited by Org source blocks.
(But note the inversion of the start and end blocks).
#+begin_src emacs-lisp
(define-innermode poly-agda-org-innermode
  :mode 'org-mode
  ;; Because Org is the inner mode here,
  ;; the header and tail of the Agda blocks
  ;; serve as the tail and header respectively of the Org blocks.
  ;; Note that the beginning of the buffer, matched by \`,
  ;; also serves as a header, and the end of the buffer, matched by \',
  ;; also serves as a tail.
  :head-matcher "#\\+end_src\n\\|\\`"
  :tail-matcher "#\\+begin_src agda2\n\\|\\'"
  :head-mode 'org-mode
  :tail-mode 'org-mode)
#+end_src

Now we define the polymode using the above host and inner modes.
#+begin_src emacs-lisp
(define-polymode poly-agda-org-mode
  :hostmode 'poly-agda-org-hostmode
  :innermodes '(poly-agda-org-innermode)

  ;; Don't use Polymode's indent line dispatcher,
  ;; as it results in unexpected indentation on newlines.
  (setq indent-line-function #'indent-relative))
#+end_src

Finally, add our new mode to the auto mode list.
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.lagda.org" . poly-agda-org-mode))
#+end_src

**** TODO Don't remove Org highlighting on typecheck

Agda's highlighting mode makes use of ~annotate~ to apply syntax highlighting
throughout the buffer, including the literate portion,
which ~agda2-highlight~ identifies as “background”.
Older versions of Agda would highlight the background using
~font-lock-comment-face~ (so as comments).
Newer versions (since
[[https://github.com/agda/agda/commit/8bee8727fff1a87c708c28b02edc38931c91f1fb#diff-4b761ced0541ba9fd4efbe58fd37ba7f][this]]
commit) simply apply Emacs' default face.

Since we're using Org mode for the literate portion,
we don't want Agda's highlighting to apply any annotation there.
We can achieve this by simply removing the setting for background
from the Agda highlight faces attribute list.
#+begin_src emacs-lisp
(assq-delete-all 'background agda2-highlight-faces)
#+end_src

Even with the background annotation removed,
following a load, Org fontification in text /following/ an Agda block
(so everywhere except the top of the file)
gets removed following a load.
This can be handled by running ~font-lock-fontify-buffer~ following a load.
:TODO: but font-lock-fontify-buffer /removes/ the Agda highlighting!

***** Testing out fontification

(This was a very incomplete attempt to restore Org fontification
by applying the just-in-time fontification on only to Org segments;
that's naive, because Agda seems to destroy the fontification
information, so fontifying won't do anything).

~jit-lock-fontify-now~ /sometimes/ forces fontlocking,
without turning on ~font-lock~ mode.
#+begin_src emacs-lisp
(jit-lock-fontify-now)
#+end_src
Why's it not consistent? I don't know. Damn.

#+begin_src emacs-lisp
;; Save point and restore it after we're done.
(save-excursion

  ;; Move to the beginning of the previous agda2 block (if it exists)
  (re-search-backward "#\\+begin_src agda2" nil t)

  (let ((beg (re-search-forward "#\\+end_src" nil t))
        (end (re-search-forward "#\\+begin_src agda2" nil t)))
    (message (format "Going to fontify between %d and %d" beg end))
    (jit-lock-fontify-now beg end)))
#+end_src

**** Toggling Org indentation

Agda relies upon indentation syntactically,
to delimit definitions of modules, records, etc.

I usually have Org indentation turned on, so that
nested heading are further indented
(softly; there's no actual whitespace being inserted).

This can make Agda code difficult to read,
and further, Agda can occasionally “mess this up”;
for instance, when restarting the Agda process,
it undoes this soft indentation for some reason.

In any case, it's useful to have a toggle keybinding.
See my [[Key bindings]].

**** TODO Some TODOs

- Enable Agda loading, and more generally all the agda keybindings,
  anywhere in .lagda.org files.
  - At least the important ones that don't obviously clash with Org bindings.
  - I've tried loading via ~M-x agda2-load~ from the Org portion,
    and it works (yay!), but it loses the Agda syntax highlighting?
- To enable monolith ~.lagda.org~ files
  (large literate files which tangle several individual clean source files),
  we need a way to strip one level of indentation after tangling.
  - Actually it's not /needed/; Agda does allow the contents
    of the toplevel module (so, the remainder of the file)
    to be indented; but it breaks /convention/.

** Other programming languages

*** Typescript

I previously used ~typescript-mode~; I am trying out ~web-mode~,
which handles ~HTML~, ~CSS~, ~javascript~, and ~typescript~.
Compared to ~typescript-mode~, I believe ~web-mode~ may handle ~JSX~ portions
better. See [[https://github.com/fxbois/web-mode/issues/585][this issue requesting Typescript support in ~web-mode~]].
#+begin_src emacs-lisp
(use-package web-mode)
#+end_src

I'm not sure if this is necessary.
#+begin_src emacs-lisp
;(add-to-list 'auto-mode-alist
;             '("\\.tsx\\'" . web-mode))
#+end_src

*** Racket

#+begin_src emacs-lisp
;(use-package racket-mode)
#+end_src

*** COMMENT The Mozart Programming System for ~Oz~

The Mozart Programming System “provides a powerful environment
for the development of software systems, called the
Oz Programming interface (OPI)”.
See the [[https://mozart.github.io/][github.io]] page.
Specifically,
[[https://mozart.github.io/mozart-v1/doc-1.4.0/opi/node2.html][this page]]
which discusses how to invoke the API
(though at time of writing, the documentation is for Mozart ~v1~,
not the current Mozart ~v2~).

Upon installation, the Mozart programming system provides
a shell command, ~oz~, (and usually also a application shortcut)
for launching an Emacs process with the Mozart sub-process.

Since I'm presumably running Emacs already, this is not how I wish
to invoke the OPI. Instead, I check for an Oz installation
under ~usr/bin/oz~, and set up invokation of the OPI from within Emacs.

Note: I install Mozart from pre-built binaries, which are distributed
[[https://github.com/mozart/mozart2/releases][on their Github page]].
Depending upon how you install Mozart, you may need
to modify the directories below
(notably, my directories differ from those mentioned on the ~github.io~ page).

For Mozart to work, we need to set the ~OZHOME~ environment variable.
#+begin_src emacs-lisp
(setq my-oz-home "/usr")

(when (file-directory-p my-oz-home)
  (setenv "OZHOME" my-oz-home)
)
#+end_src
Note this must be done before loading the ~elisp~,
because the ~elisp~ attempts to start a ~oz~ server.
If it fails to do so, we will receive errors such as
“Searching for program: No such file or directory, ./bin/ozengine”.

Of course, it's a good idea to check that Oz is installed on the system,
so set the location of the Mozart ~elisp~ code,
check that that location exists, and then load it and set up auto loads.
#+begin_src emacs-lisp
(setq my-mozart-elisp "/usr/share/mozart/elisp")

(when (file-directory-p my-mozart-elisp)
  (add-to-list 'load-path my-mozart-elisp)
  (load "mozart")
  (add-to-list 'auto-mode-alist '("\\.oz\\'" . oz-mode))
  (add-to-list 'auto-mode-alist '("\\.ozg\\'" . oz-gump-mode))
  (autoload 'run-oz "oz" "" t)
  (autoload 'oz-mode "oz" "" t)
  (autoload 'oz-gump-mode "oz" "" t)
  (autoload 'oz-new-buffer "oz" "" t)
)
#+end_src

~oz-mode~ annoyingly remaps ~C-x SPC~, so we must undo that.
#+begin_src emacs-lisp
(eval-after-load "oz-mode"
  '(progn
    (define-key oz-mode-map (kbd "C-x SPC") 'rectangle-mark-mode)
))
#+end_src

Below, in my Org mode setup under [[Evaluating code]],
I set up literate Oz (it only takes ~(require 'ob-oz)~).

*** F#

#+begin_src emacs-lisp
;;(require 'fsharp-mode)
#+end_src

*** Prolog

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist
                 '("\\.pl\\'" . prolog-mode))
#+end_src

*** Scheme

#+begin_src emacs-lisp
(use-package geiser)
#+end_src

*** Scala

This package seems to be installed as a dependency
of ~ob-ammonite~; in any case, it enables
an Ammonite REPL interface via ~term~ mode via ~M-x run-ammonite~.
#+begin_src emacs-lisp
(use-package ammonite-term-repl)
#+end_src

** Org mode

I use Org for almost everything, and utilise many
of the extras included in ~org-plus-contrib~.
#+begin_src emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :config
  (require 'ox-extra))
#+end_src

*** Capture

I'm beginning to use ~org-capture~ to enable me to log
ideas/TODO items from anywhere in Emacs in my log file.

#+begin_src emacs-lisp
(setq org-default-notes-file "~/Dropbox/Organisation/log/log.org")
#+end_src

Currently I just use the default capture template,
and manually organise ideas later.
Once I use this system for a while,
I should ideally set up other templates to automate some of this.

*** Agenda

My log file is my agenda.

#+begin_src emacs-lisp
(setq org-agenda-files '("~/Dropbox/Organisation/log/log.org"))
#+end_src

*** Speed keys

Speed keys are single keystrokes which execute commands in an
~org~ file when the cursor is at the start of a headline.

#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src

To see the commands available, execute
#+begin_example emacs-lisp
(org-speed-command-help)
#+end_example

*** Exporting

**** Ignoring content

***** Headings

Use the ~:ignore:~ tag on headlines to omit the headline when
exporting, but keep its contents.
#+Name: export-ignore-headlines
#+begin_src emacs-lisp
(ox-extras-activate '(ignore-headlines))
#+end_src

Alternatively, use the ~:noexport:~ tag to omit the headline
/and/ its contents.
#+Name: export-ignore-sections
#+begin_src emacs-lisp
;;;; noexport is in the list by default
;; (add-to-list 'org-export-exclude-tags "noexport")
#+end_src

***** Drawers

Ignore all drawers when exporting, by default.
#+begin_src agda2
(setq org-export-with-drawers nil)
#+end_src

**** Source code block indentation and colouring

I want to preserve my indentation for source code during export.
#+Name: export-preserve-indentation
#+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
#+end_src

The ~htmlize~ package preserves source code colouring on export to html.
(And presumably does a lot more I am not fully aware of).
#+Name: export-htmlize
#+begin_src emacs-lisp
(use-package htmlize)
#+end_src

**** Export in the background

Using ~latex-mk~, the export process for LaTeX takes a bit of time.
Tying up emacs during that time is annoying, so set the
export to happen in the background.
This setting can be modified locally in the export dialog frame
if desired by adding ~C-a~ to the export key sequence..
#+begin_src emacs-lisp
;; TODO: this is broken for some unknown reason; I regularly get
;; illegal syntax # errors when trying to export.
;;(setq org-export-in-background t)
#+end_src

This works by spawning a new Emacs session in which the file is exported.
By default, that session would use this init file, but that's overkill
and wastes time; most of this init is not relevant for that session.
So, we'll set a different init file, constructed from the relevant
portions of this file.
#+begin_src emacs-lisp
(setq org-export-async-init-file
  "~/.emacs.d/org-async-init.el") 
#+end_src

Some default settings.
#+begin_src emacs-lisp :noweb yes :tangle ~/.emacs.d/org-async-init.el
;; Org export init, tangled from my Emacs init
(require 'package)
(setq package-enable-at-startup nil)
(package-initialize)

(require 'org)
(require 'ox)
(require 'ox-extra)

(setq org-export-async-debug t)
#+end_src

These settings are from this exporting section.
#+begin_src emacs-lisp :noweb yes :tangle ~/.emacs.d/org-async-init.el
<<export-ignore-headlines>>
<<export-ignore-sections>>
<<export-preserve-indentation>>
<<export-htmlize>>
<<export-preserve-org-links>>
<<export-latex-compiler>>
<<export-latex-process>>
<<export-latex-classes>>
<<export-latex-beamer-classes>>
<<export-latex-minted>>
<<export-latex-hyperref>>
<<export-reveal>>
<<export-reveal-theme>>
<<export-reveal-title>>
<<export-reveal-extra-css>>
<<export-pandoc>>
<<export-headline-ids>>
<<export-sub-superscripts>>
#+end_src

We also need code evaluation settings, as code blocks may need
to be evaluated for export.
#+begin_src emacs-lisp :noweb yes :tangle ~/.emacs.d/org-async-init.el
<<evaluate-no-confirm>>
<<evaluate-languages>>
<<evaluate-ditaa-path>>
<<evaluate-geiser-implementation>>
<<evaluate-fsharp>>
<<evaluate-oz>>
<<evaluate-racket>>
<<evaluate-shell-init>>
<<evaluate-plantuml-path>>
#+end_src

**** Don't change ~.org~ links to ~.html~

By default
(see the [[https://orgmode.org/manual/Links-in-HTML-export.html][manual]])
when exporting to HTML, Org will change ~.org~ links to ~.html~.
I don't want this; for instance, when teaching a course,
I like to link to both a generated HTML file and
the original Org source version of notes
(on my generated course homepage).
#+Name: export-preserve-org-links
#+begin_src emacs-lisp
(setq org-html-link-org-files-as-html nil)
#+end_src

**** LaTeX specific

***** Default LaTeX compiler

I use a lot of unicode, and I find ~xelatex~ and ~lualatex~
handle that more easily than ~pdflatex~.

From my experience so far, they seem pretty interchangable
for my purposes, so the decision of which to use is arbitrary.

Based on [[https://tex.stackexchange.com/questions/36/differences-between-luatex-context-and-xetex][this discussion on Stack Exchange]], LuaTeX seems the more
“up and coming” engine, so I'm using it at least until something breaks.
#+Name: export-latex-compiler
#+begin_src emacs-lisp
(setq org-latex-compiler "lualatex")
#+end_src

***** LaTeX compilation process

I use ~latexmk~ to automatically run as many passes as needed
to resolve references, etc.
#+Name: export-latex-process
#+begin_src emacs-lisp
(setq org-latex-pdf-process
      '("latexmk -%latex -shell-escape -f %f"))
#+end_src

The flags/format specifiers are
| ~%latex~        | stands in for the latex compiler (defaults to the setting above) |
| ~-f~            | force continued processing past errors                           |
| ~%f~            | stands in for the (relative) filename                            |
| ~-shell-escape~ | necessary to use ~minted~                                          |

***** Custom document classes

I want a ~report~ class that begins with ~chapter~'s, rather than
~part~'s.
#+Name: export-latex-classes
#+begin_src emacs-lisp
(add-to-list
  'org-latex-classes
    '("report-noparts"
      "\\documentclass{report}"
      ("\\chapter{%s}" . "\\chapter*{%s}")
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
      ("\\paragraph{%s}" . "\\paragraph*{%s}")
      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

Sometimes, for creating slides, ~beamer~ is useful.
(Though I try to avoid it now; it feels low level to me).
#+Name: export-latex-beamer-classes
#+begin_src emacs-lisp
(add-to-list
  'org-latex-classes
    '("beamer"
      "\\documentclass[presentation]{beamer}"
      ("\\section{%s}" . "\\section*{%s}")
      ("\\subsection{%s}" . "\\subsection*{%s}")
      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
#+end_src

***** Use ~minted~ for code blocks

First, make sure we load the ~minted~ package.
#+begin_src emacs-lisp
(add-to-list 'org-latex-packages-alist '("newfloat" "minted"))
#+end_src
The ~newfloat~ package can be used with ~minted~ with
a ~newfloat~ option to, for instance, support pagebreaks
in the float. See this StackExchange
[[https://tex.stackexchange.com/questions/254044/][post]]
if you want to set that up.

Now, we tell Org to use a ~minted~ environment,
rather than the default ~verbatim~, for code.
#+begin_src emacs-lisp
(setq org-latex-listings 'minted)
#+end_src

****** Default options for ~minted~

One reason to use ~minted~ or ~listings~ over the simple ~verbatim~ is
that it can put decent-looking linebreaks where necessary
to prevent code running out of the margins.
This is controlled by the ~breaklines~ argument.

Probably there are other options I should add as well.

#+begin_src emacs-lisp
(setq org-latex-minted-options
  '(("breaklines" "true")))
#+end_src

****** Don't box unicode characters

Since I primarily export Agda code, which is full of unicode characters,
and most ~minted~ styles enclose those characters in a red ~fbox~,
I use this hack to disable ~fbox~'s inside ~minted~ environments.
(setq 'org-latex-packages-alist ())

#+begin_src emacs-lisp
(add-to-list 'org-latex-packages-alist
  "\\makeatletter
\\def\\dontdofcolorbox{\\renewcommand\\fcolorbox[4][]{##4}}
\\AtBeginEnvironment{minted}{\\dontdofcolorbox}
\\makeatother")
#+end_src

#+begin_src emacs-lisp
(add-to-list 'org-latex-packages-alist '("" "etoolbox"))
#+end_src

****** Treat ~agda2~ source as ~Haskell~ for listings

Unfortunately, ~minted~ doesn't support Agda,
so we simply have Org tell it that it's Haskell code.
#+begin_src emacs-lisp
(add-to-list 'org-latex-minted-langs '(agda2 "Haskell"))
#+end_src

****** Alternative: use ~listings~ in place of ~minted~

As a step between using ~verbatim~ blocks and
using ~minted~ for source code,
we can use the ~listings~ package.

I found that ~listings~ caused odd typesetting of my Agda code;
code was out of order, particularly when using underscores,
and had oddly placed line breaks.
It may have been an issue with treating Agda code as Haskell;
I didn't diagnose much before switching to
using ~minted~ instead.

If the setup is desired, here is how to do it:
#+begin_example emacs-lisp
(setq org-latex-listings t) ;; As opposed to 'minted
(add-to-list 'org-latex-listings-langs '(agda2 "Haskell"))
#+end_example

***** ~hyperref~ setup

#+Name: export-latex-hyperref
#+begin_src emacs-lisp
(setq org-latex-hyperref-template
  "\\hypersetup{
   pdfauthor={%a},
   pdftitle={%t},
   pdfkeywords={%k},
   pdfsubject={%d},
   pdfcreator={%c},
   pdflang={%L},
   colorlinks,
   linkcolor=blue,
   citecolor=blue,
   urlcolor=blue
   }
"
)
#+end_src

***** Adding additional packages

#+begin_src emacs-lisp
(add-to-list 'org-latex-packages-alist
  '("" "tabularx"))
#+end_src

***** Image handling

I prefer to be explicit about how images are handled during export.
So, I turn off some defaults of how they are handled in LaTeX.

In particular, the LaTeX export backend by default
wraps images in ~center~ blocks; but this breaks the ability
to include images in tables.
#+begin_src emacs-lisp
(setq org-latex-images-centered nil)
#+end_src

#+begin_src emacs-lisp
(setq org-latex-image-default-width nil)
#+end_src

**** ~org-reveal~

I make use of ~org-reveal~ to create ~reveal.js~ slide decks.
This is way easier than dealing with ~beamer~ in LaTeX,
and results in much more attractive and better organised slides.
#+Name: export-reveal
#+begin_src emacs-lisp
(use-package ox-reveal)
#+end_src

It's a good idea to keep a local copy of the ~reveal.js~ packages.
This will be used if I don't set the root explicitely in a project.
I should update it regularly if it's being used.
#+begin_src emacs-lisp
(setq org-reveal-root
  "file:///home/markparmstrong/Dropbox/Organisation/downloaded/reveal.js-3.8.0/")
#+end_src

***** Slide appearance

****** Theme

~reveal.js~ comes with many themes; ~black~ is the current default
at time of writing this. I set it just to be sure it stays consistent.

#+Name: export-reveal-theme
#+begin_src emacs-lisp
(setq org-reveal-theme "black")
#+end_src

At the time of writing, the included themes are
- ~black~: Black background, white text, blue links
- ~white~: White background, black text, blue links
- ~league~: Gray background, white text, blue links
- ~beige~: Beige background, dark text, brown links
- ~sky~: Blue background, thin dark text, blue links
- ~night~: Black background, thick white text, orange links
- ~serif~: Cappuccino background, gray text, brown links
- ~simple~: White background, black text, blue links
- ~solarized~: Cream-colored background, dark green text, blue links
(list from the [[https://github.com/hakimel/reveal.js/#theming][~reveal.js~ github]]).

****** Title page

The default title slide includes title and date, with the formatting
#+begin_src html
<h1 class="title">%t</h1>
<p class="date">Created: %d/p>
#+end_src
where ~%t~ stands for the document title and ~%d~ stands for the date.
I override this setting
#+Name: export-reveal-title
#+begin_src emacs-lisp
(setq org-reveal-title-slide
  "<h2 class=\"title\">%t</h2>
   <h3>%s</h3>
   <h4>%a</h4>
   <h5>%d</h5>")
#+end_src

****** Default slide height, width, margin and scaling

These settings are depricated; I need to remove this.
#+begin_src emacs-lisp
;;(setq org-reveal-height 5000)
;;(setq org-reveal-width 1200)
;;(setq org-reveal-margin "0.1")
;;(setq org-reveal-min-scale "0.05")
;;(setq org-reveal-max-scale "5")
#+end_src

****** Extra CSS

I should set this up.
#+Name: export-reveal-extra-css
#+begin_src emacs-lisp
(setq org-reveal-extra-css "")
#+end_src

****** COMMENT Footnote hackery            :noexport:

This is currently abandoned work.
I have resorted to using note blocks instead of footnotes,
which can be made footnotes in LaTeX export
and presentation notes in Reveal.

First, here's the CSS that goes with this.
#+begin_src css
/* Tooltip container */
.tooltip {
  position: relative;
  display: inline-block;
}

/* Tooltip text */
.tooltip .tooltiptext {
  visibility: hidden;
  max-width: 1200px;
  background-color: black;
  color: #fff;
  text-align: center;
  /*padding: 5px 0;*/
  /*border-radius: 6px;*/
  
  /* Position the tooltip text absolutely at position,
     and above other contents */
  position: absolute;
  z-index: -1;
}

/* Show the tooltip text when you mouse over the tooltip container */
.tooltip:hover .tooltiptext {
  visibility: visible;
}
#+end_src

~ox-reveal~ does not support footnotes, unfortunately.
The footnote numbers are placed correctly,
but the contents are not exported /at all/.
Since I want to make use of footnotes in
my combined ~reveal.js~/PDF course notes,
and lack sufficient knowledge of how to modify an Org export process,
I use some HTML/CSS/Javascript hackery to replace
the footnote numbers with a tooltip which, when hovered over,
reveals the footnote in a popup.

The basic HTML and CSS is not difficult;
[[https://www.w3schools.com/css/css_tooltip.asp][w3schools.com has a guide]].

The larger task is the organisation of the macros,
and the use of Javascript to set the tooltip contents
from wherever they are defined.

*Caveat*: it is required that footnote contents come after the reference.
Because Javascript is interpreted, the contents and tooltip must appear
/before/ the script that sets the tooltip text to those contents.
So I must make a decision whether the order is
- tooltip, contents, script, or
- contents, tooltip, script;
the former seems more reasonable to me.
This requirement could be removed by making use of
an “on page loaded” event listener, but that's a fair bit of work
to avoid a reasonable restriction.

This also replaces the behaviour of footnotes in “plain” HTML;
I do not believe it is possible for this approach to affect
only Reveal exporting.
:TODO: verify this

:TODO: similar utility for inline footnotes; simpler, since it's all together.

******* Utility macros

Sometimes we need newlines in our expanded text.
This macro facilitates that.
#+Macro: newline   (eval "\n")

We will need to ignore some contents
in the HTML export; simply wrap such contents in HTML comments
when exporting to HTMl.
#+Macro: begin-unless-html   @@html:<!--@@
#+Macro: end-unless-html     @@html:-->@@
If the contents to be ignored are plaintext not involving commas,
they can be passed as a macro argument and we don't need a pair
of delimiters.
#+Macro: unless-html         {{{begin-unless-html}}}$1{{{end-unless-html}}}

We need to insert Org-style footnote content tags.
#+Macro: org-fnct  {{{newline}}}[fn:$1]

******* Tooltip/footnote tag

Our first goal is the macro to be used
in place of the footnote tag, so
#+begin_src text
[fn:name]
#+end_src
is replaced by
#+begin_src text
{{{fnt:name}}}
#+end_src
where ~fnt~ stands for “footnote tag”.

We need HTML for the tooltip text.
Note the contents are not set here;
we simply name the span so we can set its text contents
when we reach the footnote contents.
#+Macro: tooltip-text   @@html:<span id="tooltip$1" class="tooltiptext"></span>@@

Now we need HTML for the tooltip tag, which contains
a tooltip text inside itself (hidden by default).
#+Macro: begin-tooltip   @@html:<span class="tooltip"><sup>†</sup>@@
#+Macro: end-tooltip     @@html:</span>@@
#+Macro: tooltip         {{{begin-tooltip}}}{{{tooltip-text($1)}}}{{{end-tooltip}}}

The final footnote indicator/reference macro
constructs the HTML footnote indicator if we are exporting to HTML,
and also constructs an Org style footnote reference,
but comments it out if we are exporting to HTML.
#+Macro: fnt   {{{tooltip($1)}}}{{{begin-unless-html}}}([fn:$1]){{{end-unless-html}}}

******* Tooltip or footnote contents

:TODO: commentary
:TODO: should this use innerHTML, or innerTextContents or similar?
#+Macro: begin-tooltip-text   @@html:<script>document.getElementById("tooltip$1").innerHTML = @@
#+Macro: end-tooltip-text     @@html:</script>@@

For the macro(s) for the tooltip/footnote contents, I see two options.
1. Wrap the contents in a begin/end pair of macros.
2. Include the contents as an argument to the macro.
Of course I would prefer avoiding /extra/ macros, as in option (1).
But option (2) presents a problem; since commas are used to
separate arguments to macros, 
Since neither option is perfect, we offer options for both.
#+Macro: begin-fnc     {{{begin-tooltip-text($1)}}}{{{org-fnct($1)}}}
#+Macro: end-fnc       {{{end-tooltip-text}}}
#+Macro: fnc           {{{begin-fnc($1)}}}$2{{{end-fnc}}}

**** ~ox-pandoc~

~ox-pandoc~ is “another exporter that translates Org-mode file to various other
formats via Pandoc”.

I don't make much use of it, but it more flexible, and so has
lots of options which make be useful in the future.

#+Name: export-pandoc
#+begin_src emacs-lisp
(use-package ox-pandoc)
#+end_src

**** ~ox-tufte~

(This section is deprecated; I now use
[[https://github.com/fniessen/org-html-themes/blob/master/README.org][Read-the-Org]]
as the theme for my websites).

At one point I considered using
[[https://github.com/edwardtufte/tufte-css][Tufte CSS]]
for websites;
~ox-tufte~ exports is a package to export ~html~ which is nicely
compatible with this style sheet. See the Github readme
[[https://github.com/dakrone/ox-tufte][here]].
#+begin_src emacs-lisp
;(use-package ox-tufte)
#+end_src

I found ~ox-tufte~ mentioned in a
[[https://www.reddit.com/r/emacs/comments/6r32q4][Reddit thread]]
regarding CSS for Org html export.

**** ~ox-koma-letter~

#+begin_src emacs-lisp
(require 'ox-koma-letter)
#+end_src

**** HTML specific

***** Change the “Created” postamble to “Last update”

By default, ~org-html-postamble~ is set to ~auto~.
We overwrite that to ~t~ so that the postamble is constructed
following the ~org-html-postamble-format~, which we set.
#+begin_src emacs-lisp
(setq org-html-postamble t)

(setq org-html-postamble-format
 '(("en"
    "<p class=\"author\">Author: %a</p>
     <p class=\"author\">Contact: %e</p>
     <p class=\"date\">Original date: %d</p>
     <p class=\"date\">Last updated: %C</p>
     <p class=\"creator\">Created using %c</p>
     <p class=\"validation\">%v</p>")))
#+end_src

***** Ensure useful HTML anchors

This code snippet is borrowed from Musa's
[[https://github.com/alhassy/emacs.d/#Ensuring-Useful-HTML-Anchors][init]].

#+begin_quote
Upon HTML export, each tree heading is assigned
an ID to be used for hyperlinks.
Default IDs are something like org1957a9d,
which does not endure the test of time:
Re-export will produce a different id.
Here's a rough snippet to generate IDs from headings,
by replacing spaces with hyphens, for headings without IDs.
#+end_quote

I have made several edits.
- Do not assign the custom id if
  the heading is tagged with ~:noexport:~ or ~:ignore:~.
- Made the error message more explicit.
#+Name: export-headline-ids
#+begin_src emacs-lisp
(defun my/ensure-headline-ids (&rest _)
  "Org trees without a :CUSTOM_ID: property have the property
   set to be their headline.

   Trees whose headline are tagged with :ignore:
   are not given an ID.

   Trees whose headline are tagged with :noexport:
   and any subtrees of those trees are not given an ID.

   If multiple trees end-up with the same id property,
   issue a message and undo any property insertion thus far.
  "
  (interactive)
  (let ((ids))
    (org-map-entries
     (lambda ()
       (org-with-point-at (point)
         (let* ((heading-components (org-heading-components))
                (headline (nth 4 heading-components))       
                (tags     (nth 5 heading-components)))
           (if (and tags (string-match-p (regexp-quote ":noexport:") tags))
             ;; This heading is tagged as noexport.
             ;; Set org-map-continue-from to next heading at this level.
             (setq org-map-continue-from (progn (org-goto-sibling)
                                                (line-beginning-position)))
             ;; Otherwise, check if this heading is tagged as ignore.
             (unless (and tags (string-match-p (regexp-quote ":ignore:") tags))
               ;; If not, apply the custom ID.
               (let ((id (org-entry-get nil "CUSTOM_ID")))
                 (unless id
                   (setq id (s-replace " " "-" headline))
                   (if (not (member id ids))
                       (push id ids)
                       (message-box "Found repeated headline \"%s\" during custom ID generation. Giving up and reverting progress." headline)
                       (undo)
                       (setq quit-flag t))
                   (org-entry-put nil "CUSTOM_ID" id)))))))))))

;; Whenever html & md export happens, ensure we have headline ids.
(advice-add 'org-html-export-to-html :before 'my/ensure-headline-ids)
(advice-add 'org-md-export-to-markdown :before 'my/ensure-headline-ids)
#+end_src

**** Require ~{}~ to denote sub/superscripts

Sometimes I want to export the characters ~_~ or ~^~.
However, Org allows these to be used for LaTeX style sub/superscripts,
so a lone ~_~ will be exported (to LaTeX at least)
as ~\_{}~ (and similarly for a lone ~^~).

In order to avoid this, but still allow for LaTeX style sub/superscripts,
we can use a setting to /require/ that sub/superscripts be enclosed in brackets
(which is my preference in any case).
#+Name: export-sub-superscripts
#+begin_src emacs-lisp
(setq org-export-with-sub-superscripts '{})
#+end_src

*** Literate programming

**** Execution

By default, Emacs will query whether we /actually/ want to
execute code when we evaluate a code block. Also, it seems to
just /not/ execute code marked for execution during export in an
~org~ file. So, I remove the safety.
#+Name: evaluate-no-confirm
#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src

By default only emacs lisp can be evaluated.
Documentation [[https://orgmode.org/manual/Languages.html][here]].

These languages have support built-in, it just has to be activated.
#+Name: evaluate-languages
#+begin_src emacs-lisp
(require 'ob-shell)
(require 'ob-haskell)
(require 'ob-latex)
(require 'ob-C)
(require 'ob-ruby)
(require 'ob-plantuml)
(require 'ob-R)
(require 'ob-ditaa)
(require 'ob-scheme)
(require 'ob-dot)
#+end_src

#+Name: evaluate-ditaa-path
#+begin_src emacs-lisp
(setq org-ditaa-jar-path "/usr/bin/ditaa")
#+end_src

#+Name: evaluate-geiser-implementation
#+begin_src emacs-lisp
;;(setq geiser-default-implementation 'guile)
#+end_src

For other languages, separate packages are needed.
#+Name: evaluate-fsharp
#+begin_src emacs-lisp
;;(use-package ob-fsharp)
#+end_src

~ob-oz~ comes with a Mozart2 installation;
if there's a problem, make sure the Mozart2 Elisp directory
is in the path.
#+Name: evaluate-oz
#+begin_src emacs-lisp
;;(require 'ob-oz)
#+end_src

There are at least two packages for Org babel support for Racket,
but neither are on MELPA. Neither one seems to stand out as
more or less fully featured.
- [[https://github.com/hasu/emacs-ob-racket][emacs-ob-racket]]
  is more recently maintained.
- [[https://github.com/xchrishawk/ob-racket][ob-racket]]
  has not been updated in 4 years.
So I choose ~emacs-ob-racket~. For the moment, I just saved it
to my ~emacs.d~; probably it should be put somewhere better,
but I will do that when I next set up my system 😀.
#+Name: evaluate-racket
#+begin_src emacs-lisp
;;(add-to-list 'load-path "/home/markparmstrong/.emacs.d/ob-racket")
;;(require 'ob-racket)
#+end_src

For shell code, we need to initialise via this function.
See [[https://emacs.stackexchange.com/questions/37692/how-to-fix-symbols-function-definition-is-void-org-babel-get-header][here]].
#+Name: evaluate-shell-init
#+begin_src emacs-lisp
(org-babel-shell-initialize)
#+end_src

PlantUML requires we set the path to the ~.jar~ file.
#+Name: evaluate-plantuml-path
#+begin_src emacs-lisp
(setq org-plantuml-jar-path "/usr/share/java/plantuml.jar")
#+end_src

~ob-typescript~ is [[https://github.com/lurdan/ob-typescript][available]].
#+begin_src emacs-lisp
(use-package ob-typescript)
#+end_src

~ob-ammonite~ interacts with the ~ammonite~ REPL for ~scala~.
#+begin_src emacs-lisp
(use-package ob-ammonite)
#+end_src
Note that the ~scala~ source blocks are marked as ~amm~ source,
not actually ~scala~. See
[[https://github.com/zwild/ob-ammonite][the documentation]].

This is not the right place to dump this,
but this code should cause the ~amm~ blocks to export as ~scala~ blocks
in LaTeX so ~minted~ knows how to handle them.
This code inspired by a similar problem solved on
[[https://emacs.stackexchange.com/a/19941][StackExchange]].
#+begin_src emacs-lisp
(defun my/ammonite-src-to-scala-src (text backend info)
  "Translate Ammonite minted blocks resulting from LaTeX export
to Scala minted blocks."
  (when (org-export-derived-backend-p backend 'latex)
    (with-temp-buffer
      (insert text)
      (goto-char (point-min))
      (replace-regexp "\\(\\\\begin{minted}.*\\){amm}" "\\1{scala}")
      (buffer-substring-no-properties (point-min) (point-max)))))

(add-hook 'org-export-filter-src-block-functions 'my/ammonite-src-to-scala-src)
#+end_src

**** Editing source code

When I choose to edit a source block in a separate buffer,
that source block becomes my main focus.
So, open a new frame (OS window) in which to edit.
Then I can open other material, help buffers, etc.,
without disturbing the window setup around my Org window.
When I finish editing, that frame is killed.
#+begin_src emacs-lisp
(setq org-src-window-setup 'other-frame)
#+end_src
Note, I didn't think I would like the ~other-frame~ option
at all at first, but it grew on me when I realised
it was the best way to ensure that editing source blocks in
a separate buffer would not mess up my window layout
—which ~other-window~ fails to do—
give me the option at least to keep the Org buffer visible
—which ~current-window~ of course disables—
and give me enough room for the source buffer
—which ~split-window-below~ and ~split-window-right~ fail to do
on small screens.

When we open a new window to edit source blocks
the major mode of that window is determined by
the setting for the language in ~org-src-lang-modes~.
Override the setting in that attribute list if you wish to
change the major mode for a particular language.

It's convenient to have ~<tab>~ act as it would in the source language
when editing code blocks in the Org buffer.
However, for some reason I have found this irritating
and disabled it.
#+begin_src emacs-lisp
;;(setq org-src-tab-acts-natively t)
#+end_src

:TODO:
#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
#+end_src

*** Cosmetics

**** Indent text based on heading by default

#+begin_src emacs-lisp
(setq org-startup-indented t)
#+end_src

**** Hide emphasis markers by default

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

It is convenient to show the emphasis markers around point.
Otherwise it becomes tedious to edit emphasised text.

There have been a couple Reddit posts seeking to solve this problem.
First, [[https://www.reddit.com/r/orgmode/comments/43uuck/][this code]] which doesn't work for all emphasis markers.
#+begin_example emacs-lisp
(defun org-show-emphasis-markers-at-point ()
  (save-match-data
    (if (and (org-in-regexp org-emph-re 2)
             (>= (point) (match-beginning 3))
             (<= (point) (match-end 4))
             (member (match-string 3) (mapcar 'car org-emphasis-alist)))
        (with-silent-modifications
         (remove-text-properties
          (match-beginning 3) (match-beginning 5)
           '(invisible org-link)))
      (apply 'font-lock-flush (list (match-beginning 3) (match-beginning 5))))))
#+end_example

Then, [[https://www.reddit.com/r/orgmode/comments/dj5u1y][this more recent code]]
which adds more checks.
However, it seems to lag input a bit?
#+begin_example emacs-lisp
(defun sbr-org-toggle-emphasis-markers-at-point ()
  (interactive)
  (save-match-data
    (when (or (org-in-regexp org-emph-re 2)
              (org-in-regexp org-verbatim-re 2))
      (if (and (>= (point) (match-beginning 3))
               (<= (point) (match-end 4))
               (member (match-string 3) (mapcar 'car org-emphasis-alist))
               (get-text-property (match-beginning 3) 'invisible))
          (with-silent-modifications
            (remove-text-properties
             (match-beginning 3) (match-beginning 5)
             '(invisible org-link)))
        (apply 'font-lock-flush (list (match-beginning 3) (match-beginning 5)))))))
#+end_example

This is my attempt, combining the two to some extent.
:TODO: this doesn't always hide the characters after point leaves
#+begin_src emacs-lisp
(defun org-toggle-emphasis-markers-at-point ()
  (save-match-data
    (when (or (org-in-regexp org-emph-re 2)
              (org-in-regexp org-verbatim-re 2)
              (org-in-regexp org-link-any-re 2))
      (if (and (>= (point) (match-beginning 3))
               (<= (point) (match-end 4))
               (member (match-string 3) (mapcar 'car org-emphasis-alist)))
               ;; invisible check?
          (with-silent-modifications
            (remove-text-properties
             (match-beginning 3) (match-beginning 5)
             '(invisible org-link)))
        (apply 'font-lock-flush
          (list (match-beginning 3) (match-beginning 5)))))))
#+end_src

We run the above function after each command in an Org mode buffer.
:TODO: improve this functionality before use.
#+begin_src emacs-lisp
;(add-hook 'org-mode-hook
;  (lambda ()
;    (add-hook 'post-command-hook
;      'org-toggle-emphasis-markers-at-point nil t)))
#+end_src

**** Emphasis marker regexps

We can change the behaviour of Org emphasis markers
in terms of what characters are allowed to occur around
and between them; see 
[[https://emacs.stackexchange.com/questions/41111/][this stack exchange post]]
for a sample setup, and
[[https://emacs.stackexchange.com/questions/13820][this other post]]
which is linked to from the first and which has more details.

Note that these settings are somewhat complicated
by the fact that they are used to construct regular expressions;
I lost a great amount of time to misplaced brackets and braces,
which made Org very confused about what I wanted,
since they were misinterpreted as regular expression syntax.
See my
[[https://stackoverflow.com/q/63805679/2041536][StackOverflow question]] on this.

Everything here must be set when Org is loaded.
#+begin_src emacs-lisp
(with-eval-after-load 'org
#+end_src

Only these characters are allowed to immediately precede
an emphasis character (left outer boundary characters).
Note that, as I am including a dash, it must be the first or final character,
and if including a closing bracket, it must be the first character.
See [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Special.html#Regexp-Special][Special Characters in Regular Expression]].
#+begin_src emacs-lisp
  (setcar org-emphasis-regexp-components
    (concat
      ;; All whitespace characters.
      "[:space:]"
      (string
        ;; Opening delimiters; the comments prevent check-parens from getting mad 😀.
        ?( ;;)
        ?{ ;;}
        ?“ ;;”
        ?[ ;]
        ;; Dashes
        ?— ?– ?-))) ;; Do not move the dash. It will break the regexp.
#+end_src

Only these characters are allowed to immedately follow
an emphasis character (right outer boundary characters).
#+begin_src emacs-lisp
  (setcar (nthcdr 1 org-emphasis-regexp-components)
    (concat
      (string ;[
         ?]) ;; Do not move the bracket. It will break the regexp.
      ;; All whitespace characters.
      "[:space:]"
      (string
        ;; Closing delimiters, with matching comments as above.
           ;;(
        ?) ;;{
        ?} ;;“
        ?”
        ;; Punctuation
        ?. ?? ?! ?, ?; ?:
        ;; Dashes
        ?– ?— ?-))) ;; Do not move the dash. It will break the regexp.
#+end_src

Any characters are allowed as inner boundary characters,
/except/ for those listed here.
#+begin_src emacs-lisp
  (setcar (nthcdr 2 org-emphasis-regexp-components)
    "[:space:]")
#+end_src

Any characters are allowed between the inner border characters.
(The regular expression ~.~ matches any character).
#+begin_src emacs-lisp
  (setcar (nthcdr 3 org-emphasis-regexp-components)
    ".")
#+end_src

Only one newline allowed, though.
#+begin_src emacs-lisp
  (setcar (nthcdr 4 org-emphasis-regexp-components) 1)
#+end_src

Now we update the setting.
#+begin_src emacs-lisp
  (org-set-emph-re
    'org-emphasis-regexp-components
    org-emphasis-regexp-components))
#+end_src
NOTE the extra closing parenthesis to end the ~with-eval-after-load~!

***** Test it out

Here are tests of all the ~pre~ and ~post~ values at time of writing.
#+begin_src org
 *test*
(*test*
)
[*test*
]
{*test*
}
“*test*
”
-*test*
–*test*
—*test*

*test* ;
(
*test*)
[
*test*]
{
*test*}
“
*test*”
*test*-
*test*–
*test*—
*test*.
*test*?
*test*!
*test*,
*test*;
*test*:
#+end_src

**** Require ~{}~ to denote sub/superscripts

Sometimes I use the characters ~_~ and ~^~ to write subscripts and superscripts;
however, when I do so, I want to be forced to use brackets to enclose
the sub/superscripts.
#+begin_src emacs-lisp
(setq org-export-with-sub-superscripts '{})
#+end_src

**** Highlight math mode blocks

#+begin_src emacs-lisp
(setq org-highlight-latex-and-related '(latex))
#+end_src

**** Pretty bullets

Org bullets replaces the standard ~*~ in headers
with prettier symbols.
#+begin_src emacs-lisp
(use-package org-bullets
  :hook (org-mode . org-bullets-mode))
#+end_src

**** Replace the ellipsis ~...~

By default, folded portions of the document are
presented by an ellipsis, ~...~. Let's replace that.

#+begin_src emacs-lisp
(setq org-ellipsis " ⮷")
#+end_src

But I find this is not particularly visible with my theme;
it gets set to a very faint colour.
So, I customise the ~org-ellipsis~ face so that it has
the same colour as the rest of the headline.
It has to be set after every theme change, or the setting will
be overwritten (probably the themes I use set it specifically?).
#+begin_src emacs-lisp
(add-hook 'after-load-theme-hook
  (lambda ()
    (set-face-attribute
      'org-ellipsis
      nil ;; all frames
      :foreground 'unspecified)))
#+end_src

**** Tables

I prefer to work with wordwrap on, so tables can be
quite problematic.

The solution is to set column widths so that we can collapse
tables. In recent Org mode versions, we need to enable collapsing.
#+begin_src emacs-lisp
(setq org-startup-align-all-table t)
#+end_src

**** Inline images

We can configure Org to automatically inline linked images
when opening documents.
#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)
#+end_src

**** Tag position

By default (as of Org 9.1.9),
tags get shifted to the 77th column.
But this causes blank lines to be inserted
when working on narrower screens.
I bump it down a good bit,
to ensure tags stay away from the right side of the screen.
#+begin_src emacs-lisp
(setq org-tags-column 48)
#+end_src

**** Adjusting image display size

I like to use inline images in Org mode, but of course
I don't want large images to be shown at full size!
Better to err on the side of making images too small,
so set the width of all images to be just 100 pixels.
#+begin_src emacs-lisp
(setq org-image-actual-width 100)
#+end_src
# This snippet of code found in a
[[https://www.reddit.com/r/emacs/comments/55zk2d/][# Reddit post]]
# sets the width for displaying images to a third of the screen size.
# #+begin_src emacs-lisp
# (setq org-image-actual-width (/ (display-pixel-width) 3))
# #+end_src

**** Colour-coded ~src~ block backgrounds

The Modus themes allow for colour-coded
backgrounds of Org ~src~ blocks,
where the colour depends on the language.
Neat!

#+begin_src emacs-lisp
(setq modus-vivendi-theme-org-blocks 'rainbow)
(setq modus-operandi-theme-org-blocks 'rainbow)
#+end_src

This function will add some colour associations.
#+begin_src emacs-lisp
(defun my/modus-add-org-src-block-faces ()
  (setq org-src-block-faces (append org-src-block-faces
         `(("text"    modus-theme-nuanced-red)
           ("latex"   modus-theme-nuanced-yellow)
           ("haskell" modus-theme-nuanced-blue)
           ("scala"   modus-theme-nuanced-blue)
           ("amm"     modus-theme-nuanced-blue)
           ("ruby"    modus-theme-nuanced-red)
           ("prolog"  modus-theme-nuanced-green)))))
#+end_src

Run the function every time we change themes.
#+begin_src emacs-lisp
(add-hook 'after-load-theme-hook 'my/modus-add-org-src-block-faces)
#+end_src

***** COMMENT Test it out

The built in examples at least use the theme's nuanced colours.
The below examples assume the Modus Vivendi theme.
The Operandi colours are sometimes different.

Nuanced magenta for Lisps.
#+begin_example emacs-lisp
(defun my/cool-message (arg) (message "hello world"))
#+end_example

Nuanced blue for C's.
#+begin_example c
void mycoolmessage(int arg) {
  printf("hello world");
}
#+end_example

Nuanced yellow for shells.
#+begin_example shell
echo "hello world"
#+end_example

Nuanced red for HTML-likes.
#+begin_example html
<p>Hello World</p>
#+end_example

Nuanced cyan for JSON and other configuration types.
#+begin_example json
{
    "test": "HelloWorld"
}
#+end_example

Nuanced green for Python.
#+begin_example python
def mycoolmessage (arg):
  print "hello world"
#+end_example

*** Tables of contents

This package provides automatic maintainance of a table of contents
under any heading which is labelled with the ~:TOC:~ tag.
#+begin_src emacs-lisp
(use-package toc-org
  ;; Automatically update toc when saving an Org file.
  :hook (org-mode . toc-org-mode)
  ;; Use both “:ignore_N:” and ":export_N:” to exlude headings from the TOC.
  :custom
    (toc-org-noexport-regexp
      "\\(^*+\\)\s+.*:\\(ignore\\|noexport\\)\\([@_][0-9]\\)?:\\($\\|[^ ]*?:$\\)"))
#+end_src

I lifted this setup straight from Musa's init.

*** Other

**** Allow alphabetical lists

#+begin_src emacs-lisp
(setq org-list-allow-alphabetical t)
#+end_src

**** Reveal hidden elements if they are edited

To avoid, for instance, accidentally editing folded portions
of the document.

#+begin_src emacs-lisp
(setq org-catch-invisible-edits 'show)
#+end_src

**** Inline tasks

#+begin_src emacs-lisp
(require 'org-inlinetask)
#+end_src

** Org struct mode

Org struct mode lets us use Org-style document folding
in other modes.
#+begin_src emacs-lisp
;;(add-hook 'agda2-mode 'turn-on-orgstruct++)
#+end_src

** ~pdf-tools~

#+begin_src emacs-lisp
(use-package pdf-tools)
#+end_src

Need to “install” it each time emacs starts
#+begin_src emacs-lisp
(pdf-tools-install)
#+end_src

*** Default to midnight mode

Midnight mode is used to “apply a color-filter appropriate
for past midnight reading”.
#+begin_src emacs-lisp
(add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
#+end_src

** ~yankpad~ and ~yasnippets~

I use ~yasnippets~ for text expansion, and ~yankpad~ to organise my
snippets.

For inserting snippets, we require string manipulation functions
from the ~subr-x~ package (built-in).
#+begin_src emacs-lisp
(require 'subr-x)
#+end_src

#+begin_src emacs-lisp
(use-package yasnippet)
(yas-global-mode t)

(use-package yankpad)
(setq yankpad-file "~/Dropbox/Organisation/setup/emacs/yankpad.org")
#+end_src

~yas-wrap-around-region~ controls what is inserted for a snippet's
~$0~ field. A non-nil, non-character setting has it insert the
current region's contents (i.e. if we highlight a region and
invoke a snippet, the region will be wrapped).

#+begin_src emacs-lisp
(setq yas-wrap-around-region t)
#+end_src

~yas-indent-line~ controls how inserted snippets are inserted.
~fixed~ indicates the snippet should be indented to the column at point.
~auto~ instead causes each line to be indented using ~indent-according-to-mode~.
I set it to fixed because this is usually what I want; I know best, not the mode.

#+begin_src emacs-lisp
(setq yas-indent-line 'fixed)
#+end_src

*** Don't add a final newline when editing snippet files

~yasnippets~ will insert the final newline when expanding a snippet,
so snippet files generally shouldn't include a final newline.

#+begin_src emacs-lisp
(add-hook 'snippet-mode-hook (setq require-final-newline nil))
#+end_src

*** COMMENT Make ~org~ mode “play nice” with ~yasnippets~

This is deprecated, since I use ~yankpad~ as a front end to ~yasnippets~
now.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (setq-local yas/trigger-key [tab])
            (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))
#+end_src

** ~dired~

I use ~dired~ for browsing directories; it's simple, and with
the right configuration, very easy to use.

*** File information

~dired~ makes use of switches for ~ls~.

I like the following switches:
| ~--group-directories-first~ | group directories before files                             |
| ~-a~                        | do not ignore entries starting with .                      |
| ~-B~                        | do not list implied entries ending with ~                  |
| ~-g~                        | long listing format, but do not list owner                 |
| ~-G~                        | in a long listing, don't print group names                 |
| ~-h~                        | print human readable size                                  |
| ~-L~                        | show information for /references/ rather than symbolic links |

#+begin_src emacs-lisp
(setq dired-listing-switches
      "--group-directories-first -aBDgGhL --time-style \"+  %Y %b %d %H:%M  \"")
#+end_src

*** COMMENT Use only one buffer for ~dired~

# This became detrimental, since I sometimes like several
# dired buffers open in different windows.

I use ~dired-single~ to avoid ~dired~ opening a new buffer
for every directory visited.

#+begin_src emacs-lisp
(use-package dired-single)
#+end_src

I use a “magic” buffer with the name ~*Dired*~, to avoid the single
~dired~ buffer being named after whatever directory I first visit.

#+begin_src emacs-lisp
(setq dired-single-use-magic-buffer t)
(setq dired-single-magic-buffer-name "*Dired*")
#+end_src

The below code, which rebinds keys to use ~dired-single~ rather than ~dired~,
was originally based on code from the ~dired-single~ [[https://github.com/crocket/dired-single][GitHub readme]];
but in recent versions of Emacs, ~dired-load-hook~ is obsolete,
so we use ~with-eval-after-load~ instead.
#+begin_src emacs-lisp
(defun my/dired-init ()
  ;; Keyboard navigation should be rebound to dired-single
  (define-key dired-mode-map [return]  'dired-single-buffer)
  (define-key dired-mode-map "."       'dired-single-up-directory)

  ;; Emacs registers a mouse 1 click
  ;; if we click /beside/ a file/directory name.
  ;; I actually prefer this not to open the file.
  (define-key dired-mode-map [mouse-1] nil)
  ;; It registers a mouse 2 click
  ;; if we click /on/ a file/directory name.
  (define-key dired-mode-map [mouse-2] 'dired-single-buffer-mouse))

;; Deprecated code
;;;; if dired's already loaded, then the keymap will be bound
;;(if (boundp 'dired-mode-map)
;;        ;; we're good to go; just add our bindings
;;        (my/dired-init)
;;  ;; it's not loaded yet, so add our bindings to the load-hook
;;  (add-hook 'dired-load-hook 'my/dired-init))

;; Load the keybindings
(with-eval-after-load 'dired
  (my/dired-init))
#+end_src

*** Cosmetic

Don't display whitespace information via ~whitespace-mode~ in Dired buffers.
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook
  (lambda ()
     (setq-local whitespace-style nil)))
#+end_src

** ~magit~

#+begin_src emacs-lisp
(use-package magit)
#+end_src

** Sending email: ~send-mail~

Whether or not you use Emacs to read your email,
you can use it to send emails with the builtin ~send-mail~.
It can be configured to use your OS default for sending email
(for instance, through a mail program or browser),
or configured to send mail itself (for instance via SMTP).
For convenience, I choose the latter.

I use Gmail exclusively, so the setup is small.
#+begin_src emacs-lisp
(require 'smtpmail)

(setq send-mail-function    'smtpmail-send-it
      smtpmail-smtp-server  "smtp.gmail.com"
      smtpmail-stream-type  'ssl
      smtpmail-smtp-service 465)
#+end_src

If needed, we can create a queue to allow for sending of email
while offline. See
[[https://www.gnu.org/software/emacs/manual/html_node/smtpmail/Queued-delivery.html][the documentation]].
#+begin_src emacs-lisp
;;(setq smtpmail-queue-mail nil)
#+end_src

After sending an email, kill the buffer.
#+begin_src emacs-lisp
(setq message-kill-buffer-on-exit t)
#+end_src

*** Sending HTML mail

I usually prefer to send plaintext email, but if I want to send
HTML for any reason, that can be done from Emacs as well.

~org-mime~ allows sending of HTML emails written in Org markdown;
I don't use it yet, as I only send plaintext, but it may be handy later.
#+begin_src emacs-lisp
(use-package org-mime)
#+end_src

** Reading email: ~mu4e~ (with isync)

Using Emacs as an email client provides us with powerful text editing
while composing email.

I initially followed the guide
[[https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/][from this reddit post]]
to set it up, but I've customised things heavily at this point.

#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
(require 'mu4e)
#+end_src

*** Basic setup

**** The mail directories

~mu4e~ needs to know where my mail directory lives,
and the paths of certain important mailboxes relative to that.
Note that there should be an archive box here, but I don't make
use of an archive mailbox.
#+begin_src emacs-lisp
(setq
  mu4e-maildir       "~/.mail/gmail"
  mu4e-drafts-folder "/Drafts"
  mu4e-sent-folder   "/Sent Mail"
  mu4e-trash-folder  "/Trash")
#+end_src

**** Get mail command

I use isync (whose executable is called ~mbsync~) to manage
my local mail directory.

I have two groups set up in my ~mbsyncrc~; one smaller group
of my most important Gmail labels
which synchronises with the remote quickly,
and a larger group of the remaining labels which takes
a fair chunk of time to synchronise.
The ~mu4e~ get mail command uses the former, to ensure
it does not take an excessive amount of time when I manually run it.
#+begin_src emacs-lisp
(setq mu4e-get-mail-command "mbsync gmail-quick")
#+end_src

~mu4e~ is supposed to be able to run the get mail command
and index the mail at set intervals.
Unfortunately, this process seems to silently fail somewhere.
So I disable the automatic updating and instead
register my own idle timers to update mail.
#+begin_src emacs-lisp
(setq mu4e-update-interval nil)
#+end_src

**** Updating while idle

Here we register a function which updates mail
to be run when the system is idle.

We set it so that every fifth time the function is run,
all mail is synced.
The other times, only my quick channel is synced.

We need a ticker variable to accomplish this.
#+begin_src emacs-lisp
(defvar my/mu4e-update-ticker 0
  "Ticker variable for use with `my/mu4e-get-mail-command`.
   Once a certain value is reached, sync all mail
   and reset the ticker.")
#+end_src

This function locally overrides ~mu4e-get-mail-command~ and
then invokes ~mu4e-update-mail-and-index~ (running in the background)
#+begin_src emacs-lisp
(defun my/mu4e-update-mail-and-index (the-command)
  "Run `mu4e-update-mail-and-index` after setting
   a custom `mu4e-get-mail-command`."
  (let ((mu4e-get-mail-command the-command))
    (mu4e-update-mail-and-index t)))
#+end_src

Now we use the above function and ticker in the lambda
we register on an idle timer.
#+begin_src emacs-lisp
(run-with-idle-timer 600 t (lambda ()
  (if (< my/mu4e-update-ticker 4)
      (progn (setq my/mu4e-update-ticker (+ my/mu4e-update-ticker 1)) 
             (my/mu4e-update-mail-and-index mu4e-get-mail-command))
      (progn (setq my/mu4e-update-ticker 0)
             (my/mu4e-update-mail-and-index "mbsync -a")))))
#+end_src

# This is a bit of a dumb asynchronous process to update the rest of
# the mailboxes. Dumb in the sense that if anything ever goes wrong,
# I won't know about it.
# #+begin_src emacs-lisp
# (start-process "mbsync-gmail-rest"
#                "*mbsync gmail-rest*"
#                "~/Dropbox/Organisation/setup/emacs/mbsync-gmail-rest")
# #+end_src
# It runs this shell process.
# #+begin_src shell :tangle mbsync-gmail-rest :shebang "#!/bin/bash"
# while :
# do
#   echo "Beginning sync"
#   date
#   mbsync gmail-rest
#   echo ""
#   echo "Indexing with mu"
#   mu index -m ~/.mail/gmail
#   echo "Ended sync, sleeping for 30m"
#   echo ""
#   echo ""
#   echo ""
#   sleep 30m
# done
# #+end_src
# By default, we would be prompted whether we want to kill this process
# upon exiting Emacs; I will always answer yes, so it's best
# just not to have it ask.
# #+begin_src emacs-lisp
# (set-process-query-on-exit-flag (get-process "mbsync-gmail-rest") nil)
# #+end_src

~mu4e~ has an annoying habit of hogging the minibuffer while
updating and indexing; unfortunately this means I prefer
to silence its updating and indexing messages.
#+begin_src emacs-lisp
(setq mu4e-hide-index-messages t)
#+end_src

~mu/mu4e~ normally keeps the base filename the same when moving
mail to a different folder; with isync, it works better to
change the name. See the documentation of this variable.
#+begin_src emacs-lisp
(setq mu4e-change-filenames-when-moving t)
#+end_src

*** Viewing emails

**** Email list

This controls the information shown in the email lists.
- ~:human-date~ will show the time if the email was sent today
  (the alternative, ~:date~, would not).
- ~:from-or-to~ is a special field that will show the sender if it was not me;
  otherwise it will show the recipient.
#+begin_src emacs-lisp
(setq mu4e-headers-fields
    '( (:date       . 22)
       (:flags      . 4)
       (:from-or-to . 22)
       (:subject    . nil)))
#+end_src

#+begin_src emacs-lisp
(setq mu4e-headers-date-format "%d %b/%y, %a, %R")
#+end_src

Don't organise by threads; I find organising by date preferable.
#+begin_src emacs-lisp
(setq mu4e-headers-show-threads nil)
#+end_src
This can be toggled with `P` in the email list.

By default, related mail is also included; for instance,
if I reply to a message in a list, the reply will show up in the list.
I find this unintuitive, especially since I don't organise by threads.
#+begin_src emacs-lisp
(setq mu4e-headers-include-related nil)
#+end_src

**** Individual mail

Show images by default, and prefer to use ~imagemagick~ to do so.
#+begin_src emacs-lisp
(setq mu4e-view-show-images t)

(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))
#+end_src

Attachments can simply be placed in ~~/Downloads~;
I usually share this directory from ChromeOS, which makes it convenient
to put attachments there (so I can open them in both OSes easily).
#+begin_src emacs-lisp
(setq mu4e-attachment-dir  "~/Downloads")
#+end_src

Show full email addresses when viewing messages.
#+begin_src emacs-lisp
(setq mu4e-view-show-addresses 't)
#+end_src

**** HTML support

Emacs is not the ideal environment to read HTML emails;
for that reason, if there is a plaintext version available,
I prefer to see that first.
#+begin_src emacs-lisp
(setq mu4e-view-prefer-html nil)
#+end_src

If there is no plaintext available, or if the plaintext is unbearable
for any reason, we can open emails in the browser by using
this shortcut.
#+begin_src emacs-lisp
(add-to-list 'mu4e-view-actions
  '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#+end_src

*** Shortcuts to mailboxes and bookmarks

#+begin_src emacs-lisp
(setq mu4e-maildir-shortcuts
    '(("/Inbox"     . ?i)
      ("/Sent Mail" . ?s)
      ("/Desk/Followup"  . ?f)
      ("/Desk/Reference" . ?r)
      ("/Desk/Transient" . ?t)))
#+end_src

Bookmarks can be used from the ~mu4e~ main page,
and are also useful for programmatically jumping to maildirs.
#+begin_src emacs-lisp
(add-to-list 'mu4e-bookmarks
  (make-mu4e-bookmark
    :name  "Inbox"
    :query "maildir:/Inbox"
    :key ?i))
#+end_src

*** ~mu4e-maildirs-extension~

The package ~mu4e-maildirs-extension~ causes the display of
the read/total count for each mail directory in the list.
#+begin_src emacs-lisp
(use-package mu4e-maildirs-extension)

(mu4e-maildirs-extension)
#+end_src

*** Message composition settings

I don't use a signature.
#+begin_src emacs-lisp
(setq mu4e-compose-signature-auto-include nil)
#+end_src

Don't automatically insert line breaks for long lines
in the message buffer! Such settings infuriate me.
#+begin_src emacs-lisp
(add-hook 'mu4e-compose-mode-hook 'turn-off-auto-fill)
#+end_src

**** Contacts

I've had problems where contact completion breaks.
For the moment, I make sure that the contacts are requested
from ~mu~ upon starting Emacs.
#+begin_src emacs-lisp
(mu4e~request-contacts)
#+end_src

Note that the contacts are stored in a hash table,
and so I am unsure of how to actually see them in Emacs.

**** Flow

I write emails the way I write all my documents:
trying as best I can to respect a maximum line length of 80 characters.
But even 80 characters can be too wide on some mobile screens,
and when I enter my linebreaks, the receiving client may turn this
#+begin_src text
A line with a number of characters that is possibly too wide for mobile.
Another line of a decent length.
#+end_src
into this
#+begin_src text
A line with a number of characters that is possibly
too wide for mobile.
Another line of a decent length.
#+end_src

One option to solve seems to be to use long paragraphs and to
send messages with ~format=flowed~, which tells the receiving client
to reflow paragraphs as needed.
See for instance [[https://www.emacswiki.org/emacs/FormatFlowed]].
But this has two downsides: I dislike writing long lines,
even with autofill.
And ~format=flowed~ is not supported consistently;
for instance Gmail does not respect it.

I don't have a solution for this potential problem yet,
so I choose to do nothing,
and potentially have my emails flow broken on mobile screens.

# It is useful to reflow my text for the reciever.
# The ~format=flowed~ is supposed to allow the receiving client
# to do this.
# #+begin_src emacs-lisp
# (setq mu4e-compose-format-flowed t)
# #+end_src
# But since some clients don't support ~format-flowed;~ Gmail being
# the notable example, instead reflow paragraphs into long lines,
# which should be broken as needed by the receiver.
# #+begin_src emacs-lisp
# (add-hook 'mu4e-compose-mode-hook (lambda () (use-hard-newlines -1)))
# #+end_src
#
# It's convenient not to reply to myself by default.
# #+begin_src emacs-lisp
# (setq mu4e-compose-dont-reply-to-self t)
# #+end_src

**** HTML support (nothing to see here)

Note that there is a ~org-mu4e~ package that comes with ~mu4e~,
which would allow for sending HTML email using ~mu4e~,
but it is apparently depricated.
The ~org-mime~ package above is probably the correct path
if I ever want to send HTML emails.

**** Changing the ~From~ address automatically

I use my personal Gmail to collect all of my emails,
but when replying I like to send back from whichever
account the original mail was sent to.
This hook updates the ~From~ field when replying to
an email sent to one of my other accounts.
It is taken from [[https://www.djcbsoftware.nl/code/mu/mu4e/Compose-hooks.html#Compose-hooks][the ~mu4e~ documentation]],
with a modification to save the existing ~user-mail-address~ so
that it can be reset afterwards.
#+begin_src emacs-lisp
(add-hook 'mu4e-compose-pre-hook
  (defun my/set-from-address ()
    "Set the From address based on the To address of the original."
    (let ((msg mu4e-compose-parent-message))
      (when msg
        (setq my/user-mail-address-backup user-mail-address)
        (setq user-mail-address
          (cond
             ((mu4e-message-contact-field-matches msg :to "armstmp@mcmaster.ca")
               "armstmp@mcmaster.ca")
             ((mu4e-message-contact-field-matches msg :cc "armstmp@mcmaster.ca")
               "armstmp@mcmaster.ca")
             (t
               "markparmstrong@gmail.com")))))))
#+end_src

The ~mu4e-compose-mode-hook~ runs
after the message has been formed.
So we are safe to restore the original ~user-mail-address~.
#+begin_src emacs-lisp
(add-hook 'mu4e-compose-mode-hook
  (defun my/restore-user-mail-address ()
    "Restore the user-mail-address based on the value
     in my/user-mail-address-backup."
    (when my/user-mail-address-backup
       (setq user-mail-address my/user-mail-address-backup))))
#+end_src

***** COMMENT My own attempt to make this

Before finding the above, I had attempted to code this utility
myself; I preserve it here.
#+begin_example emacs-lisp
(add-hook 'mu4e-compose-mode-hook
  (lambda ()
    (let ((start-line (line-number-at-pos)))
      (beginning-of-buffer)
      (when (> (count-matches "To:.*<armstmp@mcmaster.ca>.*\n") 0)
        (re-search-forward "From:.*\n")
        (replace-match "From: Mark Armstrong <armstmp@mcmaster.ca>\n"))
        (re-search-forward "\(To:.*\)") ; to be completed...
      (goto-line start-line)))) ; restore current line
#+end_example

*** Enabling Org-like folding in email composition

:TODO: this doesn't work yet?
#+begin_src emacs-lisp
;;(add-hook 'message-mode-hook 'turn-on-orgstruct++)
#+end_src

*** Miscellaneous

Don't prompt me upon quitting ~mu4e~.
#+begin_src emacs-lisp
(setq mu4e-confirm-quit nil)
#+end_src

** COMMENT Reading email: ~notmuch~ (with isync)

Build notmuch from [[https://github.com/notmuch/notmuch][source]]
to get a recent version.

#+begin_src emacs-lisp
(require 'notmuch)
#+end_src

** COMMENT Reading email: ~gnus~

This is taken from Musa's init, and complemented by information from
[[https://www.emacswiki.org/emacs/GnusGmail][the Emacs wiki]].


The below needs to be tangled to ~~/.gnus~.
Note that ~user-full-name~ and ~user-mail-address~ need to be defined
(they are above).
#+begin_src emacs-lisp :tangle ~/.gnus
;; user-full-name and user-mail-address should be defined

(setq gnus-select-method
      '(nnimap "gmail"
               (nnimap-address "imap.gmail.com")
               (nnimap-server-port "imaps")
               (nnimap-stream ssl)))

(setq smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587
      ;; Comment to fix delimiter matching in literate file [
      gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")

;; Make Gnus NOT ignore [Gmail] mailboxes
(setq gnus-ignored-newsgroups
  ;; Comment to fix delimiter matching in literate file [
  "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")

;; Reply with the same email address
(setq gnus-posting-styles
  '(((header "to" "markparmstrong@gmail.com")
     (address "markparmstrong@gmail.com"))
    ((header "to" "armstmp@mcmaster.ca")
     (address "armstmp@mcmaster.ca"))
    ((header "cc" "markparmstrong@gmail.com")
     (address "markparmstrong@gmail.com"))
    ((header "cc" "armstmp@mcmaster.ca")
     (address "armstmp@mcmaster.ca"))))

;; Newest emails first
(setq gnus-thread-sort-functions
  '(gnus-thread-sort-by-most-recent-number))

;; DON'T invasively take over my whole Emacs frame, thank you very much…
(setq gnus-use-full-window nil)

;; Use GNUS topics to organise the groups list by topic
(add-hook 'gnus-group-mode-hook 'gnus-topic-mode)

(setq gnus-topics-alist nil)

;; Some eye candy
(setq gnus-sum-thread-tree-vertical        "│"
      gnus-sum-thread-tree-leaf-with-other "├─► "
      gnus-sum-thread-tree-single-leaf     "╰─► "
      gnus-summary-line-format
      (concat
       "%0{%U%R%z%}"
       "%3{│%}" "%1{%d%}" "%3{│%}"
       "  "
       "%4{%-20,20f%}"
       "  "
       "%3{│%}"
       " "
       "%1{%B%}"
       "%s\n"))
#+end_src

** Docker

#+begin_src emacs-lisp
(use-package docker
  :ensure t
  :bind ("C-c d" . docker))
#+end_src

** ~winner~ for saving and restoring window layouts

#+begin_src emacs-lisp
(winner-mode 1)
#+end_src

** ~exwm~

I've considered using the Emacs window manager, ~exwm~,
but on my Chromebook, I can't replace the window manager.
So it remains simply a possibility for the future.

#+begin_src emacs-lisp
;(use-package exwm)
;(require 'exwm-config)
;(exwm-config-default)
#+end_src

** ~eaf~; the Emacs application framework

The Emacs application framework is really cool;
Qt5 GUI applications running /inside/ of Emacs.
Forget the Emacs window manager; this is
a whole new level of living inside Emacs.

Unfortunately for the moment, I need to recompile Emacs with
at least added ~dbus~ support before I can use it.
#+begin_src emacs-lisp
;;(use-package eaf
;;  :load-path "~/software-install/emacs-application-framework"
;;  :custom
;;  (eaf-find-alternate-file-in-dired t)
;;  :config
;;  (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
;;  (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
;;  (eaf-bind-key take_photo "p" eaf-camera-keybinding))
#+end_src

** Command logging

#+begin_src emacs-lisp
(use-package command-log-mode)
#+end_src

* Key bindings

I make use of ~general~ to organise keybindings.
#+begin_src emacs-lisp
(use-package general)
#+end_src

Someday I need to also setup ~hydra~ for keybindings which may be
repeated several times. Or maybe it will replace ~general~ altogether.

** ~general~ definers

You can use ~general-define-key~ directly to define shortcuts,
ideally using the keyword argument ~:prefix~ to avoid repeating
prefixes, but if you are (even only possibly)
using a prefix several times,
it's better to create a custom function to use instead of
~general-define-key~.

Setting ~:keymaps~ to ~'override~ ensures that no package will
override my shortcuts.

For the moment, I'm experimenting with using ~s~-key (“super”-key)
combinations as prefixes. I have my caps lock bound to super
(on my Chromebook's internal keyboard it's bound to that by
default), and I think if I restrict the combination keys to
those on the left side of the keyboard, I can avoid “Emacs pinky”.

So far I have three categories of shortcuts:
- My main shortcuts, those that don't fall into another category.
- Shortcuts to navigate around the current buffer and window.
- Shortcuts to navigate tabs (window configurations).
- Shortcuts to open a ~dired~ buffer for a certain folder.
#+begin_src emacs-lisp
(general-create-definer general-main-define-key
  :prefix "s-q"
  :keymaps 'override)

(general-create-definer general-window-define-key
  :prefix "s-w"
  :keymaps 'override)

(general-create-definer general-tab-define-key
  :prefix "s-t"
  :keymaps 'override)

(general-create-definer general-dired-define-key
  :prefix "s-d"
  :keymaps 'override)
#+end_src

** Invoke processes

These bindings invoke various processes, such as ~dired~ or ~eshell~.
They either have their own definer above, or are bound to a single key combo.

*** COMMENT ~xah-fly-keys~ command mode

#+begin_src emacs-lisp
(general-define-key
  "s-c" 'xah-fly-mode-toggle)
#+end_src

*** ~yankpad~

I use a non-prefixed shortcut for snippet expansion, since
I do it all the time.
(at least until yankpad has smart tab expansion).
#+begin_src emacs-lisp
(general-define-key
  "s-f" 'yankpad-expand)
#+end_src

Alternatively, ~y m~ invokes ~yankpad-map~, which brings up a
keymap of the last tags of snippets.
#+begin_src emacs-lisp
(general-main-define-key
  "y m" 'yankpad-map)
#+end_src

Changes to the yankpad file require ~yankpad-reload~ to be run
to re-cache the snippets. For the moment, it seems like there is
separate caching for each buffer, meaning this command has to be
run in every buffer where I want changes to be picked up.
So, I have a shortcut key.
#+begin_src emacs-lisp
(general-main-define-key
  "y r" 'yankpad-reload)
#+end_src

*** ~dired~

**** Jumping to specific buffers

There are some files so commonly used, I want shortcuts directly to them
(in fact, usually these files are perpetually kept open).
These shortcuts then don't involve ~dired~, but they are lumped in here anyway.

#+begin_src emacs-lisp
(general-dired-define-key
  "s" '(:ignore t :which-key "Scratch buffers")
  "sa" '((lambda () (interactive)
           (find-file "~/Dropbox/McMaster/Agda/agda-scratch.agda"))
         :which-key "Agda scratch")
  "so" '((lambda () (interactive)
           (find-file "~/Dropbox/Organisation/org-scratch.org"))
         :which-key "Org scratch")
  "e" '((lambda () (interactive)
           (find-file "~/Dropbox/Organisation/setup/emacs/emacs-init.org"))
         :which-key "Emacs init")
)
#+end_src

**** Files not(?) already opened

I use shortcuts to jump to frequently used directories in ~dired~
(from any buffer, not just while in ~dired~).

As seen in ~Cosmetics~, I use ~dired-single~ in order to only have one
~dired~ buffer at a time. In case this changes, I define another
local variable to store the command to invoke ~dired~ with.
#+begin_src emacs-lisp
(defun my-dired-invocation (directory)
  "My custom dired invocation.
   It will use my special “magic buffer” for browsing."
  (dired-single-magic-buffer directory))
#+end_src

#+begin_src emacs-lisp
(general-dired-define-key
  "c" '((lambda () (interactive)
          (my-dired-invocation default-directory))
        :which-key "Current")
  "h" '((lambda () (interactive)
          (my-dired-invocation "~"))
        :which-key "Home")
  "d" '((lambda () (interactive)
          (my-dired-invocation "~/Dropbox/"))
        :which-key "Dropbox")
  "o" '((lambda () (interactive)
          (my-dired-invocation "~/Dropbox/Organisation/"))
        :which-key "Organisation")
  "r" '((lambda () (interactive)
          (my-dired-invocation "~/Dropbox/Organisation/reading/"))
        :which-key "Organisation")
  "p" '((lambda () (interactive)
          (my-dired-invocation "~/Dropbox/Projects/"))
        :which-key "Projects")
  "m" '((lambda () (interactive)
          (my-dired-invocation "~/Dropbox/McMaster/"))
        :which-key "McMaster")
  "a" '((lambda () (interactive)
          (my-dired-invocation "~/Dropbox/McMaster/Agda/"))
        :which-key "Agda")
  "t" '((lambda () (interactive)
          (my-dired-invocation "~/Dropbox/McMaster/Agda/thesis/"))
        :which-key "Thesis")
  "3" '(:ignore t :which-key "3rd year classes")
  "3m" '((lambda () (interactive)
          (my-dired-invocation "~/Dropbox/McMaster/3mi3/"))
        :which-key "3mi3")
  "3e" '((lambda () (interactive)
          (my-dired-invocation "~/Dropbox/McMaster/3ea3/"))
        :which-key "3ea3")
)
#+end_src

*** ~eshell~

#+begin_src emacs-lisp
(general-define-key
  "s-s" 'eshell)
#+end_src

*** ~magit~

I often find myself using ~s-g~ in place of ~c-g~ when using my keybindings
(which begin with super). So, I avoid using it for starting ~magit~.

#+begin_src emacs-lisp
(general-define-key
  "s-v" 'magit-status
)
#+end_src

*** ~mu4e~

#+begin_src emacs-lisp
(general-define-key
  "s-m" 'mu4e
)
#+end_src

*** ~recentf~

#+begin_src emacs-lisp
(general-define-key
  "s-r" 'recentf-open-files
)
#+end_src

*** ~list-processes~

#+begin_src emacs-lisp
(general-define-key
  "s-p" 'list-processes
)
#+end_src

** Buffer navigation and management, window and theme management

Somewhat sinfully, here I group shortcuts relating to the buffer,
the window(s) and the cosmetics of the frame,
into one (conceptual) category: “window”, prefix ~w~.

#+begin_src emacs-lisp
(general-window-define-key
  "r" '((lambda () (interactive) (revert-buffer () t ()))
        :which-key "Revert buffer")
  "u" '((lambda () (interactive) (undo-tree-visualize))
        :which-key "Undo tree")

  "s"   '(:ignore t
          :which-key "Session management")
  "s c" '((lambda () (interactive) (desktop-clear))
          :which-key "Session clear")

  "b"   '(:ignore t
          :which-key "Buffer navigation")
  "b t" '((lambda () (interactive) (beginning-of-buffer))
          :which-key "Top of buffer")
  "b b" '((lambda () (interactive) (end-of-buffer))
          :which-key "Bottom of buffer")

  "t"   '(:ignore t
          :which-key "Theme management")
  "t t" '((lambda () (interactive) (toggle-my-themes))
          :which-key "Toggle theme")
  "t c" '((lambda () (interactive) (disable-all-custom-themes))
          :which-key "Clear theme")

  "<right>" '((lambda () (interactive) (windmove-right))
              :which-key "Move focus right")
  "<left>"  '((lambda () (interactive) (windmove-left))
              :which-key "Move focus left")
  "<up>"    '((lambda () (interactive) (windmove-up))
              :which-key "Move focus up")
  "<down>"  '((lambda () (interactive) (windmove-down))
              :which-key "Move focus down")

  "\\" '((lambda () (interactive)
                 (cascading-find-files my-initial-files))
         :which-key "My initial windows")
  "["  '(winner-undo
         :which-key "Undo layout change")
  "]"  '(winner-redo
         :which-key "Redo layout change")

  "-"     '((lambda () (interactive) (shrink-window 5))
            :which-key "Shrink window")
  "="     '((lambda () (interactive) (enlarge-window 5))
            :which-key "Enlarge window")
  "_"     '((lambda () (interactive) (shrink-window 999))
            :which-key "“Minimise” window")
  "+"     '((lambda () (interactive) (enlarge-window 999))
            :which-key "“Maximise”  window")

  "o"   '(:ignore t
          :which-key "Org cosmetics")
  "o i"   '(:ignore t
            :which-key "Org indent")
  "o i y" '((lambda () (interactive) (org-indent-mode 1))
            :which-key "Org indent yes")
  "o i n" '((lambda () (interactive) (org-indent-mode 0))
            :which-key "Org indent no")
)
#+end_src

** Tab management

#+begin_src emacs-lisp
(general-tab-define-key
  "r" '(tab-rename
        :which-key "Rename tab")
  "k" '(tab-close
        :which-key "Kill tab")

  "<right>" '(tab-next
              :which-key "Next tab")
  "<left>"  '(tab-previous
              :which-key "Previous tab")
  "<down>"  '(tab-recent
              :which-key "Recent tab")
  "<up>"    '(tab-undo
              :which-key "Undo close tab")
  "S-<right>" '((lambda () (interactive) (tab-move 1))
              :which-key "Move left")
  "S-<left>"  '((lambda () (interactive) (tab-move -1))
              :which-key "Move right")

  "1" (lambda () (interactive) (tab-select 1))
  "2" (lambda () (interactive) (tab-select 2))
  "3" (lambda () (interactive) (tab-select 3))
  "4" (lambda () (interactive) (tab-select 4))
  "5" (lambda () (interactive) (tab-select 5))
  "6" (lambda () (interactive) (tab-select 6))
  "7" (lambda () (interactive) (tab-select 7))
  "8" (lambda () (interactive) (tab-select 8))
  "9" (lambda () (interactive) (tab-select 9))
  "0" (lambda () (interactive) (tab-select 10))
  "-" (lambda () (interactive) (tab-select 11))
  "=" (lambda () (interactive) (tab-select 12)))
#+end_src

** Other

These are cosmetics relating to lines in the current buffer.
#+begin_src emacs-lisp
(general-main-define-key
  "l"     '(:ignore t
            :which-key "Line cosmetics")
  "l n"   '(:ignore t
            :which-key "Line numbers")
  "l n y" '((lambda () (interactive) (display-line-numbers-mode 1))
            :which-key "Line numbers - yes")
  "l n n" '((lambda () (interactive) (display-line-numbers-mode 0))
            :which-key "Line numbers - no")
  "l w"   '(:ignore t
            :which-key "Line wrap")
  "l w y" '((lambda () (interactive) (visual-line-mode 1))
            :which-key "Line wrap - yes")
  "l w n" '((lambda () (interactive) (visual-line-mode 0))
            :which-key "Line wrap - no"))
#+end_src

Line highlighting has been reduced; I don't need this anymore.
#+begin_example emacs-lisp
;  "l h"   '(:ignore t
;            :which-key "Long line highlighting")
;  "l h y" '((lambda () (interactive) (whitespace-mode 1))
;            :which-key "Long line hightlight - yes")
;  "l h n" '((lambda () (interactive) (whitespace-mode 0))
;            :which-key "Long line hightlight - yes")
#+end_example

Sometimes I need to toggle fontlocking.
#+begin_src emacs-lisp
(general-main-define-key
  "f"     '(:ignore t
            :which-key "Font lock")
  "f y"   '((lambda () (interactive)
              (font-lock-mode t))
            :which-key "Font lock - yes")
  "f n"   '((lambda () (interactive)
              (font-lock-mode 0))
            :which-key "Font lock - no"))
#+end_src

#+begin_src emacs-lisp
(general-main-define-key
  "j" 'dad-joke
)
#+end_src

** Number pad bindings

I make use of the number pad as an alternate set of arrow keys.
Specifically, 
#+begin_src text
  8    ≈    ↑
4 5 6  ≈  ← ↓ →
#+end_src
The number pad 5 has a tactile bump, making it easy to find without looking.
#+begin_src emacs-lisp
(define-key function-key-map (kbd "<kp-4>")   (kbd "<left>"))
(define-key function-key-map (kbd "<kp-5>")   (kbd "<down>"))
(define-key function-key-map (kbd "<kp-6>")   (kbd "<right>"))
(define-key function-key-map (kbd "<kp-8>")   (kbd "<up>"))
#+end_src

From what I understand, using ~global-set-key~ may have been better,
but in usage, it fails to “globally” translate the numpad keys.
Specifically, they are not translated when part of a multi-key
shortcut, such as my window switching shortcuts
(e.g., ~s-w <kp-4>~ does not get translated to ~s-w <left>~).
#+begin_example emacs-lisp
(global-set-key (kbd "<kp-4>")   (kbd "<left>"))
(global-set-key (kbd "<C-kp-4>") (kbd "<C-left>"))
(global-set-key (kbd "<kp-5>")   (kbd "<down>"))
(global-set-key (kbd "<C-kp-5>") (kbd "<C-down>"))
(global-set-key (kbd "<kp-6>")   (kbd "<right>"))
(global-set-key (kbd "<C-kp-6>") (kbd "<C-right>"))
(global-set-key (kbd "<kp-8>")   (kbd "<up>"))
(global-set-key (kbd "<C-kp-8>") (kbd "<C-up>"))
#+end_example

(These settings are, at least momentarily, disabled).
The keys above my new left and right I bind as shortcuts to the
modified arrow keys (so they act as ~left-word~ and ~right-word~ by default,
and ~forward-sexp~ and ~backward-sexp~ when modified with control).
#+begin_example emacs-lisp
(global-set-key (kbd "<kp-7>")   (kbd "<C-left>"))
(global-set-key (kbd "<C-kp-7>") (kbd "<C-M-left>"))
(global-set-key (kbd "<kp-9>")   (kbd "<C-right>"))
(global-set-key (kbd "<C-kp-9>") (kbd "<C-M-right>"))
#+end_example

* Navigation

** Jump between windows using ~windmove~

The package ~windmove~ lets us jump between windows in a frame.

#+begin_src emacs-lisp
(use-package windmove)
#+end_src

For the uninitiated, a /window/ in Emacs is not the same as
the OS window. Each OS window is a /frame/, and each pane within
a frame is called a /window/. (Emacs predates modern terminology).

~windmove~ lets us move between windows with the arrow keys
while holding a key; by default, the key is ~shift~.
That conflicts with ~org~ though, so we could use
~windmove-default-keybindings~ to change it.

Unfortunately, on my system, all the other possibilities seem
to be taken with system shortcuts (which I cannot modify in ChromeOS),
or otherwise taken in Emacs.

So instead I've defined shortcuts using ~general~ above.

** Change scrolling (shortcut) behaviour

I find the scrolling shortcuts ~scroll-up-command~ (~C-v~)
and ~scroll-down-command~ (~M-v~) “too aggressive”.
They scroll the screen by nearly the whole window height,
by default leaving visible only 2 lines which were visible.

I find adjusting this upwards makes it easier to follow along
with a document as scrolling.
#+begin_src emacs-lisp
(setq next-screen-context-lines 16)
#+end_src

Keep in mind ~recenter~ (~C-l~) when scrolling this way to recenter
the screen on the current line.

* Cosmetics

** Fonts

I like the Cousine font, and usually use a small 11in screen,
and so use a small font; 9pt seems to be a sweet spot.
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist
             '(font . "Cousine-9"))
#+end_src

** Themes

I've built up a small collection of themes.
#+begin_src emacs-lisp
(use-package doom-themes)
(use-package modus-vivendi-theme)
(use-package modus-operandi-theme)
#+end_src

By default, I prefer a dark theme,
but like to toggle between it and a light theme at need.
#+begin_src emacs-lisp
;; Doom themes I used previously
;;(setq my/dark-theme 'doom-vibrant)
;;(setq my/light-theme 'doom-nord-light)

(setq my/dark-theme 'modus-vivendi)
(setq my/light-theme 'modus-operandi)

(load-theme my/dark-theme t)
#+end_src

This is recommended for making the Doom themes “play nice” with Org.
#+begin_src emacs-lisp
;(doom-themes-org-config)
#+end_src

*** Toggling the themes

These functions allow me to clear and toggle my themes.
#+begin_src emacs-lisp
(defun disable-all-custom-themes ()
  "Disable all custom themes.
   Returns the previous highest precendence theme
   (nil if no themes were previously enabled).

   Implementation:
     Gets the highest precedence applied theme as the first element
     of custom-enabled-themes.

     Then iteratively disables all the themes in custom-enabled-themes.
  "
  (let ((most-recent-theme (car custom-enabled-themes)))
    (while (car custom-enabled-themes)
      (disable-theme (car custom-enabled-themes)))
    most-recent-theme))

(defun toggle-my-themes ()
  "Disable all custom, then try to toggle the themes
   my-dark-theme and my-light-theme, in that if one was
   the last applied theme, the other will be applied.

   If neither was the last applied theme, my-dark-theme
   will be applied as a default.
  "

  (let ((most-recent-theme (disable-all-custom-themes)))
    (if (eq most-recent-theme my/dark-theme)
        (load-theme my/light-theme t)
        (load-theme my/dark-theme t))))
#+end_src

** Displaying/removing information and interface elements

There are several tweaks I like to display important information
and hide unimportant information or interface elements.

*** Remove unnecessary interface elements

Emacs usually shows a splash screen on startup,
which doesn't interest me.
#+begin_src emacs-lisp
(setq inhibit-splash-screen t)
#+end_src

I don't use the tool bar (icons below the menu bar).
(This setting must be ~-1~, not ~nil~).
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

I also don't use the menu bar.
(Again, this must be ~-1~, not ~nil~).
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src

I also disable the scroll bars.
#+begin_src emacs-lisp
(scroll-bar-mode -1)
#+end_src

*** Prompts for important things

I rarely /actually/ want to close Emacs, so it should always
prompt if I accidentally ask to close.

#+begin_src emacs-lisp
(setq confirm-kill-emacs 'yes-or-no-p)
#+end_src

*** The mode line

**** Taking the Spacemacs modeline

While I don't use Spacemacs, I do like it's sleek modeline.
#+begin_src emacs-lisp
(use-package spaceline)
#+end_src

Using ~spaceline-emacs-theme~ instead
of ~spaceline-spacemacs-theme~ should improve compatibility.
#+begin_src emacs-lisp
(spaceline-emacs-theme)
#+end_src

**** Information to display

:TODO:

**** Colour the modeline

This setting changes the colour of the start of the modeline
when the file has been modified and not saved,
a nice subtle reminder to save.
#+begin_src emacs-lisp
(setq spaceline-highlight-face-func
  'spaceline-highlight-face-modified)
#+end_src

In fact, let's make that colouring constant across themes.
#+begin_src emacs-lisp
(custom-theme-set-faces
 'user
 ;; The active buffer has a fairly vibrant blue modeline
 '(mode-line         ((t (:foreground "black"
                          :background "DeepSkyBlue1"))))
 '(powerline-active0 ((t (:foreground "black"
                          :background "DeepSkyBlue2"))))
 '(powerline-active1 ((t (:foreground "black"
                          :background "DeepSkyBlue3"))))
 '(powerline-active2 ((t (:foreground "black"
                             :background "DeepSkyBlue4"))))

 ;; The inactive buffers have less vibrant gray/blue modelines
 '(mode-line-inactive  ((t (:foreground "black"
                            :background "LightSkyBlue1"))))
 '(powerline-inactive0 ((t (:foreground "black"
                            :background "LightSkyBlue2"))))
 '(powerline-inactive1 ((t (:foreground "black"
                            :background "LightSkyBlue3"))))
 '(powerline-inactive2 ((t (:foreground "black"
                             :background "LightSkyBlue4"))))

 ;; Highlighting based on save status of buffer
 '(spaceline-unmodified ((t (:foreground "black"
                             :background "green1"))))
 '(spaceline-modified   ((t (:foreground "black"
                             :background "gold1"))))
 '(spaceline-read-only  ((t (:foreground "black"
                             :background "seashell1")))))
(powerline-reset)
#+end_src

**** Flash on error

The doom themes package comes with a function to make
the mode line flash on error.
#+begin_src emacs-lisp
(require 'doom-themes-ext-visual-bell)
(doom-themes-visual-bell-config)
#+end_src

I'd previously just used ~visible-bell~, but it's a bit nosier
than necessary.
#+begin_src emacs-lisp
;;(setq visible-bell t)
#+end_src

**** COMMENT Default modeline configuration

These configurations don't rely upon a package,
in case I want to return to the vanilla modeline in the future.

I also like the mode line to show the data and time.
#+begin_src emacs-lisp
(setq display-time-day-and-date t)
(setq display-time-24h-format t)
(display-time)
#+end_src

It's also useful to see the line number and column number.
#+begin_src emacs-lisp
(line-number-mode t)
(column-number-mode t)
#+end_src

**** Diminish minor mode names

I use a lot of minor modes, so the mode list takes up a lot
of space on the mode line.

~diminish-mode~ alleviates this by allowing us to hide modes
or give them shorter names.

#+begin_src emacs-lisp
(use-package diminish)
#+end_src

I don't need to see that these modes are active.
#+begin_src emacs-lisp
(eval-after-load "yas-minor-mode" '(diminish 'yas-minor-mode))
(eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
(eval-after-load "undo-tree" '(diminish 'undo-tree-mode))
(eval-after-load "which-key" '(diminish 'which-key-mode))
(eval-after-load "org-indent" '(diminish 'org-indent-mode))
#+end_src

If later I want to rename modes, just add a string argument
to the above form with a (presumably shorter) name.

*** Show line numbers on left

As of Emacs 26, ~display-line-numbers-mode~ is the “proper”
way to display line numbers next to a buffer.
#+begin_src emacs-lisp
;; (global-display-line-numbers-mode)

(add-hook 'text-mode-hook 'display-line-numbers-mode)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

I find it concerning when the width of the column
used for line numbers grows throughout the document;
it makes me think Org mode headlines further down are nested.
Setting ~display-line-numbers-width-start~ causes the system
to count the number of lines when opening a buffer, and
set the minimum width necessary to display all line numbers.
It wastes some screen space, but is good for my sanity.
#+begin_src emacs-lisp
(setq display-line-numbers-width-start t)
#+end_src

Since line numbers can be distracting in some instances,
see [[Key bindings]] for toggles to turn it off.

**** For older versions of Emacs

In older versions, we can use ~linum-mode~, but
- it interacts poorly with ~pdf-tools~, so we don't want to
  enable it globally, and
- it makes Emacs quite laggy when working with larger files.
So I generally just work without line numbers in older versions.

#+begin_src emacs-lisp
;;(add-hook 'text-mode-hook 'linum-mode)
;;(add-hook 'prog-mode-hook 'linum-mode)
#+end_src

*** Delimiters (parentheses)

**** Highlight matching delimiters

It's nice to highlight the matching delimiter when the cursor
is on its match.
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src

Since I use ~rainbow-delimiters~, it's actually distinctive
to colour the matching delimiter in plain white,
rather than the default red.
In case we're in a light theme though, set the background
to be black.
#+begin_src emacs-lisp
(custom-theme-set-faces
 'user
 '(show-paren-match ((t (:foreground "white"
                         :background "black"
                         :weight ultra-bold)))))
#+end_src

**** ~<~ and ~>~ are not delimiters

Don't treat angle brackets as delimiters; even when writing
HTML or XML, I don't want them to qualify as delimiters for
the purpose of ~show-paren-mode~, ~check-paren~ and ~rainbow-delimiters~.
Treat them as symbols instead (this is the meaning of ~_~ in the
syntax table).
#+begin_src emacs-lisp
(defun my/<>-symbol-syntax ()
  (modify-syntax-entry ?> "_")
  (modify-syntax-entry ?< "_"))
#+end_src

~modify-syntax-table~ works on the current buffer
(unless given a buffer as optional argument)
and so we need to apply those modifications in each buffer.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'my/<>-symbol-syntax)
(add-hook 'prog-mode-hook 'my/<>-symbol-syntax)
(add-hook 'text-mode-hook 'my/<>-symbol-syntax)
#+end_src

The ~org-mode~ function modifies the entries when run,
and ~yankpad~ runs it regularly (albeit in a temporary buffer,
but the modification “leaks”), so we need to undo those
modifications.
#+begin_src emacs-lisp
(defadvice org-mode (after override-<>-syntax activate)
  (my/<>-symbol-syntax))
#+end_src

Side note: I'm honestly uncertain if the “leaking” of
the syntax entry modifications from temporary buffers is a bug.
It's likely just unintuitive behaviour.
It can be observed easily; just modify the entry for i.e. ~<~,
and evaluate
#+begin_example emacs-lisp
(with-temp-buffer
  (org-mode))
#+end_example
and observe your modifications are undone.

Do treat these unicode symbols as delimiters.
The first character in each entry means either
- “open delimiter”, if it's a ~(~, or
- “close delimiter”, if it's a ~)~.
The second symbol designates the matching delimiter. 
#+begin_src emacs-lisp
(defun my/unicode-delimiter-syntax ()
  (modify-syntax-entry (string-to-char "⟨") "(⟩")
  (modify-syntax-entry (string-to-char "⟩") ")⟨")
  (modify-syntax-entry (string-to-char "⟪") "(⟫")
  (modify-syntax-entry (string-to-char "⟫") ")⟪")
  (modify-syntax-entry (string-to-char "⟦") "(⟧")
  (modify-syntax-entry (string-to-char "⟧") ")⟦")
  (modify-syntax-entry (string-to-char "⁅") "(⁆")
  (modify-syntax-entry (string-to-char "⁆") ")⁅")
  (modify-syntax-entry (string-to-char "｛") "(｝")
  (modify-syntax-entry (string-to-char "｝") ")｛"))
#+end_src

Apply those syntax entry modifications.
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'my/unicode-delimiter-syntax)
(add-hook 'text-mode-hook 'my/unicode-delimiter-syntax)
#+end_src

**** Rainbow delimiters

The package ~rainbow-delimiters~ goes ones step further than
highlighting the delimiter matching the one under cursor;
it makes the matching of all delimiters
obvious by using various colours.
Each level of nesting uses a different colour.
#+begin_src emacs-lisp
(use-package rainbow-delimiters)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
(add-hook 'text-mode-hook #'rainbow-delimiters-mode)
#+end_src

One caveat: in some modes, it is not clear which delimiters
should be matched and which not.

For an example of this, see my settings for the Org emphasis
regular expressions, which require some commented out
delimiters to avoid breaking all delimiter matching
later in this file.

***** COMMENT The faces for the delimiters

*If I want to do this, I'll need to find a way*
*to set the colours to be theme appropriate;*
*these settings look fine in dark, but bad in light*.

With rainbow delimiters enabled, I become used
to associating colours with nesting depths.
To make the colouring consistent across themes,
I set it explicitely.

The general order is blues and purples, greens, then reds and pinks;
so, reverse RGB. The colour darkens as we go.
#+begin_src emacs-lisp
((((((((()))))))))
#+end_src

#+begin_src emacs-lisp
(custom-theme-set-faces
 'user
 ;; Blues
 '(rainbow-delimiters-depth-1-face ((t (:foreground "cyan"))))
 '(rainbow-delimiters-depth-4-face ((t (:foreground "violet"))))
 '(rainbow-delimiters-depth-7-face ((t (:foreground "purple"))))

 ;; Greens
 '(rainbow-delimiters-depth-2-face ((t (:foreground "pale green"))))
 '(rainbow-delimiters-depth-5-face ((t (:foreground "lime green"))))
 '(rainbow-delimiters-depth-8-face ((t (:foreground "sea green"))))

 ;; Reds
 '(rainbow-delimiters-depth-3-face ((t (:foreground "light pink"))))
 '(rainbow-delimiters-depth-6-face ((t (:foreground "hot pink"))))
 '(rainbow-delimiters-depth-9-face ((t (:foreground "deep pink")))))
#+end_src

*** Whitespace display

**** Tabs

I usually use spaces rather than tabs,
so I use ~whitespace-mode~ to alert me to the presence of tabs.
#+begin_src emacs-lisp
(global-whitespace-mode t)
#+end_src

Setting ~whitespace-style~ to ~tab-mark~ visualises tabs
by changing the display table to show a character at the
location of the tab.
#+begin_src emacs-lisp
(setq whitespace-style '(tab-mark))
#+end_src

**** Non-breaking spaces

Since I use unicode regularly, I do use non-breaking spaces
occasionally, especially for intraperiodic spaces, e.g.,
following ~Dr.~ or ~Mrs.~.
I do want to be aware of those spaces; thankfully there is
a face for that.
#+begin_src emacs-lisp
(custom-theme-set-faces
 'user
 '(nobreak-space ((t (:underline t)))))
#+end_src

**** Deprecated – more whitespace highlighting

I previously used ~whitespace-style~ to highlight
trailing whitespace; however, I find this feature intrusive,
so I avoid it.

If it is wanted later, then I should add to the list
#+begin_example emacs-lisp
(face trailing)
#+end_example
We need to add ~face~ to the list, to enable using faces
to highlight whitespace.

Note there is no way to visualise spaces only at the end of lines;
The visualisation is done by changing the display table,
and there is no ability to do so only in particular places.
Otherwise I would use that rather than highlighting.

*** Show ruler at 70 characters for (for ~text~ and ~prog~ mode)

It's good style to keep lines under 80 characters wide.
The built in ~display-fill-column-indicator-mode~ puts a ruler,
by default at 70 characters.
#+begin_src emacs-lisp
(global-display-fill-column-indicator-mode t)
#+end_src

Note that with ~org-indent-mode~, the ruler will be off
by the length of the indentation (i.e. it will be
at line 68 if indented 2 characters, 66 if indented 4, etc).

**** Deprecated – ~fci-mode~

In earlier versions of Emacs (< 27), 
the package ~fill-column-indicator~ could be used to get
the fill column ruler.

Note that this seems to cause some noticable lag.

The code to make it a global mode is from the
[[https://www.emacswiki.org/emacs/FillColumnIndicator][Emacs wiki]].
#+begin_src emacs-lisp
;;(use-package fill-column-indicator)
;;(define-globalized-minor-mode global-fci-mode
;;  fci-mode (lambda () (fci-mode t)))
;;(global-fci-mode t)
#+end_src

If I later need it enabled only for certain modes,
this code could be of use.
#+begin_src emacs-lisp
;; (use-package fill-column-indicator)
;; (add-hook 'text-mode-hook 'fci-mode)
;; (add-hook 'prog-mode-hook 'fci-mode)
#+end_src

After some use, I've found this indicator to be a combination
of distracting and possibly causing some lag, so I no longer use
it. ~whitespace-mode~ (set up above) makes a good alternative.

*** More noticable divider between windows

One problem with a fill column ruler is that it can seem like
it is the divider between windows.

For that reason, I like to have a more noticable divider
between windows. ~window-divider-mode~ provides this.
#+begin_src emacs-lisp
(window-divider-mode)
#+end_src

The default settings seem fine for the moment,
so no customisation here.

*** Don't wrap lines

Since I make an effort to keep my lines under 80 characters,
I usually won't have lines too long for the window.

Previously, I enabled ~visual-line-mode~ to “wrap” lines which
are too long; This is very annoying when working with a file
with lots of long lines, so I no longer enable it by default.
There is a shortcut under [[Key bindings]] to toggle it if needed.
#+begin_src emacs-lisp
;; Enable line wrapping everywhere; not recommended.
;; (global-visual-line-mode t)

;; Enable line wrapping almost everywhere; also not recommended.
;;(add-hook 'text-mode-hook 'visual-line-mode)
;;(add-hook 'prog-mode-hook 'visual-line-mode)
#+end_src

**** Disable builtin line wrapping

Emacs wraps lines in some modes by default
(I am honestly unsure which modes).
We can disable this by setting ~truncate-lines~ to ~t~ by default.
#+begin_src emacs-lisp
(set-default 'truncate-lines t)
#+end_src

**** Killing lines in ~visual-line-mode~

One annoying feature of ~visual-line-mode~, at least in recent
versions, is that it redefines a kill to only kill to the end
of the visual line, rather than the whole line.
This design decision can be reversed; thanks to the
[[https://emacs.stackexchange.com/questions/13279/][Stack overflow]]
contributor.
#+begin_src emacs-lisp
(define-key visual-line-mode-map [remap kill-line] 'kill-line)
#+end_src
Org mode also interferes with killing the whole line;
it rebinds ~C-k~ to be ~org-kill-line~, which seems to kill the
visual line. Let's undo that rebinding.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
  (lambda ()
    (define-key org-mode-map "\C-k" 'kill-line)))
#+end_src

*** Emoticons

I was using this package to add support for unicode emoticon characters,
which did not display correctly otherwise (no font I had handled them?).
Improving my unicode font support seems to be a better idea;
in particular, one problem with ~emojify~ is it changes characters
such as ~↔~ (left to right arrow) to emoticons, which I definitely do not want.
#+begin_src emacs-lisp
;;(use-package emojify)
;;(add-hook 'after-init-hook #'global-emojify-mode)
#+end_src

Instead, it's best to just install fonts supporting the unicode characters
I want. In particular, the Symbola font, which on Debian
can be installed via the ~fonts-symbola~ package.

:TODO: Look into more efficiently handling fallback fonts.
It might be somewhat inefficient to leave it up to Emacs
to search my system for appropriate fonts to display characters.
See [[https://idiocy.org/emacs-fonts-and-fontsets.html]]
and [[https://emacs.stackexchange.com/questions/17205/]].

There's also this package to help with Unicode fonts,
but it doesn't seem necessary for me.
[[https://github.com/rolandwalker/unicode-fonts]]

*** Dim buffers when not in use

The package ~dimmer~ will dim inactive windows to emphasise which
window has focus.
See its [[https://github.com/gonewest818/dimmer.el][Github page]].
#+begin_src emacs-lisp
(use-package dimmer)
#+end_src

Turn ~dimmer-mode~ on when Emacs starts.
#+begin_src emacs-lisp
(dimmer-mode)
#+end_src

Don't dim ~which-key~ and ~helm~ buffers.
#+begin_src emacs-lisp
(dimmer-configure-which-key)
(dimmer-configure-helm)
#+end_src

We can adjust the ~:foreground~ colours, the ~:background~ colours,
or ~:both~. With a dark theme, adjusting the background causes
the background to become lighter in inactive buffers,
which “looks wrong” (makes them looked like they have focus).
So I set this to just ~:foreground~ (which is the default anyway).
#+begin_src emacs-lisp
(setq dimmer-adjustment-mode :foreground)
#+end_src

I find the default dimming of ~20%~ to be too faint;
it is noticeable when changing windows, but it does not
remain noticeable enough later (e.g. when I look away from Emacs
then look back). Doubling that to ~40%~ seems to be sufficient,
while maintaing the readability of unfocussed buffers.
#+begin_src emacs-lisp
(setq dimmer-fraction 0.4)
#+end_src

Note that by default, all windows will be dimmer when Emacs
notices that it does not have focus in the windowing system.
I like this behaviour; it could be changed by changing
the variable ~dimmer-watch-frame-focus-events~.

*** Tab-bar

#+begin_src emacs-lisp
(tab-bar-mode)
#+end_src

The default colouring is a basic Emacs grey;
let's spruce it up.
#+begin_src emacs-lisp
(custom-theme-set-faces
 'user
 '(tab-bar ((t
     (:foreground "black"
      :background "DarkSlateGray4"))))
  '(tab-bar-tab ((t
     (:foreground "black"
      :background "DarkSlateGray3"
      :box (:line-width 1 :style released-button)))))
  '(tab-bar-tab-inactive ((t
     (:foreground "black"
      :background "DarkSlateGray4"
      :box (:line-width 1 :style released-button))))))
#+end_src

If the tab bar is to take up space anyway, let's make use of it
and display a clock up there too.
This code taken from a post in the
[[https://lists.gnu.org/archive/html/emacs-devel/2019-10/msg00685.html][Emacs developer mailing list]].
Note that it's not live updating, though!
#+begin_src emacs-lisp
(advice-add 'tab-bar-make-keymap-1 :around
  (lambda (orig-fun)
    (append (funcall orig-fun)
            `((display-time menu-item
               ,(concat
                 (propertize " "
                             'display
                             '(space :align-to
                                (- right
                                  (+ 16    ;; For the time string
                                     4)))) ;; For some breathing room
                 (format-time-string "%a %b %d %R"))
               ignore))))
  '((name . tab-bar-display-time)))
#+end_src

Do show numbers on tabs, for the purpose of quickly changing.
#+begin_src emacs-lisp
(setq tab-bar-tab-hints 't)
#+end_src

** Automatically revert unchanged files which change on the disk

#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

** Show possible completions as I type shortcuts

#+begin_src emacs-lisp
(use-package which-key)
(which-key-mode)
#+end_src

** Provide a visualisation of my undo tree

In Emacs, changes to a buffer are stored using a tree,
rather than a stack.

In most editors if we revert to an earlier state using “undo”
and then make some changes, we can no longer reach the
state /before/ the “undo”, because it was popped of the stack
and is now lost (the “redo” stack was lost when we made changes).

This doesn't happen with an “undo tree”!

I like to think of the undo tree as “extemely local” version control.

The package ~undo-tree~ provides a visualisation of the undo tree.

#+begin_src emacs-lisp
(use-package undo-tree)
(global-undo-tree-mode)
#+end_src

I like each node in the undo tree to have a timestamp;
it helps identify the node I want to return to.

#+begin_src emacs-lisp
(setq undo-tree-visualizer-timestamps t)
#+end_src

We can have a “diff” window display the changes made at each
node in the undo tree.

Unfortunately this seems to introduce a fair amount of lag
on my system.

#+begin_src emacs-lisp
;;(setq undo-tree-visualizer-diff ())
#+end_src

** Session setup and management

First, we opened my init file earlier;
kill that buffer now, so that cosmetic changes we made above
will be properly applied (when we reopen it).
#+begin_src emacs-lisp
(kill-buffer "emacs-init.org")
#+end_src

*** Tabs and buffers to open at startup

**** Filepaths

For maintainability, most files opened below
are listed here.
#+begin_src emacs-lisp
(setq-local my/organisation-dir "~/Dropbox/Organisation/")
(setq-local my/log-dir   (concat my/organisation-dir "log/"))
(setq-local my/setup-dir (concat my/organisation-dir "setup/"))
(setq-local my/emacs-dir (concat my/setup-dir "emacs/"))
(setq-local my/agda-dir  "~/Dropbox/McMaster/Agda/")

(setq-local my/emacs-init   (concat my/emacs-dir "emacs-init.org"))
(setq-local my/yankpad-file (concat my/emacs-dir "yankpad.org"))

(setq-local my/log-file (concat my/log-dir "log.org"))

(setq-local my/org-scratch  (concat my/organisation-dir "org-scratch.org"))
(setq-local my/agda-scratch (concat my/agda-dir "agda-scratch.agda"))
#+end_src

**** Create tabs

First, let's create some “consistent” tabs;
whatever projects I am working on, these tabs
will always be present.
- First, of course, is my Emacs init.
- Second, my Emacs init again, alongside a ~magit~ buffer for it.
- Second, my Org log and my email.
- Third, an ~eshell~ instance (separate from the one
  invoked by my ~eshell~ shortcut).
#+begin_src emacs-lisp
(tab-rename "Setup")
(tab-new)
(tab-rename "Setup ꇚ")
(tab-new)
(tab-rename "Log/email")
(tab-new)
(tab-rename "eshell")
#+end_src

Now, setup for some projects I am currently working on;
this section is volatile!
#+begin_src emacs-lisp
(tab-new)
(tab-rename "Thesis")
(tab-new)
(tab-rename "Thesis ꇚ")
(tab-new)
(tab-rename "Blog")
(tab-new)
(tab-rename "Blog ꇚ")
(tab-new)
(tab-rename "PoPL content")
(tab-new)
(tab-rename "PoPL admin")
(tab-new)
(tab-rename "PoPL ꇚ")
#+end_src

Finally, open a few “blank” tab as the rightmost,
for use when working on other/random things.
#+begin_src emacs-lisp
(tab-new)
(tab-rename " ")
(tab-new)
(tab-rename " ")
(tab-new)
(tab-rename " ")
#+end_src

**** Visit tabs and setup buffers

Now, let us visit the tabs, and set up the windows in them.
Since they're named (presumably uniquely),
we'll use ~tab-bar-switch-to-tab~ which takes a ~name~ argument.

My ~cascading-find-files~ sometime comes in handy here.

***** Consistent tabs

First, the ~Setup~ tab.
Here I want my Emacs init in my usual three window split
(two vertically split windows on the left, large single window on the right),
with ~Messages~ buffer on the lower left
and the ~Help~ buffer preemptively opened in the upper right.
#+begin_src emacs-lisp
(tab-bar-switch-to-tab "Setup")
(find-file my/emacs-init)
(split-window nil nil 'left)
; describe symbol will use the window not in focus, so the left
(describe-symbol 'describe-symbol)
; switch to the help window on the left
(other-window 1)
(split-window nil nil 'above)
(switch-to-buffer "*Messages*")
#+end_src

For ~Setup ꇚ~, I want my Emacs init on the right a magit buffer on t.
#+begin_src emacs-lisp
(tab-bar-switch-to-tab "Setup ꇚ")
(find-file my/emacs-init)
(split-window nil nil 'right)
(magit)
#+end_src

The ~Log/email~ tab is similar, but has my log on the left
and my inbox on the right.
#+begin_src emacs-lisp
(tab-bar-switch-to-tab "Log/email")
(find-file my/log-file)
(split-window nil nil 'left)
(mu4e-headers-search-bookmark (mu4e-get-bookmark-query ?i))
#+end_src

In the ~Shell~ tab, create buffers for three ~eshell~ instances
in the usual configuration. By passing a numeric argument,
we get unique buffers.
#+begin_src emacs-lisp
(tab-bar-switch-to-tab "eshell")
(eshell '3)
(split-window nil nil 'right)
(eshell '2)
(split-window nil nil 'below)
(eshell '1)
#+end_src

***** Volatile tabs

****** Thesis

My thesis involves Agda, so I want the Agda information buffer open.
I prefer that information buffer in the lower left,
the master file in the upper left, and the thesis directory on the right.
The ~git~ tab is setup the same way the ~Setup ꇚ~ tab is.
#+begin_src emacs-lisp
(let ((thesis-dir "~/Dropbox/McMaster/Agda/thesis/"))
  (let ((thesis-master (concat thesis-dir "master.lagda.org")))
    (tab-bar-switch-to-tab "Thesis")
    (find-file thesis-dir)
    (split-window nil nil 'right)
    (find-file thesis-master)
    (split-window nil nil 'above)
    (switch-to-buffer (agda2-info-buffer))

    (tab-bar-switch-to-tab "Thesis ꇚ")
    (find-file thesis-master)
    (split-window nil nil 'right)
    (magit)))
#+end_src

****** Blog (and personal website)

For the moment, my ~Blog~ tab setup is similar to the thesis setup,
because I blog about Agda.
#+begin_src emacs-lisp
(let ((github-io-dir "~/Dropbox/Organisation/websites/armkeh.github.io/"))
  (let ((github-io-main (concat github-io-dir "index.org")))
    (tab-bar-switch-to-tab "Blog")
    (find-file github-io-dir)
    (split-window nil nil 'right)
    (find-file github-io-main)
    (split-window nil nil 'above)
    (switch-to-buffer (agda2-info-buffer))

    (tab-bar-switch-to-tab "Blog ꇚ")
    (find-file github-io-main)
    (split-window nil nil 'right)
    (magit)))
#+end_src

****** Principles of Programming Languages

I use three tabs for my “Principles of Programming Languages”
course, 3mi3;
1. content production environment,
2. administration environment, and
3. ~git~ and website management environment.
#+begin_src emacs-lisp
(let ((popl-dir "~/Dropbox/McMaster/PoPL/"))
    (tab-bar-switch-to-tab "PoPL content")
    (find-file popl-dir)
    (split-window nil nil 'right)
    (split-window nil nil 'above)

    ; TODO, once the files are settled upon
    (tab-bar-switch-to-tab "PoPL admin")
    (find-file popl-dir)

    ; TODO: should be a website updater and possibly a docker image buffer
    (tab-bar-switch-to-tab "PoPL ꇚ")
    (find-file popl-dir)
    (split-window nil nil 'right)
    (magit))
#+end_src

***** Focus on the first tab

#+begin_src emacs-lisp
(tab-select 1)
#+end_src

**** COMMENT Old setup, before use of tabs

I like a bunch of files open (in the background) upon startup.
#+begin_src emacs-lisp
(setq my/initial-background-files
  '("~/Dropbox/Organisation/setup/emacs/yankpad.org"
    "~/Dropbox/McMaster/Agda/agda-scratch.agda"))
#+end_src
Along with this list, to facilite reseting the session
(/clearing the desktop/), we must maintain a list of regular
expressions matching the resulting buffer names,
so that they can be skipped when deleting buffers on a (soft) reset.
#+begin_src emacs-lisp
(setq my-initial-background-buffers-regexps
  '("tips-and-tricks.org"
    "yankpad.org"
    "agda-scratch.agda"
    "phone-log.org"))
#+end_src

Then there are files I want in focus (/on the desktop/) at startup.
These are opened using my ~my-desktop-initialise~ (defined above),
with the earlier files being to the right of and above the later files.
The last file will be in focus.
#+begin_src emacs-lisp
(setq my-initial-files
  '("~/Dropbox/Organisation/log/log.org"
    "~/Dropbox/Organisation/setup/emacs/emacs-init.org"
    "~/Dropbox/Organisation/org-scratch.org"))
#+end_src
As above, we need a list of regular expression matching the
resulting buffer names.
#+begin_src emacs-lisp
(setq my-initial-buffers-regexps
  '("log.org"
    "emacs-init.org"
    "org-scratch.org"))
#+end_src

*** COMMENT Opening the initial buffers

Note that this portion of the file should be /after/ any settings
that would affect these buffers.
Otherwise those settings will not apply in these buffers.

This portion of the file should only be run if the Emacs process
is not headless. In the case that Emacs is (presumably) running as a daemon,
as it does when initiating an asynchronous process such as
an Org async export process.
#+begin_src emacs-lisp
(if (display-graphic-p)
  (progn
   (loop for file in my-initial-background-files
     do (find-file file)
   )
   (cascading-find-files my-initial-files)
   (shrink-window 999))) ;; basically minimize it vertically
#+end_src

*** COMMENT Seeing recently visited files

Usually, I don't appreciate software opening in its previous state;
if I closed an application (especially Emacs),
there is probably a reason, and so I prefer a clean slate on startup.

Unfortunately, at one point my work machine developed a nasty habit
of turning off when put into sleep mode.
There's was a reddit
[[https://www.reddit.com/r/Crostini/comments/btwi1z/][thread]]
and a Chromium issue
[[https://bugs.chromium.org/p/chromium/issues/detail?id=968060][thread]]
regarding the issue.
It was actually fixed in an update almost immediately after
I incorporated these changes, so I don't make wide use of the
below setup.

The process of reopening everything several times
a day has become irritating, so I prefer
to recover the previous session each time.

~recentf-mode~ is a minor mode which builds a list of recently opened files;
see the [[https://www.emacswiki.org/emacs/RecentFiles][Emacs wiki]].
#+begin_src emacs-lisp
(recentf-mode 1)
#+end_src

By default, ~recentf-mode~ saves the list of recently opened on exit;
however, in the case of a crash, this hook is never executed.
Instead, we can set it up to be backed up regularly; say every 5 minutes.
#+begin_src emacs-lisp
(run-at-time nil (* 5 60) 'recentf-save-list)
#+end_src

*** COMMENT Buffers to preserve on session clear

Emac's internal buffers are preserved on a session clear,
but I additionally want to preserve the buffers I open on
startup.

#+begin_src emacs-lisp
(loop for buffer-re in my-initial-background-buffers-regexps
  do (add-to-list 'desktop-clear-preserve-buffers
                  buffer-re))
(loop for buffer-re in my-initial-buffers-regexps
  do (add-to-list 'desktop-clear-preserve-buffers
                  buffer-re))
#+end_src

** Smoother scrolling

#+begin_src emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed t) ;; don't accelerate scrolling
#+end_src

** “All the icons”

The package ~all-the-icons~ makes certain modes prettier
by adding icons for filetypes, etc.
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src
Note we must run ~all-the-icons-install-fonts~ in order to install
the icons.

~dired~ is probably the most important usage of this for me.
#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

* Other

** Run the “dropbox start” command to ensure dropbox is running on the system

I keep the script backed up in my Dropbox itself.
#+begin_src emacs-lisp
(start-process-shell-command "dropbox-start"
                             "*dropbox-start*"
                             "~/Dropbox/Organisation/scripts/dropbox.py start")
#+end_src

** Always use buffer input mode in mini buffer

Some commands which make use of the minibuffer don't use the input mode
I have set (Agda input mode); this is very annoying, so I set a hook
to always use the input mode of the current buffer when entering
the minibuffer.

Notably, ~string-rectangle~ was where I encountered this all the time.
The solution below was linked to in this
[[https://github.com/agda/agda/issues/3993][Agda issue]];
this StackExchange [[https://emacs.stackexchange.com/questions/38310][post]]
provides the solution.
#+begin_src emacs-lisp
;; TODO: this causes problems with ivy; the minibuffer “lags”
;; one keystroke behind scrolling through the suggestions.
;; Need to debug or raise issue.

;;(defun my-inherit-input-method ()
;;  "Inherit input method from `minibuffer-selected-window'."
;;  (let* ((win (minibuffer-selected-window))
;;         (buf (and win (window-buffer win))))
;;    (when buf
;;      (activate-input-method (buffer-local-value 'current-input-method buf)))))
;;
;;(add-hook 'minibuffer-setup-hook #'my-inherit-input-method)
#+end_src

** Copy certain files to my Google Drive after save

I make use of Orgzly on my Android phone for viewing
(and infrequently for editing) Org files.
It's particularly useful to keep my log file(s)
synchronised with my phone so I can view TODOs, etc.,
in an Orgzly widget.

So, I must somehow synchronise the relevant Org files
with my phone. Three repository options are available in Orgzly;
1. use a phone local folder as a repository,
2. use a Dropbox folder as a repository (with Dropbox installed), and
3. use a webdav location as a repository.
I do not have infrastructure for (3). I do use Dropbox,
so (2) might work, but I want to eventually move away from
Dropbox as it is losing many features (including already
support for my VM's filesystem, so I must “hack” it to work.)
So, (1) seems the best option, supposing I have some means
of keeping the contents of that folder up-to-date.

As I use a Chromebook, my Google Drive is already present
and synchronised on my machine
(albeit not in the Linux VM, but it can be shared with it.)
On the phone, Google Drive does not natively support
storing a folder locally, but the app DriveSync does provide this,
with many options.

So, here I must provide a way to keep certain Org files
synchronised with my Google Drive.

For the moment, I am interested in a one-way sync only;
from the computer to the phone.
So it suffices to copy the files to my Google Drive.
Specifically, I can do so whenever they are saved.

The simplest way to accomplish this seems to be a file-local hook.
Specifically, it should hook this function to ~after-save-hook~.
#+begin_src emacs-lisp
(defun save-to-drive (&optional subdir)
  (save-excursion
    (let ((drive "/mnt/chromeos/GoogleDrive/MyDrive/")
          (subdir (when subdir (concat subdir "/")))
          (name (file-name-nondirectory (buffer-file-name))))
     ;; Copy the file, overwriting if it exists.
     (copy-file name (concat drive subdir) t))))
#+end_src

Add a file-local setting such as the below execute the above on save.
#+begin_src text
# eval: (add-hook 'after-save-hook (lambda () (save-to-drive "org")) nil 'local)
#+end_src

* Temporary fixes

Herein I collect any workarounds I use to solve problems temporarily.

These should be truly temporary!

** ~org-strip-quotes~

In some versions of Org, ~org-strip-quotes~ was used in export functions,
but is not defined! It should be in ~lisp/org-macs.el~.

So I just define it here.
#+begin_src emacs-lisp
(defun org-strip-quotes (string)
  "Strip double quotes from around STRING, if applicable.
If STRING is nil, return nil."
  (org-unbracket-string "\"" "\"" string))
#+end_src

* TODO Ideas for additions

- ~C-c n l~ - Move remainder of line to the line below
  (insert newline at point and remove newline at end of the resulting line)

- ~C-c c l~ - Copy some number of lines before point

* COMMENT Generating the README.md for my Emacs repo

This code generates a ~README.md~ file for my Emacs repo,
including this file and other relevant files.

#+name: readme-generate
#+begin_src emacs-lisp :tangle no :results none :exports none
(with-temp-buffer
  (insert "#+Export_file_name: README

           This repository contains the files that make up my Emacs setup.

           For the moment, that is my (literate) Emacs initialisation file
           and my ~yankpad~ file of snippets.\n")
  (insert "* ~emacs-init.org~\n")
  (insert "#+include: emacs-init.org\n")
  (insert "* ~yankpad.org~\n")
  (insert "#+include: yankpad.org\n")
  (org-mode)
  (org-org-export-to-org)
  (erase-buffer)
  (insert "# THIS FILE IS GENERATED BY emacs-init.org.\n")
  (insert "# IT SHOULD NOT BE MODIFIED DIRECTLY.\n")
  (insert-file-contents "README.org")
  (write-file "README.org"))
#+end_src

* Scratch

** Aliases for common functions, particularly useful for eshell

#+begin_src emacs-lisp
(defalias 'ff 'find-file)
(defalias 'q 'quit-window)
#+end_src

** COMMENT Bibliography setup

Stolen from Musa's configuration.
Causing complaints about missing required packages.
#+begin_src emacs-lisp
(use-package org-ref
  :custom ;; Files to look at when no “╲bibliography{⋯}”
          ;; is present in a file.
          ;; Most useful for non-LaTeX files.
        (reftex-default-bibliography '("~/Dropbox/McMaster/references.bib"))
        (bibtex-completion-bibliography (car reftex-default-bibliography))
        (org-ref-default-bibliography reftex-default-bibliography))

;; Quick BibTeX references, sometimes.
(use-package helm-bibtex)
(use-package biblio)
#+end_src
** Always use spaces instead of tabs

#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src

#+begin_src emacs-lisp
(setq typescript-indent-level 2)
#+end_src
