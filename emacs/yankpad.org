#+Title: My literate ~yankpad~ file
#+Author: Mark Armstrong
#+Description: A literate file which generates my collection of snippets for yankpad (with yasnippets).

* Description

** Introduction

This ~org-mode~ file contains commonly repeated snippets of text
which I expand using ~yankpad~ along with ~yasnippets~.

Specifically, ~yankpad~ caches the snippets defined in this file,
and allows them to be expanded from a keyword with ~yankpad-expand~
or selected from a keymap with ~yankpad-map~.

With ~yasnippets~ installed (and its minor-mode active),
the contents of the snippets are actually executed using ~yasnippets~,
which provides a great deal of functionality, including tab fields
and arbitrary lisp code execution.

** Organisation notes

The outermost headings of this file separate it into /categories/.
Snippets in a category named after a mode are available
for yanking when that mode is active.
Other category's snippets can be made available by switching to that
category with ~yankpad-set-category~.
Snippets in categories marked ~:global:~ are always available.

Inside categories, I use subheadings to organise snippets.
The /lowest level/ headings define individual snippets.

Headings of snippets have the form ~expandkeys: Name :settings:key:~,
where
- ~expandkeys~ is a ~:~ separated list of keys for the snippet
  which can be expanded with ~yankpad-expand~,
- ~Name~ is the name of the snippet,
- ~settings~ is ~:~ separated list of settings for the snippets,
  possibly including
  - ~src~, which marks the snippet as being literate; only the
    contents of code blocks in such snippets are inserted.
  - ~func~, which marks the snippet as a function. In this case
    no text is inserted; instead the code blocks of the snippet are
    executed.
  - ~results~, which acts like ~func~, but in this case, the /results/
    of the code blocks inside the snippet
    are inserted.

Most of my snippets are marked ~:src:~, since this /is/ a literate file
(and I don't tend to use snippets for executing code).

** Documentation links

- [[https://github.com/Kungsgeten/yankpad][yankpad]]
- [[https://github.com/joaotavora/yasnippet][yasnippets]]
- [[https://orgmode.org/][org-mode]] (for good measure)

** Caveats

Sometimes snippets seem to act oddly in this file;
specifically snippets from lower in the file won't
expand higher in the file (sometimes).

For that reason, the ~org~ mode snippets come first,
as they are useful for adding to this file.

* org-mode
:properties:
:include: agda2-mode|tex-mode
:end:

I use ~org~ all the time, so you'll note in the ~:properties:~ drawer
that I include snippets from lots of other modes, since I often
write code from other modes in ~org~.

I sometime use Org syntax outside of Org mode, so also see
the [[Default]] category for more Org-related snippets.

** Other

*** Gmail filters

These XML snippets are for creating filters for my Gmail account,
based on various criteria.

**** gmfto: Gmail filter by “to”                               :src:gmfto:

#+begin_src xml
<entry> <category term='filter'></category>
  <title>$1</title>
  <apps:property
      name='to'
      value='$1'/>
  <apps:property
      name='label'
      value='$2'/>
  ${3:<apps:property
      name='shouldMarkAsRead'
      value='true'/>}
  ${4:<apps:property
      name='shouldArchive'
      value='true'/>}
</entry>
#+end_src

**** gmffrom: Gmail filter by “from”                         :src:gmffrom:

#+begin_src xml
<entry> <category term='filter'></category>
  <title>$1</title>
  <apps:property
      name='from'
      value='$1'/>
  <apps:property
      name='label'
      value='$2'/>
  ${3:<apps:property
      name='shouldMarkAsRead'
      value='true'/>}
  ${4:<apps:property
      name='shouldArchive'
      value='true'/>}
</entry>
#+end_src

* Default                                       :global:

The category “Default” will be used if there is no category for the
current major mode.

I make these snippets available everywhere else as well by marking
the category as ~:global:~.

** Org related

I often use Org syntax outside of Org mode, especially when
writing literate Agda documents. So many Org syntax snippets
are included here to be available everywhere.

*** dh: Document header                       :src:orgdh:

I usually use what I think is a fairly minimalist document header.

#+begin_src text
#+Title: $1
#+Author: ${2:Mark Armstrong}
#+Description: $3

$0
#+end_src
*** ~org~ blocks

*** ~src~ blocks

Note that the ~,#~ expands to the ~org~ “comment” character ~#~.

This is needed to have a ~#+end_src~ /inside/ a ~src~ block.

**** src: Generic source block               :src:orgsrc:

#+begin_src text
#+begin_src $1
$0
,#+end_src
#+end_src

**** el: Emacs lisp block                    :src:orgel:

#+begin_src text
#+begin_src emacs-lisp
$0
,#+end_src
#+end_src

**** t: Plaintext                            :src:orgt:

#+begin_src text
#+begin_src text
$0
,#+end_src
#+end_src

**** latex: LaTeX                            :src:orglatex:

#+begin_src text
#+begin_src latex
$0
,#+end_src
#+end_src

**** sh: Shell                               :src:orgsh:

#+begin_src text
#+begin_src shell
$0
,#+end_src
#+end_src

**** ag: Agda code block                                       :src:orgag:

#+begin_src text
#+begin_src org-agda
$0
,#+end_src
#+end_src

**** oz: Oz code block                                         :src:orgoz:

#+begin_src text
#+begin_src oz :results output :noweb yes
$0
,#+end_src
#+end_src

**** rb: Ruby code block                     :src:orgrb:

#+begin_src text
#+begin_src ruby
$0
,#+end_src
#+end_src

**** py: Python code block                   :src:orgpy:

#+begin_src text
#+begin_src python
$0
,#+end_src
#+end_src

**** ic: “Interactive” C block               :src:orgicc:

#+begin_src text
#+begin_src c :tangle (currently-working-with "${1:generated}")
$0
,#+end_src
#+end_src

**** icn: Inactive “Interactive” C block     :src:orgicn:

#+begin_src text
#+begin_src c :tangle (not-currently-working-with "${1:generated}")
$0
,#+end_src
#+end_src

**** ich: “Interactive” C header block       :src:orgich:

#+begin_src text
#+begin_src c :tangle (currently-working-with-header "${1:generated}")
$0
,#+end_src
#+end_src

**** xml: XML block                          :src:orgxml:

#+begin_src text
#+begin_src xml
$0
,#+end_src
#+end_src

**** fs: F# block                            :src:orgfs:

#+begin_src text
#+begin_src fsharp
$0
,#+end_src
#+end_src

*** Blocks for LaTeX exports

**** ldisc: Discussion                                         :src:ldisc:

#+begin_src emacs-lisp
#+attr_LaTeX: :options [$1]
#+begin_discussion
$0
#+end_discussion
#+end_src

*** Others

**** c: Center                                               :src:orgcntr:

#+begin_src emacs-lisp
#+begin_center
$0
#+end_center
#+end_src

**** e: Example                                                :src:orgex:

#+begin_src emacs-lisp
#+begin_example $1
$0
#+end_example
#+end_src

**** quot: Quote                                             :src:orgquot:

#+begin_src emacs-lisp
#+begin_quote
$0
#+end_quote
#+end_src

**** ques: Question                                          :src:orgques:

#+begin_src emacs-lisp
#+begin_example $1
$0
#+end_example
#+end_src

**** ans: Answer                                                :src:organs:

#+begin_src emacs-lisp
#+begin_example $1
$0
#+end_example
#+end_src

** Punctuation, parentheses, etc.

*** dq: Double quotes                                              :src:dq:

#+begin_src text
“$1” $0
#+end_src

*** card: Cardinality                                            :src:card:

#+begin_src text
|$1| $0
#+end_src

*** enc: Encoding                                                 :src:enc:

#+begin_src emacs-lisp
⌜$1⌝ $0
#+end_src

*** denc: Decoding                                               :src:denc:

#+begin_src emacs-lisp
⟦$1⟧ $0
#+end_src

** Words

*** det: deterministic                                                :src:

#+begin_src text
deterministic
#+end_src

*** ndet: non-deterministic                                           :src:

#+begin_src text
non-deterministic
#+end_src

** Filepaths

*** Thesis

**** simp-dfa-tex:                                                   :src:

#+begin_src text
latex/Automata/Simple/DFA.tex
#+end_src

** Other global

*** thisfile: Name of the current file (buffer)              :src:thisfile:

#+begin_src text
`(buffer-name)`
#+end_src

*** dasht: A “title” surrouned by dashes                        :src:dasht:

#+begin_src text
${1:$(make-string (string-width yas-text) ?\-)}
${1:Title}
${1:$(make-string (string-width yas-text) ?\-)}
$0
#+end_src

Credit: the [[http://joaotavora.github.io/yasnippet/snippet-development.html#orge2c1f71][yasnippet tutorial

*** dj: Get a dad joke                                             :src:dj:
#+begin_src text
`(dad-joke)`
#+end_src

*** yas: Yasnippet template                                       :src:yas:

This should really move to a specialised category.
#+begin_src text
# name: $1
# key: $2
# --
$0
#+end_src

* agda2-mode

** agl: Literate code block                    :src:agl:

#+begin_src text
\begin{code}
$0
\end{code}
#+end_src

** ga: Break up a literate code block                               :src:ga:

Often we need to break up code blocks somewhere in the middle.

The ~\end{code}~ here is an Elisp string so that it's not mistaken
as ending a LaTeX code environment in /this/ document.

#+begin_src text
`"\\end{code}"`
$0
\begin{code}
#+end_src

** tag: Catch-file-between-tags                                    :src:tag:

#+begin_src text
%<*$1>
$0
%</$1>
#+end_src

** fun: Function declaration with type signature                   :src:fun:

#+begin_src text
$1 : $0
$1 = ?
#+end_src

** dt: Datatype declaration                                         :src:dt:

#+begin_src text
data $1 : Set where
  $2 : $1
#+end_src

** setl: ~Set~ arguments parameterised by a ~Level~                   :src:setl:

#+begin_src text
{${1:a} : Level} → (${2:A} : Set $1) → $0
#+end_src

** isetl: /Implicit/ ~Set~ arguments parameterised by a ~Level~        :src:isetl:

#+begin_src text
{${1:a} : Level} → {${2:A} : Set $1} → $0
#+end_src

** 2setl: ~Set~ arguments parameterised by two ~Level's~             :src:2setl:

#+begin_src text
{${1:a} ${2:b} : Level} → (${3:A} : Set $1) → (${4:B} : Set $1) → $0
#+end_src

** i2setl: /Implicit/ ~Set~ arguments parameterised by two ~Level's~ :src:i2setl:

#+begin_src text
{${1:a} ${2:b} : Level} → {${3:A} : Set $1} → {${4:B} : Set $1} → $0
#+end_src
** with: ~with~ pattern                                             :src:with:

#+begin_src text
with $1
... | ${2:thing} = $0
#+end_src

** eqr: Start a ~≡-Reasoning~ block                                  :src:eqr:

#+begin_src text
begin
  ?$0
≡⟨ ${1:?} ⟩
  ?
∎
#+end_src

** eqs: Insert a step in a ~≡-Reasoning~ block                       :src:eqs:

#+begin_src text
≡⟨ ${1:?} ⟩
  $0
#+end_src
* tex-mode

** leg: General LaTeX environment                                  :src:leg:

#+begin_src text
\begin{$1}
$0
\end{$1}
#+end_src

** lei: LaTeX itemize                                              :src:lei:

#+begin_src text
\begin{itemize}
$0
\end{itemize}
#+end_src

** lec: LaTeX center                                               :src:lec:

#+begin_src text
\begin{center}
$0
\end{center}
#+end_src

** li: LaTeX item                                                   :src:li:

#+begin_src text
\item $0
#+end_src

** cfbt: Import a tagged portion of another file                    :src:li:

Using the package ~catchfilebetweentags~.

#+begin_src text
\ExecuteMetaData[$1]{$2}$0
#+end_src
